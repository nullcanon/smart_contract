{
	"id": "e3715edfd7ade8df2890d9b9aeabf6a2",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.15",
	"solcLongVersion": "0.8.15+commit.e14f2714",
	"input": {
		"language": "Solidity",
		"sources": {
			"upgradeable/ERC20Updateable.sol": {
				"content": "// contracts/MyTokenV1.sol\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\";\r\nimport \"../node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\r\nimport \"../node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\";\r\n\r\ncontract MyTokenV1 is Initializable, ERC20Upgradeable {\r\n    function initialize() initializer public {\r\n      __ERC20_init(\"MyToken\", \"MTK\");\r\n\r\n      _mint(msg.sender, 1000 * 10 ** decimals());\r\n    }\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor() initializer {}\r\n}"
			},
			"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../utils/ContextUpgradeable.sol\";\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the owner account will be the one that deploys the contract. This\r\n * can later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\r\n    address private _owner;\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial owner.\r\n     */\r\n    function __Ownable_init() internal onlyInitializing {\r\n        __Ownable_init_unchained();\r\n    }\r\n\r\n    function __Ownable_init_unchained() internal onlyInitializing {\r\n        _transferOwnership(_msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby removing any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./IERC20Upgradeable.sol\";\r\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\r\nimport \"../../utils/ContextUpgradeable.sol\";\r\nimport \"../../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC20} interface.\r\n *\r\n * This implementation is agnostic to the way tokens are created. This means\r\n * that a supply mechanism has to be added in a derived contract using {_mint}.\r\n * For a generic mechanism see {ERC20PresetMinterPauser}.\r\n *\r\n * TIP: For a detailed writeup see our guide\r\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\r\n * to implement supply mechanisms].\r\n *\r\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\r\n * instead returning `false` on failure. This behavior is nonetheless\r\n * conventional and does not conflict with the expectations of ERC20\r\n * applications.\r\n *\r\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\r\n * This allows applications to reconstruct the allowance for all accounts just\r\n * by listening to said events. Other implementations of the EIP may not emit\r\n * these events, as it isn't required by the specification.\r\n *\r\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\r\n * functions have been added to mitigate the well-known issues around setting\r\n * allowances. See {IERC20-approve}.\r\n */\r\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\r\n    mapping(address => uint256) private _balances;\r\n\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n\r\n    uint256 private _totalSupply;\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n\r\n    /**\r\n     * @dev Sets the values for {name} and {symbol}.\r\n     *\r\n     * The default value of {decimals} is 18. To select a different value for\r\n     * {decimals} you should overload it.\r\n     *\r\n     * All two of these values are immutable: they can only be set once during\r\n     * construction.\r\n     */\r\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        __ERC20_init_unchained(name_, symbol_);\r\n    }\r\n\r\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() public view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token, usually a shorter version of the\r\n     * name.\r\n     */\r\n    function symbol() public view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the number of decimals used to get its user representation.\r\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\r\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\r\n     *\r\n     * Tokens usually opt for a value of 18, imitating the relationship between\r\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\r\n     * overridden;\r\n     *\r\n     * NOTE: This information is only used for _display_ purposes: it in\r\n     * no way affects any of the arithmetic of the contract, including\r\n     * {IERC20-balanceOf} and {IERC20-transfer}.\r\n     */\r\n    function decimals() public view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-totalSupply}.\r\n     */\r\n    function totalSupply() public view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-balanceOf}.\r\n     */\r\n    function balanceOf(address account) public view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transfer}.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - the caller must have a balance of at least `amount`.\r\n     */\r\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-allowance}.\r\n     */\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-approve}.\r\n     *\r\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\r\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC20-transferFrom}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance. This is not\r\n     * required by the EIP. See the note at the beginning of {ERC20}.\r\n     *\r\n     * NOTE: Does not update the allowance if the current allowance\r\n     * is the maximum `uint256`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` and `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     * - the caller must have allowance for ``from``'s tokens of at least\r\n     * `amount`.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) public virtual override returns (bool) {\r\n        address spender = _msgSender();\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\r\n     *\r\n     * This is an alternative to {approve} that can be used as a mitigation for\r\n     * problems described in {IERC20-approve}.\r\n     *\r\n     * Emits an {Approval} event indicating the updated allowance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `spender` cannot be the zero address.\r\n     * - `spender` must have allowance for the caller of at least\r\n     * `subtractedValue`.\r\n     */\r\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\r\n        address owner = _msgSender();\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * @dev Moves `amount` of tokens from `from` to `to`.\r\n     *\r\n     * This internal function is equivalent to {transfer}, and can be used to\r\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` must have a balance of at least `amount`.\r\n     */\r\n    function _transfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        require(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n        _beforeTokenTransfer(from, to, amount);\r\n\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\r\n            // decrementing then incrementing.\r\n            _balances[to] += amount;\r\n        }\r\n\r\n        emit Transfer(from, to, amount);\r\n\r\n        _afterTokenTransfer(from, to, amount);\r\n    }\r\n\r\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\r\n     * the total supply.\r\n     *\r\n     * Emits a {Transfer} event with `from` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     */\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n        _beforeTokenTransfer(address(0), account, amount);\r\n\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n\r\n        _afterTokenTransfer(address(0), account, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `amount` tokens from `account`, reducing the\r\n     * total supply.\r\n     *\r\n     * Emits a {Transfer} event with `to` set to the zero address.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `account` cannot be the zero address.\r\n     * - `account` must have at least `amount` tokens.\r\n     */\r\n    function _burn(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n        _beforeTokenTransfer(account, address(0), amount);\r\n\r\n        uint256 accountBalance = _balances[account];\r\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\r\n        unchecked {\r\n            _balances[account] = accountBalance - amount;\r\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\r\n            _totalSupply -= amount;\r\n        }\r\n\r\n        emit Transfer(account, address(0), amount);\r\n\r\n        _afterTokenTransfer(account, address(0), amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\r\n     *\r\n     * This internal function is equivalent to `approve`, and can be used to\r\n     * e.g. set automatic allowances for certain subsystems, etc.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `owner` cannot be the zero address.\r\n     * - `spender` cannot be the zero address.\r\n     */\r\n    function _approve(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n\r\n    /**\r\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\r\n     *\r\n     * Does not update the allowance amount in case of infinite allowance.\r\n     * Revert if not enough allowance is available.\r\n     *\r\n     * Might emit an {Approval} event.\r\n     */\r\n    function _spendAllowance(\r\n        address owner,\r\n        address spender,\r\n        uint256 amount\r\n    ) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Hook that is called before any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * will be transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _beforeTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev Hook that is called after any transfer of tokens. This includes\r\n     * minting and burning.\r\n     *\r\n     * Calling conditions:\r\n     *\r\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\r\n     * has been transferred to `to`.\r\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\r\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\r\n     * - `from` and `to` are never both zero.\r\n     *\r\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\r\n     */\r\n    function _afterTokenTransfer(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) internal virtual {}\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[45] private __gap;\r\n}\r\n"
			},
			"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\r\n\r\npragma solidity ^0.8.2;\r\n\r\nimport \"../../utils/AddressUpgradeable.sol\";\r\n\r\n/**\r\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\r\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\r\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\r\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\r\n *\r\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\r\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\r\n * case an upgrade adds a module that needs to be initialized.\r\n *\r\n * For example:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * contract MyToken is ERC20Upgradeable {\r\n *     function initialize() initializer public {\r\n *         __ERC20_init(\"MyToken\", \"MTK\");\r\n *     }\r\n * }\r\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\r\n *     function initializeV2() reinitializer(2) public {\r\n *         __ERC20Permit_init(\"MyToken\");\r\n *     }\r\n * }\r\n * ```\r\n *\r\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\r\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\r\n *\r\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\r\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\r\n *\r\n * [CAUTION]\r\n * ====\r\n * Avoid leaving a contract uninitialized.\r\n *\r\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\r\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\r\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\r\n *\r\n * [.hljs-theme-light.nopadding]\r\n * ```\r\n * /// @custom:oz-upgrades-unsafe-allow constructor\r\n * constructor() {\r\n *     _disableInitializers();\r\n * }\r\n * ```\r\n * ====\r\n */\r\nabstract contract Initializable {\r\n    /**\r\n     * @dev Indicates that the contract has been initialized.\r\n     * @custom:oz-retyped-from bool\r\n     */\r\n    uint8 private _initialized;\r\n\r\n    /**\r\n     * @dev Indicates that the contract is in the process of being initialized.\r\n     */\r\n    bool private _initializing;\r\n\r\n    /**\r\n     * @dev Triggered when the contract has been initialized or reinitialized.\r\n     */\r\n    event Initialized(uint8 version);\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\r\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\r\n     */\r\n    modifier initializer() {\r\n        bool isTopLevelCall = !_initializing;\r\n        require(\r\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\r\n            \"Initializable: contract is already initialized\"\r\n        );\r\n        _initialized = 1;\r\n        if (isTopLevelCall) {\r\n            _initializing = true;\r\n        }\r\n        _;\r\n        if (isTopLevelCall) {\r\n            _initializing = false;\r\n            emit Initialized(1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\r\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\r\n     * used to initialize parent contracts.\r\n     *\r\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\r\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\r\n     * initialization.\r\n     *\r\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\r\n     * a contract, executing them in the right order is up to the developer or operator.\r\n     */\r\n    modifier reinitializer(uint8 version) {\r\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\r\n        _initialized = version;\r\n        _initializing = true;\r\n        _;\r\n        _initializing = false;\r\n        emit Initialized(version);\r\n    }\r\n\r\n    /**\r\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\r\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\r\n     */\r\n    modifier onlyInitializing() {\r\n        require(_initializing, \"Initializable: contract is not initializing\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\r\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\r\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\r\n     * through proxies.\r\n     */\r\n    function _disableInitializers() internal virtual {\r\n        require(!_initializing, \"Initializable: contract is initializing\");\r\n        if (_initialized < type(uint8).max) {\r\n            _initialized = type(uint8).max;\r\n            emit Initialized(type(uint8).max);\r\n        }\r\n    }\r\n}\r\n"
			},
			"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\r\n\r\npragma solidity ^0.8.0;\r\nimport \"../proxy/utils/Initializable.sol\";\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract ContextUpgradeable is Initializable {\r\n    function __Context_init() internal onlyInitializing {\r\n    }\r\n\r\n    function __Context_init_unchained() internal onlyInitializing {\r\n    }\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[50] private __gap;\r\n}\r\n"
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"../IERC20Upgradeable.sol\";\r\n\r\n/**\r\n * @dev Interface for the optional metadata functions from the ERC20 standard.\r\n *\r\n * _Available since v4.1._\r\n */\r\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\r\n    /**\r\n     * @dev Returns the name of the token.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the symbol of the token.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the decimals places of the token.\r\n     */\r\n    function decimals() external view returns (uint8);\r\n}\r\n"
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\r\n\r\npragma solidity ^0.8.0;\r\n\r\n/**\r\n * @dev Interface of the ERC20 standard as defined in the EIP.\r\n */\r\ninterface IERC20Upgradeable {\r\n    /**\r\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\r\n     * another (`to`).\r\n     *\r\n     * Note that `value` may be zero.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n\r\n    /**\r\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\r\n     * a call to {approve}. `value` is the new allowance.\r\n     */\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens in existence.\r\n     */\r\n    function totalSupply() external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Returns the amount of tokens owned by `account`.\r\n     */\r\n    function balanceOf(address account) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from the caller's account to `to`.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Returns the remaining number of tokens that `spender` will be\r\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\r\n     * zero by default.\r\n     *\r\n     * This value changes when {approve} or {transferFrom} are called.\r\n     */\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n\r\n    /**\r\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\r\n     * that someone may use both the old and the new allowance by unfortunate\r\n     * transaction ordering. One possible solution to mitigate this race\r\n     * condition is to first reduce the spender's allowance to 0 and set the\r\n     * desired value afterwards:\r\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n\r\n    /**\r\n     * @dev Moves `amount` tokens from `from` to `to` using the\r\n     * allowance mechanism. `amount` is then deducted from the caller's\r\n     * allowance.\r\n     *\r\n     * Returns a boolean value indicating whether the operation succeeded.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(\r\n        address from,\r\n        address to,\r\n        uint256 amount\r\n    ) external returns (bool);\r\n}\r\n"
			},
			"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\r\n\r\npragma solidity ^0.8.1;\r\n\r\n/**\r\n * @dev Collection of functions related to the address type\r\n */\r\nlibrary AddressUpgradeable {\r\n    /**\r\n     * @dev Returns true if `account` is a contract.\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * It is unsafe to assume that an address for which this function returns\r\n     * false is an externally-owned account (EOA) and not a contract.\r\n     *\r\n     * Among others, `isContract` will return false for the following\r\n     * types of addresses:\r\n     *\r\n     *  - an externally-owned account\r\n     *  - a contract in construction\r\n     *  - an address where a contract will be created\r\n     *  - an address where a contract lived, but was destroyed\r\n     * ====\r\n     *\r\n     * [IMPORTANT]\r\n     * ====\r\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\r\n     *\r\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\r\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\r\n     * constructor.\r\n     * ====\r\n     */\r\n    function isContract(address account) internal view returns (bool) {\r\n        // This method relies on extcodesize/address.code.length, which returns 0\r\n        // for contracts in construction, since the code is only stored at the end\r\n        // of the constructor execution.\r\n\r\n        return account.code.length > 0;\r\n    }\r\n\r\n    /**\r\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\r\n     * `recipient`, forwarding all available gas and reverting on errors.\r\n     *\r\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\r\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\r\n     * imposed by `transfer`, making them unable to receive funds via\r\n     * `transfer`. {sendValue} removes this limitation.\r\n     *\r\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\r\n     *\r\n     * IMPORTANT: because control is transferred to `recipient`, care must be\r\n     * taken to not create reentrancy vulnerabilities. Consider using\r\n     * {ReentrancyGuard} or the\r\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\r\n     */\r\n    function sendValue(address payable recipient, uint256 amount) internal {\r\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\r\n\r\n        (bool success, ) = recipient.call{value: amount}(\"\");\r\n        require(success, \"Address: unable to send value, recipient may have reverted\");\r\n    }\r\n\r\n    /**\r\n     * @dev Performs a Solidity function call using a low level `call`. A\r\n     * plain `call` is an unsafe replacement for a function call: use this\r\n     * function instead.\r\n     *\r\n     * If `target` reverts with a revert reason, it is bubbled up by this\r\n     * function (like regular Solidity function calls).\r\n     *\r\n     * Returns the raw returned data. To convert to the expected return value,\r\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `target` must be a contract.\r\n     * - calling `target` with `data` must not revert.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\r\n     * `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, 0, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but also transferring `value` wei to `target`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - the calling contract must have an ETH balance of at least `value`.\r\n     * - the called Solidity function must be `payable`.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value\r\n    ) internal returns (bytes memory) {\r\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\r\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\r\n     *\r\n     * _Available since v3.1._\r\n     */\r\n    function functionCallWithValue(\r\n        address target,\r\n        bytes memory data,\r\n        uint256 value,\r\n        string memory errorMessage\r\n    ) internal returns (bytes memory) {\r\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\r\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\r\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\r\n     * but performing a static call.\r\n     *\r\n     * _Available since v3.3._\r\n     */\r\n    function functionStaticCall(\r\n        address target,\r\n        bytes memory data,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        (bool success, bytes memory returndata) = target.staticcall(data);\r\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\r\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\r\n     *\r\n     * _Available since v4.8._\r\n     */\r\n    function verifyCallResultFromTarget(\r\n        address target,\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal view returns (bytes memory) {\r\n        if (success) {\r\n            if (returndata.length == 0) {\r\n                // only check isContract if the call was successful and the return data is empty\r\n                // otherwise we already know that it was a contract\r\n                require(isContract(target), \"Address: call to non-contract\");\r\n            }\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\r\n     * revert reason or using the provided one.\r\n     *\r\n     * _Available since v4.3._\r\n     */\r\n    function verifyCallResult(\r\n        bool success,\r\n        bytes memory returndata,\r\n        string memory errorMessage\r\n    ) internal pure returns (bytes memory) {\r\n        if (success) {\r\n            return returndata;\r\n        } else {\r\n            _revert(returndata, errorMessage);\r\n        }\r\n    }\r\n\r\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\r\n        // Look for revert reason and bubble it up if present\r\n        if (returndata.length > 0) {\r\n            // The easiest way to bubble the revert reason is using memory via assembly\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                let returndata_size := mload(returndata)\r\n                revert(add(32, returndata), returndata_size)\r\n            }\r\n        } else {\r\n            revert(errorMessage);\r\n        }\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567bb374cec704c71a8279236b98161c99d68c4e4d490c6ce5d7f5f2acd3d665\",\"dweb:/ipfs/QmXHXmhmHc9c9ryUSvAoKjNYqn916H1wBFGpRUixWYw9Gp\"]},\"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89d3edacd07d0f2df80f91f2b8bc0a53a638561ead828670441333d6915671bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://653fb27aa67cf93b556d0664125719c16cb2a2852f5307b90f6f7ea9ac6d9196\",\"dweb:/ipfs/QmWS7gFdrmrGsUA4pHqtQFn5uAvWiiUxoao1W2HrFAmAj8\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x53849a4d64d7b6a25a4f8cea2a16ccded9d5cf57e21d8d2ce24d40b0c2a71863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://00f801f58c90aa307a563c301e895f371c1e1e8ef0e8645d9601a449a1e2752c\",\"dweb:/ipfs/QmUtMkLnPxyoSx8bRiJdUwVGfxDacaHphp4UEcSKMWgY5b\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1baa3e4dd802cf1e2ed3634f79f3b1f86397f1bcb819f55811da1a9bf6a6189c\",\"dweb:/ipfs/QmPmiK9Tj3P7fhnroK2REuendr4sjx4vjev7PRQJyxMob5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1322,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 10,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "_owner",
								"offset": 0,
								"slot": "51",
								"type": "t_address"
							},
							{
								"astId": 130,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol:OwnableUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "52",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"events": {
							"Initialized(uint8)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"_initialized": {
								"custom:oz-retyped-from": "bool",
								"details": "Indicates that the contract has been initialized."
							},
							"_initializing": {
								"details": "Indicates that the contract is in the process of being initialized."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89d3edacd07d0f2df80f91f2b8bc0a53a638561ead828670441333d6915671bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://653fb27aa67cf93b556d0664125719c16cb2a2852f5307b90f6f7ea9ac6d9196\",\"dweb:/ipfs/QmWS7gFdrmrGsUA4pHqtQFn5uAvWiiUxoao1W2HrFAmAj8\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x53849a4d64d7b6a25a4f8cea2a16ccded9d5cf57e21d8d2ce24d40b0c2a71863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://00f801f58c90aa307a563c301e895f371c1e1e8ef0e8645d9601a449a1e2752c\",\"dweb:/ipfs/QmUtMkLnPxyoSx8bRiJdUwVGfxDacaHphp4UEcSKMWgY5b\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol:Initializable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							}
						],
						"types": {
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1515:14039  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":1515:14039  contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x39509351\n      gt\n      tag_14\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_10\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_14:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2557:2657  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_15\n      tag_16\n      jump\t// in\n    tag_15:\n      mload(0x40)\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_19\n      tag_20\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_20:\n      tag_22\n      jump\t// in\n    tag_19:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_17\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3677:3785  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3765:3777  _totalSupply */\n      sload(0x35)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3677:3785  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_25:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3677:3785  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_17\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5689:5984  function transferFrom(... */\n    tag_6:\n      tag_19\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3519:3612  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3602:3604  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3519:3612  function decimals() public view virtual override returns (uint8) {... */\n      tag_17\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6393:6631  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_19\n      tag_39\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_39:\n      tag_40\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3848:3975  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_25\n      tag_43\n      calldatasize\n      0x04\n      tag_44\n      jump\t// in\n    tag_43:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3967  _balances[account] */\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3922:3929  uint256 */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3967  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3958  _balances */\n      0x33\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3967  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3848:3975  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2776:2880  function symbol() public view virtual override returns (string memory) {... */\n    tag_10:\n      tag_15\n      tag_48\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7134:7570  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_11:\n      tag_19\n      tag_51\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_51:\n      tag_52\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4181:4374  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_12:\n      tag_19\n      tag_55\n      calldatasize\n      0x04\n      tag_21\n      jump\t// in\n    tag_55:\n      tag_56\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4437:4588  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_13:\n      tag_25\n      tag_59\n      calldatasize\n      0x04\n      tag_60\n      jump\t// in\n    tag_59:\n      tag_61\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2557:2657  function name() public view virtual override returns (string memory) {... */\n    tag_16:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2611:2624  string memory */\n      0x60\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2644:2649  _name */\n      0x36\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2637:2649  return _name */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n    tag_64:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_66\n      swap1\n      tag_65\n      jump\t// in\n    tag_66:\n      dup1\n      iszero\n      tag_67\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_68\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_67)\n    tag_68:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_69:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_69\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_67:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2557:2657  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_22:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4991:4995  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5047:5079  _approve(owner, spender, amount) */\n      tag_73\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5063:5070  spender */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5072:5078  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5047:5055  _approve */\n      tag_74\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5047:5079  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_73:\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5097:5101  true */\n      0x01\n      swap4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5689:5984  function transferFrom(... */\n    tag_32:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5820:5824  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5878:5916  _spendAllowance(from, spender, amount) */\n      tag_78\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5894:5898  from */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5909:5915  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5878:5893  _spendAllowance */\n      tag_79\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5878:5916  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_78:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5927:5954  _transfer(from, to, amount) */\n      tag_80\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5937:5941  from */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5943:5945  to */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5947:5953  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5927:5936  _transfer */\n      tag_81\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5927:5954  _transfer(from, to, amount) */\n      jump\t// in\n    tag_80:\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5972:5976  true */\n      0x01\n      swap5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5689:5984  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6393:6631  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_40:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6481:6485  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6537:6601  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_73\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6553:6560  spender */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6590:6600  addedValue */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6587  allowance(owner, spender) */\n      tag_86\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6553:6560  spender */\n      dup4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6571  allowance */\n      tag_61\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6587  allowance(owner, spender) */\n      jump\t// in\n    tag_86:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6600  allowance(owner, spender) + addedValue */\n      tag_87\n      swap2\n      swap1\n      tag_88\n      jump\t// in\n    tag_87:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6537:6545  _approve */\n      tag_74\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6537:6601  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2776:2880  function symbol() public view virtual override returns (string memory) {... */\n    tag_48:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2832:2845  string memory */\n      0x60\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2865:2872  _symbol */\n      0x37\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2858:2872  return _symbol */\n      dup1\n      sload\n      tag_64\n      swap1\n      tag_65\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7134:7570  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_52:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7227:7231  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7227:7231  bool */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7310:7335  allowance(owner, spender) */\n      tag_98\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7327:7334  spender */\n      dup7\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7310:7319  allowance */\n      tag_61\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7310:7335  allowance(owner, spender) */\n      jump\t// in\n    tag_98:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7283:7335  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7374:7389  subtractedValue */\n      dup4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7354:7370  currentAllowance */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7354:7389  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7346:7431  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3222:3224   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7346:7431  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3204:3225   */\n      mstore\n        /* \"#utility.yul\":3261:3263   */\n      0x25\n        /* \"#utility.yul\":3241:3259   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3234:3264   */\n      mstore\n        /* \"#utility.yul\":3300:3334   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":3280:3298   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3273:3335   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":3351:3369   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3344:3379   */\n      mstore\n        /* \"#utility.yul\":3396:3415   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7346:7431  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7467:7527  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_80\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7476:7481  owner */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7483:7490  spender */\n      dup7\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7511:7526  subtractedValue */\n      dup7\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7492:7508  currentAllowance */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7492:7526  currentAllowance - subtractedValue */\n      sub\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7467:7475  _approve */\n      tag_74\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7467:7527  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4181:4374  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_56:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4260:4264  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4316:4344  _transfer(owner, to, amount) */\n      tag_73\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4333:4335  to */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4337:4343  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4316:4325  _transfer */\n      tag_81\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4316:4344  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4437:4588  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_61:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4571  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4526:4533  uint256 */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4571  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4564  _allowances */\n      0x34\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4571  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4580  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4437:4588  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11161:11541  function _approve(... */\n    tag_74:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11297:11316  owner != address(0) */\n      dup4\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_109\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3628:3630   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3610:3631   */\n      mstore\n        /* \"#utility.yul\":3667:3669   */\n      0x24\n        /* \"#utility.yul\":3647:3665   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":3640:3670   */\n      mstore\n        /* \"#utility.yul\":3706:3740   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":3686:3704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3679:3741   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":3757:3775   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3750:3784   */\n      mstore\n        /* \"#utility.yul\":3801:3820   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3426:3826   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_109:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11376:11397  spender != address(0) */\n      dup3\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_112\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4033:4035   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4015:4036   */\n      mstore\n        /* \"#utility.yul\":4072:4074   */\n      0x22\n        /* \"#utility.yul\":4052:4070   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4045:4075   */\n      mstore\n        /* \"#utility.yul\":4111:4145   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":4091:4109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4084:4146   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":4162:4180   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4155:4187   */\n      mstore\n        /* \"#utility.yul\":4204:4223   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":3831:4229   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11467  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11460  _allowances */\n      0x34\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11467  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11476  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11485  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11533  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11533  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11533  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11161:11541  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11832:12285  function _spendAllowance(... */\n    tag_79:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11967:11991  uint256 currentAllowance */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11994:12019  allowance(owner, spender) */\n      tag_117\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12004:12009  owner */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12011:12018  spender */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11994:12003  allowance */\n      tag_61\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11994:12019  allowance(owner, spender) */\n      jump\t// in\n    tag_117:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11967:12019  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12034:12050  currentAllowance */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12034:12071  currentAllowance != type(uint256).max */\n      eq\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12030:12278  if (currentAllowance != type(uint256).max) {... */\n      tag_122\n      jumpi\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12116:12122  amount */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12096:12112  currentAllowance */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12096:12122  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_119\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4436:4438   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4418:4439   */\n      mstore\n        /* \"#utility.yul\":4475:4477   */\n      0x1d\n        /* \"#utility.yul\":4455:4473   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4448:4478   */\n      mstore\n        /* \"#utility.yul\":4514:4545   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":4494:4512   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4487:4546   */\n      mstore\n        /* \"#utility.yul\":4563:4581   */\n      0x64\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":4234:4587   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_119:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12200:12251  _approve(owner, spender, currentAllowance - amount) */\n      tag_122\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12209:12214  owner */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12216:12223  spender */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12244:12250  amount */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12225:12241  currentAllowance */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12225:12250  currentAllowance - amount */\n      sub\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12200:12208  _approve */\n      tag_74\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12200:12251  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_122:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11956:12285  {... */\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11832:12285  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8040:8880  function _transfer(... */\n    tag_81:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8171:8189  from != address(0) */\n      dup4\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_124\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":4794:4796   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":4776:4797   */\n      mstore\n        /* \"#utility.yul\":4833:4835   */\n      0x25\n        /* \"#utility.yul\":4813:4831   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":4806:4836   */\n      mstore\n        /* \"#utility.yul\":4872:4906   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":4852:4870   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":4845:4907   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":4923:4941   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":4916:4951   */\n      mstore\n        /* \"#utility.yul\":4968:4987   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4592:4993   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_124:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8250:8266  to != address(0) */\n      dup3\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_127\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5200:5202   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5182:5203   */\n      mstore\n        /* \"#utility.yul\":5239:5241   */\n      0x23\n        /* \"#utility.yul\":5219:5237   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5212:5242   */\n      mstore\n        /* \"#utility.yul\":5278:5312   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":5258:5276   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5251:5313   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":5329:5347   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5322:5355   */\n      mstore\n        /* \"#utility.yul\":5372:5391   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":4998:5397   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_127:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8407  _balances[from] */\n      dup4\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8370:8389  uint256 fromBalance */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8407  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8401  _balances */\n      0x33\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8407  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8426:8447  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_132\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5604:5606   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5586:5607   */\n      mstore\n        /* \"#utility.yul\":5643:5645   */\n      0x26\n        /* \"#utility.yul\":5623:5641   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5616:5646   */\n      mstore\n        /* \"#utility.yul\":5682:5716   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":5662:5680   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5655:5717   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":5733:5751   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5726:5762   */\n      mstore\n        /* \"#utility.yul\":5779:5798   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":5402:5804   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_132:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8541  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8535  _balances */\n      0x33\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8541  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8544:8564  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8564  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8744:8757  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8744:8767  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8796:8822  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_135\n      swap1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8558:8564  amount */\n      dup7\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8796:8822  Transfer(from, to, amount) */\n    tag_135:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8835:8872  _afterTokenTransfer(from, to, amount) */\n      tag_122\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12885:13010  function _beforeTokenTransfer(... */\n      jump\n        /* \"#utility.yul\":14:611   */\n    tag_18:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_143:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_145\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_143)\n    tag_145:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_146:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_140:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_148\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_148:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_21:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_150\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_150:\n        /* \"#utility.yul\":962:991   */\n      tag_151\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_140\n      jump\t// in\n    tag_151:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_31:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_155\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_155:\n        /* \"#utility.yul\":1612:1641   */\n      tag_156\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_140\n      jump\t// in\n    tag_156:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_157\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_140\n      jump\t// in\n    tag_157:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_44:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_160\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_160:\n        /* \"#utility.yul\":2100:2129   */\n      tag_161\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_140\n      jump\t// in\n    tag_161:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_60:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_163\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_163:\n        /* \"#utility.yul\":2308:2337   */\n      tag_164\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_140\n      jump\t// in\n    tag_164:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_165\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_140\n      jump\t// in\n    tag_165:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_65:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_167\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_167:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      sub\n        /* \"#utility.yul\":2618:2779   */\n      tag_168\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_168:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:3015   */\n    tag_88:\n        /* \"#utility.yul\":2830:2833   */\n      0x00\n        /* \"#utility.yul\":2861:2862   */\n      dup3\n        /* \"#utility.yul\":2857:2863   */\n      not\n        /* \"#utility.yul\":2854:2855   */\n      dup3\n        /* \"#utility.yul\":2851:2864   */\n      gt\n        /* \"#utility.yul\":2848:2984   */\n      iszero\n      tag_170\n      jumpi\n        /* \"#utility.yul\":2906:2916   */\n      0x4e487b71\n        /* \"#utility.yul\":2901:2904   */\n      0xe0\n        /* \"#utility.yul\":2897:2917   */\n      shl\n        /* \"#utility.yul\":2894:2895   */\n      0x00\n        /* \"#utility.yul\":2887:2918   */\n      mstore\n        /* \"#utility.yul\":2941:2945   */\n      0x11\n        /* \"#utility.yul\":2938:2939   */\n      0x04\n        /* \"#utility.yul\":2931:2946   */\n      mstore\n        /* \"#utility.yul\":2969:2973   */\n      0x24\n        /* \"#utility.yul\":2966:2967   */\n      0x00\n        /* \"#utility.yul\":2959:2974   */\n      revert\n        /* \"#utility.yul\":2848:2984   */\n    tag_170:\n      pop\n        /* \"#utility.yul\":3000:3009   */\n      add\n      swap1\n        /* \"#utility.yul\":2790:3015   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d1e5dbebf398f6d3e3ce5c995d7d900c31a15693737d9c5ea5d95ccb7abf4d5764736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610863806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a1565b60405180910390f35b6100df6100da366004610712565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461073c565b61024a565b604051601281526020016100c3565b6100df610131366004610712565b61026e565b6100f3610144366004610778565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610712565b61029f565b6100df610188366004610712565b61031f565b6100f361019b36600461079a565b61032d565b6060603680546101af906107cd565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107cd565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b9190610807565b610358565b6060603780546101af906107cd565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106ce578581018301518582016040015282016106b2565b818111156106e0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461070d57600080fd5b919050565b6000806040838503121561072557600080fd5b61072e836106f6565b946020939093013593505050565b60008060006060848603121561075157600080fd5b61075a846106f6565b9250610768602085016106f6565b9150604084013590509250925092565b60006020828403121561078a57600080fd5b610793826106f6565b9392505050565b600080604083850312156107ad57600080fd5b6107b6836106f6565b91506107c4602084016106f6565b90509250929050565b600181811c908216806107e157607f821691505b60208210810361080157634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561082857634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220d1e5dbebf398f6d3e3ce5c995d7d900c31a15693737d9c5ea5d95ccb7abf4d5764736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x863 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6CE JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72E DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x75A DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x768 PUSH1 0x20 DUP6 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x793 DUP3 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x7C4 PUSH1 0x20 DUP5 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7E1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x801 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x828 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 0xE5 0xDB 0xEB RETURN SWAP9 0xF6 0xD3 0xE3 0xCE 0x5C SWAP10 0x5D PUSH30 0x900C31A15693737D9C5EA5D95CCB7ABF4D5764736F6C634300080F003300 ",
							"sourceMap": "1515:12524:2:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_afterTokenTransfer_888": {
									"entryPoint": null,
									"id": 888,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_823": {
									"entryPoint": 856,
									"id": 823,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_877": {
									"entryPoint": null,
									"id": 877,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_msgSender_1308": {
									"entryPoint": null,
									"id": 1308,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_866": {
									"entryPoint": 1148,
									"id": 866,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_649": {
									"entryPoint": 1270,
									"id": 649,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_444": {
									"entryPoint": 813,
									"id": 444,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_469": {
									"entryPoint": 562,
									"id": 469,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_401": {
									"entryPoint": null,
									"id": 401,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_377": {
									"entryPoint": null,
									"id": 377,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_572": {
									"entryPoint": 671,
									"id": 572,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_531": {
									"entryPoint": 622,
									"id": 531,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@name_357": {
									"entryPoint": 416,
									"id": 357,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_367": {
									"entryPoint": 656,
									"id": 367,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_387": {
									"entryPoint": null,
									"id": 387,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_502": {
									"entryPoint": 586,
									"id": 502,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_426": {
									"entryPoint": 799,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 1782,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1912,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 1946,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 1852,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 1810,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 1697,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2055,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"extract_byte_array_length": {
									"entryPoint": 1997,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:5806:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:8",
																"statements": []
															},
															"src": "294:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:8"
															},
															"nodeType": "YulIf",
															"src": "443:91:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:8",
														"type": ""
													}
												],
												"src": "14:597:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:8"
															},
															"nodeType": "YulIf",
															"src": "713:70:8"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:8",
														"type": ""
													}
												],
												"src": "616:173:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:8"
															},
															"nodeType": "YulIf",
															"src": "891:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:8",
														"type": ""
													}
												],
												"src": "794:254:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:8",
														"type": ""
													}
												],
												"src": "1053:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:8",
														"type": ""
													}
												],
												"src": "1245:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:8"
															},
															"nodeType": "YulIf",
															"src": "1541:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:8",
														"type": ""
													}
												],
												"src": "1427:328:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:8",
														"type": ""
													}
												],
												"src": "1760:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:8"
															},
															"nodeType": "YulIf",
															"src": "2029:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:8",
														"type": ""
													}
												],
												"src": "1949:186:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:8"
															},
															"nodeType": "YulIf",
															"src": "2237:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:8",
														"type": ""
													}
												],
												"src": "2140:260:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:8"
															},
															"nodeType": "YulIf",
															"src": "2548:61:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:8"
															},
															"nodeType": "YulIf",
															"src": "2618:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:8",
														"type": ""
													}
												],
												"src": "2405:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2838:177:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2873:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2894:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2901:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2906:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2897:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2897:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2887:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2887:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2887:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2938:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2941:4:8",
																					"type": "",
																					"value": "0x11"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2931:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2931:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2931:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2966:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2969:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2959:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2959:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2959:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2854:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2861:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2857:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2857:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2851:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2851:13:8"
															},
															"nodeType": "YulIf",
															"src": "2848:136:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2993:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3004:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3007:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3000:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3000:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "2993:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2821:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2824:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2830:3:8",
														"type": ""
													}
												],
												"src": "2790:225:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3194:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3211:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3222:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3245:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3256:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3241:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3241:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3261:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3234:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3234:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3234:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3284:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3295:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3280:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3280:18:8"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3300:34:8",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3273:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3273:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3273:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3355:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3366:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3351:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3351:18:8"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3371:7:8",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3344:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3344:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3344:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3388:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3400:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3411:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3396:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3388:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3171:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3185:4:8",
														"type": ""
													}
												],
												"src": "3020:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3600:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3617:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3628:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3610:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3610:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3610:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3651:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3662:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3647:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3647:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3667:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3640:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3640:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3640:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3690:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3701:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3686:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3686:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3706:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3679:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3679:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3679:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3761:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3772:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3757:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3757:18:8"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3777:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3750:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3750:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3750:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3793:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3805:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3816:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3801:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3801:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3793:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3577:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3591:4:8",
														"type": ""
													}
												],
												"src": "3426:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4005:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4022:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4033:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4015:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4015:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4015:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4056:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4067:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4052:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4052:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4072:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4045:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4045:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4045:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4095:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4106:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4091:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4091:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4111:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4084:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4084:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4084:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4166:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4177:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4162:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4162:18:8"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4182:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4155:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4155:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4155:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4196:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4208:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4219:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4204:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4204:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4196:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3982:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3996:4:8",
														"type": ""
													}
												],
												"src": "3831:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4408:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4425:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4436:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4418:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4418:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4459:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4470:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4455:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4455:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4475:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4448:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4448:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4448:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4498:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4509:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4494:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4494:18:8"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4514:31:8",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4487:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4487:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4487:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4555:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4567:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4578:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4563:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4563:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4555:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4385:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4399:4:8",
														"type": ""
													}
												],
												"src": "4234:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4766:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4783:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4794:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4776:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4776:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4776:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4817:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4828:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4813:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4813:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4833:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4806:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4806:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4806:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4856:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4867:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4852:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4852:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4872:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4845:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4845:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4845:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4927:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4938:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4923:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4923:18:8"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "4943:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4916:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4916:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4916:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4960:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4972:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4983:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4968:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4968:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4960:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4743:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4757:4:8",
														"type": ""
													}
												],
												"src": "4592:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5172:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5189:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5200:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5182:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5182:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5182:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5223:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5234:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5219:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5219:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5239:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5212:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5212:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5212:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5262:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5273:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5258:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5258:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5278:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5251:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5251:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5251:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5333:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5344:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5329:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5329:18:8"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5349:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5322:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5322:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5322:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5364:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5376:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5387:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5372:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5372:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5364:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5149:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5163:4:8",
														"type": ""
													}
												],
												"src": "4998:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5576:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5593:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5604:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5586:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5586:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5586:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5627:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5638:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5623:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5623:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5643:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5616:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5616:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5616:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5666:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5677:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5662:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5662:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5682:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5655:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5655:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5655:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5737:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5748:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5733:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5733:18:8"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5753:8:8",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5726:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5726:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5726:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5771:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5783:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5794:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5779:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5779:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5771:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5553:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5567:4:8",
														"type": ""
													}
												],
												"src": "5402:402:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461012357806370a082311461013657806395d89b411461015f578063a457c2d714610167578063a9059cbb1461017a578063dd62ed3e1461018d57600080fd5b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100ef57806323b872dd14610101578063313ce56714610114575b600080fd5b6100b66101a0565b6040516100c391906106a1565b60405180910390f35b6100df6100da366004610712565b610232565b60405190151581526020016100c3565b6035545b6040519081526020016100c3565b6100df61010f36600461073c565b61024a565b604051601281526020016100c3565b6100df610131366004610712565b61026e565b6100f3610144366004610778565b6001600160a01b031660009081526033602052604090205490565b6100b6610290565b6100df610175366004610712565b61029f565b6100df610188366004610712565b61031f565b6100f361019b36600461079a565b61032d565b6060603680546101af906107cd565b80601f01602080910402602001604051908101604052809291908181526020018280546101db906107cd565b80156102285780601f106101fd57610100808354040283529160200191610228565b820191906000526020600020905b81548152906001019060200180831161020b57829003601f168201915b5050505050905090565b600033610240818585610358565b5060019392505050565b60003361025885828561047c565b6102638585856104f6565b506001949350505050565b600033610240818585610281838361032d565b61028b9190610807565b610358565b6060603780546101af906107cd565b600033816102ad828661032d565b9050838110156103125760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084015b60405180910390fd5b6102638286868403610358565b6000336102408185856104f6565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b0383166103ba5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610309565b6001600160a01b03821661041b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610309565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6000610488848461032d565b905060001981146104f057818110156104e35760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610309565b6104f08484848403610358565b50505050565b6001600160a01b03831661055a5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610309565b6001600160a01b0382166105bc5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610309565b6001600160a01b038316600090815260336020526040902054818110156106345760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610309565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906106949086815260200190565b60405180910390a36104f0565b600060208083528351808285015260005b818110156106ce578581018301518582016040015282016106b2565b818111156106e0576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b038116811461070d57600080fd5b919050565b6000806040838503121561072557600080fd5b61072e836106f6565b946020939093013593505050565b60008060006060848603121561075157600080fd5b61075a846106f6565b9250610768602085016106f6565b9150604084013590509250925092565b60006020828403121561078a57600080fd5b610793826106f6565b9392505050565b600080604083850312156107ad57600080fd5b6107b6836106f6565b91506107c4602084016106f6565b90509250929050565b600181811c908216806107e157607f821691505b60208210810361080157634e487b7160e01b600052602260045260246000fd5b50919050565b6000821982111561082857634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220d1e5dbebf398f6d3e3ce5c995d7d900c31a15693737d9c5ea5d95ccb7abf4d5764736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA9 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x39509351 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x123 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x136 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x15F JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x167 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x17A JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x18D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xAE JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xCC JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xEF JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x101 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x114 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB6 PUSH2 0x1A0 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xC3 SWAP2 SWAP1 PUSH2 0x6A1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xDF PUSH2 0xDA CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x232 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x10F CALLDATASIZE PUSH1 0x4 PUSH2 0x73C JUMP JUMPDEST PUSH2 0x24A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC3 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x131 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x26E JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x144 CALLDATASIZE PUSH1 0x4 PUSH2 0x778 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0xB6 PUSH2 0x290 JUMP JUMPDEST PUSH2 0xDF PUSH2 0x175 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x29F JUMP JUMPDEST PUSH2 0xDF PUSH2 0x188 CALLDATASIZE PUSH1 0x4 PUSH2 0x712 JUMP JUMPDEST PUSH2 0x31F JUMP JUMPDEST PUSH2 0xF3 PUSH2 0x19B CALLDATASIZE PUSH1 0x4 PUSH2 0x79A JUMP JUMPDEST PUSH2 0x32D JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1DB SWAP1 PUSH2 0x7CD JUMP JUMPDEST DUP1 ISZERO PUSH2 0x228 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1FD JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x228 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x20B JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x358 JUMP JUMPDEST POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x258 DUP6 DUP3 DUP6 PUSH2 0x47C JUMP JUMPDEST PUSH2 0x263 DUP6 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x281 DUP4 DUP4 PUSH2 0x32D JUMP JUMPDEST PUSH2 0x28B SWAP2 SWAP1 PUSH2 0x807 JUMP JUMPDEST PUSH2 0x358 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1AF SWAP1 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x2AD DUP3 DUP7 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x312 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x263 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x240 DUP2 DUP6 DUP6 PUSH2 0x4F6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x3BA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x41B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x488 DUP5 DUP5 PUSH2 0x32D JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x4F0 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x4E3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x309 JUMP JUMPDEST PUSH2 0x4F0 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x358 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x55A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5BC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x634 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x309 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x694 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x4F0 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x6CE JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x6B2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x6E0 JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x70D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x725 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x72E DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x751 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x75A DUP5 PUSH2 0x6F6 JUMP JUMPDEST SWAP3 POP PUSH2 0x768 PUSH1 0x20 DUP6 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x78A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x793 DUP3 PUSH2 0x6F6 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x7AD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x7B6 DUP4 PUSH2 0x6F6 JUMP JUMPDEST SWAP2 POP PUSH2 0x7C4 PUSH1 0x20 DUP5 ADD PUSH2 0x6F6 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x7E1 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x801 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x828 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD1 0xE5 0xDB 0xEB RETURN SWAP9 0xF6 0xD3 0xE3 0xCE 0x5C SWAP10 0x5D PUSH30 0x900C31A15693737D9C5EA5D95CCB7ABF4D5764736F6C634300080F003300 ",
							"sourceMap": "1515:12524:2:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2557:100;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4908:201;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:8;;1211:22;1193:41;;1181:2;1166:18;4908:201:2;1053:187:8;3677:108:2;3765:12;;3677:108;;;1391:25:8;;;1379:2;1364:18;3677:108:2;1245:177:8;5689:295:2;;;;;;:::i;:::-;;:::i;3519:93::-;;;3602:2;1902:36:8;;1890:2;1875:18;3519:93:2;1760:184:8;6393:238:2;;;;;;:::i;:::-;;:::i;3848:127::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3949:18:2;3922:7;3949:18;;;:9;:18;;;;;;;3848:127;2776:104;;;:::i;7134:436::-;;;;;;:::i;:::-;;:::i;4181:193::-;;;;;;:::i;:::-;;:::i;4437:151::-;;;;;;:::i;:::-;;:::i;2557:100::-;2611:13;2644:5;2637:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2557:100;:::o;4908:201::-;4991:4;952:10:6;5047:32:2;952:10:6;5063:7:2;5072:6;5047:8;:32::i;:::-;-1:-1:-1;5097:4:2;;4908:201;-1:-1:-1;;;4908:201:2:o;5689:295::-;5820:4;952:10:6;5878:38:2;5894:4;952:10:6;5909:6:2;5878:15;:38::i;:::-;5927:27;5937:4;5943:2;5947:6;5927:9;:27::i;:::-;-1:-1:-1;5972:4:2;;5689:295;-1:-1:-1;;;;5689:295:2:o;6393:238::-;6481:4;952:10:6;6537:64:2;952:10:6;6553:7:2;6590:10;6562:25;952:10:6;6553:7:2;6562:9;:25::i;:::-;:38;;;;:::i;:::-;6537:8;:64::i;2776:104::-;2832:13;2865:7;2858:14;;;;;:::i;7134:436::-;7227:4;952:10:6;7227:4:2;7310:25;952:10:6;7327:7:2;7310:9;:25::i;:::-;7283:52;;7374:15;7354:16;:35;;7346:85;;;;-1:-1:-1;;;7346:85:2;;3222:2:8;7346:85:2;;;3204:21:8;3261:2;3241:18;;;3234:30;3300:34;3280:18;;;3273:62;-1:-1:-1;;;3351:18:8;;;3344:35;3396:19;;7346:85:2;;;;;;;;;7467:60;7476:5;7483:7;7511:15;7492:16;:34;7467:8;:60::i;4181:193::-;4260:4;952:10:6;4316:28:2;952:10:6;4333:2:2;4337:6;4316:9;:28::i;4437:151::-;-1:-1:-1;;;;;4553:18:2;;;4526:7;4553:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4437:151::o;11161:380::-;-1:-1:-1;;;;;11297:19:2;;11289:68;;;;-1:-1:-1;;;11289:68:2;;3628:2:8;11289:68:2;;;3610:21:8;3667:2;3647:18;;;3640:30;3706:34;3686:18;;;3679:62;-1:-1:-1;;;3757:18:8;;;3750:34;3801:19;;11289:68:2;3426:400:8;11289:68:2;-1:-1:-1;;;;;11376:21:2;;11368:68;;;;-1:-1:-1;;;11368:68:2;;4033:2:8;11368:68:2;;;4015:21:8;4072:2;4052:18;;;4045:30;4111:34;4091:18;;;4084:62;-1:-1:-1;;;4162:18:8;;;4155:32;4204:19;;11368:68:2;3831:398:8;11368:68:2;-1:-1:-1;;;;;11449:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11501:32;;1391:25:8;;;11501:32:2;;1364:18:8;11501:32:2;;;;;;;11161:380;;;:::o;11832:453::-;11967:24;11994:25;12004:5;12011:7;11994:9;:25::i;:::-;11967:52;;-1:-1:-1;;12034:16:2;:37;12030:248;;12116:6;12096:16;:26;;12088:68;;;;-1:-1:-1;;;12088:68:2;;4436:2:8;12088:68:2;;;4418:21:8;4475:2;4455:18;;;4448:30;4514:31;4494:18;;;4487:59;4563:18;;12088:68:2;4234:353:8;12088:68:2;12200:51;12209:5;12216:7;12244:6;12225:16;:25;12200:8;:51::i;:::-;11956:329;11832:453;;;:::o;8040:840::-;-1:-1:-1;;;;;8171:18:2;;8163:68;;;;-1:-1:-1;;;8163:68:2;;4794:2:8;8163:68:2;;;4776:21:8;4833:2;4813:18;;;4806:30;4872:34;4852:18;;;4845:62;-1:-1:-1;;;4923:18:8;;;4916:35;4968:19;;8163:68:2;4592:401:8;8163:68:2;-1:-1:-1;;;;;8250:16:2;;8242:64;;;;-1:-1:-1;;;8242:64:2;;5200:2:8;8242:64:2;;;5182:21:8;5239:2;5219:18;;;5212:30;5278:34;5258:18;;;5251:62;-1:-1:-1;;;5329:18:8;;;5322:33;5372:19;;8242:64:2;4998:399:8;8242:64:2;-1:-1:-1;;;;;8392:15:2;;8370:19;8392:15;;;:9;:15;;;;;;8426:21;;;;8418:72;;;;-1:-1:-1;;;8418:72:2;;5604:2:8;8418:72:2;;;5586:21:8;5643:2;5623:18;;;5616:30;5682:34;5662:18;;;5655:62;-1:-1:-1;;;5733:18:8;;;5726:36;5779:19;;8418:72:2;5402:402:8;8418:72:2;-1:-1:-1;;;;;8526:15:2;;;;;;;:9;:15;;;;;;8544:20;;;8526:38;;8744:13;;;;;;;;;;:23;;;;;;8796:26;;;;;;8558:6;1391:25:8;;1379:2;1364:18;;1245:177;8796:26:2;;;;;;;;8835:37;12885:125;14:597:8;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:8;574:15;-1:-1:-1;;570:29:8;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:8:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:8;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:8:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:8:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:225::-;2830:3;2861:1;2857:6;2854:1;2851:13;2848:136;;;2906:10;2901:3;2897:20;2894:1;2887:31;2941:4;2938:1;2931:15;2969:4;2966:1;2959:15;2848:136;-1:-1:-1;3000:9:8;;2790:225::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "429400",
								"executionCost": "468",
								"totalCost": "429868"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24624",
								"balanceOf(address)": "2559",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "26978",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51143",
								"transferFrom(address,address,uint256)": "infinite"
							},
							"internal": {
								"__ERC20_init(string memory,string memory)": "infinite",
								"__ERC20_init_unchained(string memory,string memory)": "infinite",
								"_afterTokenTransfer(address,address,uint256)": "infinite",
								"_approve(address,address,uint256)": "infinite",
								"_beforeTokenTransfer(address,address,uint256)": "infinite",
								"_burn(address,uint256)": "infinite",
								"_mint(address,uint256)": "infinite",
								"_spendAllowance(address,address,uint256)": "infinite",
								"_transfer(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH",
									"source": 2,
									"value": "80"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH",
									"source": 2,
									"value": "40"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "MSTORE",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "CALLVALUE",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "ISZERO",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH [tag]",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "JUMPI",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "REVERT",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "tag",
									"source": 2,
									"value": "1"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "JUMPDEST",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "POP",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH #[$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "DUP1",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH [$]",
									"source": 2,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "CODECOPY",
									"source": 2
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "PUSH",
									"source": 2,
									"value": "0"
								},
								{
									"begin": 1515,
									"end": 14039,
									"name": "RETURN",
									"source": 2
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d1e5dbebf398f6d3e3ce5c995d7d900c31a15693737d9c5ea5d95ccb7abf4d5764736f6c634300080f0033",
									".code": [
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "CALLVALUE",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "tag",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "CALLDATALOAD",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "E0"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "SHR",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "39509351"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "70A08231"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "95D89B41"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "A457C2D7"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "A9059CBB"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "DD62ED3E"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "6FDDE03"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "95EA7B3"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "18160DDD"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "23B872DD"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "313CE567"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "tag",
											"source": 2,
											"value": "2"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 1515,
											"end": 14039,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2557,
											"end": 2657,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2557,
											"end": 2657,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4908,
											"end": 5109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4908,
											"end": 5109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "tag",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5689,
											"end": 5984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "tag",
											"source": 2,
											"value": "30"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5689,
											"end": 5984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3602,
											"end": 3604,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 6393,
											"end": 6631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "tag",
											"source": 2,
											"value": "39"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6393,
											"end": 6631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3848,
											"end": 3975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "tag",
											"source": 2,
											"value": "43"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3922,
											"end": 3929,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3958,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "tag",
											"source": 2,
											"value": "10"
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "15"
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2776,
											"end": 2880,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 7134,
											"end": 7570,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 7134,
											"end": 7570,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4181,
											"end": 4374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 4181,
											"end": 4374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "25"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 4437,
											"end": 4588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4437,
											"end": 4588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2611,
											"end": 2624,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2644,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2637,
											"end": 2649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2637,
											"end": 2649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "66"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "67"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4991,
											"end": 4995,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5047,
											"end": 5079,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5063,
											"end": 5070,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5072,
											"end": 5078,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 5047,
											"end": 5079,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5079,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 5047,
											"end": 5079,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5097,
											"end": 5101,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5097,
											"end": 5101,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4908,
											"end": 5109,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "tag",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5820,
											"end": 5824,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5878,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5894,
											"end": 5898,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5915,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5878,
											"end": 5893,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 5878,
											"end": 5916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5878,
											"end": 5916,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5878,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5927,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5937,
											"end": 5941,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5943,
											"end": 5945,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5947,
											"end": 5953,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5927,
											"end": 5936,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 5927,
											"end": 5954,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5927,
											"end": 5954,
											"name": "tag",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 5927,
											"end": 5954,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5972,
											"end": 5976,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5972,
											"end": 5976,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5689,
											"end": 5984,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6481,
											"end": 6485,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6537,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6553,
											"end": 6560,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6590,
											"end": 6600,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6553,
											"end": 6560,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6571,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 6562,
											"end": 6587,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6587,
											"name": "tag",
											"source": 2,
											"value": "86"
										},
										{
											"begin": 6562,
											"end": 6587,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "88"
										},
										{
											"begin": 6562,
											"end": 6600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "tag",
											"source": 2,
											"value": "87"
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6537,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 6537,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "tag",
											"source": 2,
											"value": "48"
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2832,
											"end": 2845,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2865,
											"end": 2872,
											"name": "PUSH",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "65"
										},
										{
											"begin": 2858,
											"end": 2872,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "tag",
											"source": 2,
											"value": "52"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7227,
											"end": 7231,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7227,
											"end": 7231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7310,
											"end": 7335,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7327,
											"end": 7334,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7310,
											"end": 7319,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 7310,
											"end": 7335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7310,
											"end": 7335,
											"name": "tag",
											"source": 2,
											"value": "98"
										},
										{
											"begin": 7310,
											"end": 7335,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7283,
											"end": 7335,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7283,
											"end": 7335,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7374,
											"end": 7389,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7354,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7354,
											"end": 7389,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7354,
											"end": 7389,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3222,
											"end": 3224,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3204,
											"end": 3225,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3261,
											"end": 3263,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3241,
											"end": 3259,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3234,
											"end": 3264,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3300,
											"end": 3334,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3280,
											"end": 3298,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3273,
											"end": 3335,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3351,
											"end": 3369,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3344,
											"end": 3379,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3396,
											"end": 3415,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "tag",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "REVERT",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "tag",
											"source": 2,
											"value": "99"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "80"
										},
										{
											"begin": 7476,
											"end": 7481,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7483,
											"end": 7490,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7511,
											"end": 7526,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7492,
											"end": 7508,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7492,
											"end": 7526,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7475,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 7467,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "tag",
											"source": 2,
											"value": "56"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4260,
											"end": 4264,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4316,
											"end": 4344,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4333,
											"end": 4335,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4337,
											"end": 4343,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4316,
											"end": 4325,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 4316,
											"end": 4344,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "tag",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4526,
											"end": 4533,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4564,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11297,
											"end": 11316,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11297,
											"end": 11316,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3628,
											"end": 3630,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 3610,
											"end": 3631,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3667,
											"end": 3669,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3647,
											"end": 3665,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3640,
											"end": 3670,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3706,
											"end": 3740,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3686,
											"end": 3704,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3679,
											"end": 3741,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3757,
											"end": 3775,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3750,
											"end": 3784,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3801,
											"end": 3820,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3426,
											"end": 3826,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "tag",
											"source": 2,
											"value": "109"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11376,
											"end": 11397,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11376,
											"end": 11397,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4033,
											"end": 4035,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4015,
											"end": 4036,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4072,
											"end": 4074,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4052,
											"end": 4070,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4045,
											"end": 4075,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4111,
											"end": 4145,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4091,
											"end": 4109,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4084,
											"end": 4146,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4162,
											"end": 4180,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4155,
											"end": 4187,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4204,
											"end": 4223,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 3831,
											"end": 4229,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11460,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11485,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11485,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11485,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "tag",
											"source": 2,
											"value": "79"
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11967,
											"end": 11991,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11994,
											"end": 12019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 12004,
											"end": 12009,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12011,
											"end": 12018,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11994,
											"end": 12003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "61"
										},
										{
											"begin": 11994,
											"end": 12019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11994,
											"end": 12019,
											"name": "tag",
											"source": 2,
											"value": "117"
										},
										{
											"begin": 11994,
											"end": 12019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11967,
											"end": 12019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11967,
											"end": 12019,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12034,
											"end": 12050,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12034,
											"end": 12071,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 12030,
											"end": 12278,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 12030,
											"end": 12278,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12116,
											"end": 12122,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12096,
											"end": 12112,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12096,
											"end": 12122,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12096,
											"end": 12122,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4436,
											"end": 4438,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4418,
											"end": 4439,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4475,
											"end": 4477,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4455,
											"end": 4473,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4448,
											"end": 4478,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4514,
											"end": 4545,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4494,
											"end": 4512,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4487,
											"end": 4546,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4563,
											"end": 4581,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4234,
											"end": 4587,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "tag",
											"source": 2,
											"value": "119"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12200,
											"end": 12251,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 12209,
											"end": 12214,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12216,
											"end": 12223,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12244,
											"end": 12250,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12225,
											"end": 12241,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12225,
											"end": 12250,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12200,
											"end": 12208,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 12200,
											"end": 12251,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12200,
											"end": 12251,
											"name": "tag",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 12200,
											"end": 12251,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11956,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8040,
											"end": 8880,
											"name": "tag",
											"source": 2,
											"value": "81"
										},
										{
											"begin": 8040,
											"end": 8880,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8171,
											"end": 8189,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8171,
											"end": 8189,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4794,
											"end": 4796,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 4776,
											"end": 4797,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4833,
											"end": 4835,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4813,
											"end": 4831,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4806,
											"end": 4836,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4872,
											"end": 4906,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4852,
											"end": 4870,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4845,
											"end": 4907,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4923,
											"end": 4941,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4916,
											"end": 4951,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 4968,
											"end": 4987,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4592,
											"end": 4993,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8250,
											"end": 8266,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8250,
											"end": 8266,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5200,
											"end": 5202,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5182,
											"end": 5203,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5239,
											"end": 5241,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5219,
											"end": 5237,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5212,
											"end": 5242,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5278,
											"end": 5312,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5258,
											"end": 5276,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5251,
											"end": 5313,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5329,
											"end": 5347,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5322,
											"end": 5355,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5372,
											"end": 5391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 4998,
											"end": 5397,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "tag",
											"source": 2,
											"value": "127"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8370,
											"end": 8389,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8401,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5604,
											"end": 5606,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5586,
											"end": 5607,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5643,
											"end": 5645,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5623,
											"end": 5641,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5616,
											"end": 5646,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5682,
											"end": 5716,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5662,
											"end": 5680,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5655,
											"end": 5717,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5733,
											"end": 5751,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5726,
											"end": 5762,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5779,
											"end": 5798,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5402,
											"end": 5804,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "tag",
											"source": 2,
											"value": "132"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8535,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8544,
											"end": 8564,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8544,
											"end": 8564,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8544,
											"end": 8564,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8564,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8564,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8564,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "tag",
											"source": 2,
											"value": "135"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8835,
											"end": 8872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "122"
										},
										{
											"begin": 12885,
											"end": 13010,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 8,
											"value": "18"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "143"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "145"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 8,
											"value": "146"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 8,
											"value": "148"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 8,
											"value": "21"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 8,
											"value": "150"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 962,
											"end": 991,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 8,
											"value": "151"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 8,
											"value": "31"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 8,
											"value": "155"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 1612,
											"end": 1641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 8,
											"value": "156"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 1660,
											"end": 1698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 8,
											"value": "157"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 8,
											"value": "160"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 2100,
											"end": 2129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 8,
											"value": "161"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 8,
											"value": "163"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 2308,
											"end": 2337,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 8,
											"value": "164"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "140"
										},
										{
											"begin": 2356,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 8,
											"value": "165"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 8,
											"value": "65"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 8,
											"value": "167"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "tag",
											"source": 8,
											"value": "88"
										},
										{
											"begin": 2790,
											"end": 3015,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2830,
											"end": 2833,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2861,
											"end": 2862,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2857,
											"end": 2863,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 2854,
											"end": 2855,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2851,
											"end": 2864,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2906,
											"end": 2916,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2901,
											"end": 2904,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2897,
											"end": 2917,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2894,
											"end": 2895,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2887,
											"end": 2918,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2941,
											"end": 2945,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 2938,
											"end": 2939,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2931,
											"end": 2946,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2969,
											"end": 2973,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2966,
											"end": 2967,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2959,
											"end": 2974,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "tag",
											"source": 8,
											"value": "170"
										},
										{
											"begin": 2848,
											"end": 2984,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3000,
											"end": 3009,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2790,
											"end": 3015,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol",
								"upgradeable/ERC20Updateable.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC20} interface. This implementation is agnostic to the way tokens are created. This means that a supply mechanism has to be added in a derived contract using {_mint}. For a generic mechanism see {ERC20PresetMinterPauser}. TIP: For a detailed writeup see our guide https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How to implement supply mechanisms]. We have followed general OpenZeppelin Contracts guidelines: functions revert instead returning `false` on failure. This behavior is nonetheless conventional and does not conflict with the expectations of ERC20 applications. Additionally, an {Approval} event is emitted on calls to {transferFrom}. This allows applications to reconstruct the allowance for all accounts just by listening to said events. Other implementations of the EIP may not emit these events, as it isn't required by the specification. Finally, the non-standard {decreaseAllowance} and {increaseAllowance} functions have been added to mitigate the well-known issues around setting allowances. See {IERC20-approve}.\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":\"ERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89d3edacd07d0f2df80f91f2b8bc0a53a638561ead828670441333d6915671bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://653fb27aa67cf93b556d0664125719c16cb2a2852f5307b90f6f7ea9ac6d9196\",\"dweb:/ipfs/QmWS7gFdrmrGsUA4pHqtQFn5uAvWiiUxoao1W2HrFAmAj8\"]},\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x1d80b4eeb5e280428128cb596c2fe266a305be12afe34e04f8f1841e3a45f677\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f23c96b26adbc4a00e928fcb667a9169e6a5a642912ce8b216e758bfedb6723\",\"dweb:/ipfs/Qmb9Ky4Lz4bpqsEMDeduZF16zdueDDJGDXtpyUHc3gy6mV\"]},\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f3d128cf6b67b0496353c536b227fb2c698c21ec86f3454a41ba50a63908bed\",\"dweb:/ipfs/QmdAdMnJuqiXc4ccwBdq2wh7gg2rF8X4TrdZcZvc9GADGm\"]},\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x56492cd2e84fdbc5f39c722ebdbf4ec02a262ac026fdc40f2ad2eb0cda0c76b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b52b56a3db157dd2135a0520396282640b14d442327041355de80cb218ce8552\",\"dweb:/ipfs/QmQ7pDQ66ZDhvZTnGBfJLVMBRhzu7CWz4cPDZkUe8WLYea\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x53849a4d64d7b6a25a4f8cea2a16ccded9d5cf57e21d8d2ce24d40b0c2a71863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://00f801f58c90aa307a563c301e895f371c1e1e8ef0e8645d9601a449a1e2752c\",\"dweb:/ipfs/QmUtMkLnPxyoSx8bRiJdUwVGfxDacaHphp4UEcSKMWgY5b\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1baa3e4dd802cf1e2ed3634f79f3b1f86397f1bcb819f55811da1a9bf6a6189c\",\"dweb:/ipfs/QmPmiK9Tj3P7fhnroK2REuendr4sjx4vjev7PRQJyxMob5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1322,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 301,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 307,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 309,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 311,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 313,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 893,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:ERC20Upgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"IERC20Upgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC20 standard as defined in the EIP.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":\"IERC20Upgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f3d128cf6b67b0496353c536b227fb2c698c21ec86f3454a41ba50a63908bed\",\"dweb:/ipfs/QmdAdMnJuqiXc4ccwBdq2wh7gg2rF8X4TrdZcZvc9GADGm\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"IERC20MetadataUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._",
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the amount of tokens owned by `account`."
							},
							"decimals()": {
								"details": "Returns the decimals places of the token."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token."
							},
							"totalSupply()": {
								"details": "Returns the amount of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for the optional metadata functions from the ERC20 standard. _Available since v4.1._\",\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"decimals()\":{\"details\":\"Returns the decimals places of the token.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":\"IERC20MetadataUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f3d128cf6b67b0496353c536b227fb2c698c21ec86f3454a41ba50a63908bed\",\"dweb:/ipfs/QmdAdMnJuqiXc4ccwBdq2wh7gg2rF8X4TrdZcZvc9GADGm\"]},\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x56492cd2e84fdbc5f39c722ebdbf4ec02a262ac026fdc40f2ad2eb0cda0c76b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b52b56a3db157dd2135a0520396282640b14d442327041355de80cb218ce8552\",\"dweb:/ipfs/QmQ7pDQ66ZDhvZTnGBfJLVMBRhzu7CWz4cPDZkUe8WLYea\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"AddressUpgradeable": {
					"abi": [],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":202:8499  library AddressUpgradeable {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":202:8499  library AddressUpgradeable {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa2646970667358221220a11aa10a9d31223c82ee103d4c875aee2878f10a2a686902585568975c602b4464736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a11aa10a9d31223c82ee103d4c875aee2878f10a2a686902585568975c602b4464736f6c634300080f0033",
							"opcodes": "PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 BYTE LOG1 EXP SWAP14 BALANCE 0x22 EXTCODECOPY DUP3 0xEE LT RETURNDATASIZE 0x4C DUP8 GAS 0xEE 0x28 PUSH25 0xF10A2A686902585568975C602B4464736F6C634300080F0033 ",
							"sourceMap": "202:8297:5:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:8297:5;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a11aa10a9d31223c82ee103d4c875aee2878f10a2a686902585568975c602b4464736f6c634300080f0033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG1 BYTE LOG1 EXP SWAP14 BALANCE 0x22 EXTCODECOPY DUP3 0xEE LT RETURNDATASIZE 0x4C DUP8 GAS 0xEE 0x28 PUSH25 0xF10A2A686902585568975C602B4464736F6C634300080F0033 ",
							"sourceMap": "202:8297:5:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17200",
								"executionCost": "103",
								"totalCost": "17303"
							},
							"internal": {
								"_revert(bytes memory,string memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCall(address,bytes memory,string memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256,string memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory,string memory)": "infinite",
								"isContract(address)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory,string memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory,string memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "B"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "MLOAD",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "BYTE",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "EQ",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "4"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "24"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "ADDRESS",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "PUSH",
									"source": 5,
									"value": "73"
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "MSTORE8",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "DUP3",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "DUP2",
									"source": 5
								},
								{
									"begin": 202,
									"end": 8499,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220a11aa10a9d31223c82ee103d4c875aee2878f10a2a686902585568975c602b4464736f6c634300080f0033",
									".code": [
										{
											"begin": 202,
											"end": 8499,
											"name": "PUSHDEPLOYADDRESS",
											"source": 5
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "ADDRESS",
											"source": 5
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "EQ",
											"source": 5
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 202,
											"end": 8499,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol",
								"upgradeable/ERC20Updateable.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x53849a4d64d7b6a25a4f8cea2a16ccded9d5cf57e21d8d2ce24d40b0c2a71863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://00f801f58c90aa307a563c301e895f371c1e1e8ef0e8645d9601a449a1e2752c\",\"dweb:/ipfs/QmUtMkLnPxyoSx8bRiJdUwVGfxDacaHphp4UEcSKMWgY5b\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89d3edacd07d0f2df80f91f2b8bc0a53a638561ead828670441333d6915671bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://653fb27aa67cf93b556d0664125719c16cb2a2852f5307b90f6f7ea9ac6d9196\",\"dweb:/ipfs/QmWS7gFdrmrGsUA4pHqtQFn5uAvWiiUxoao1W2HrFAmAj8\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x53849a4d64d7b6a25a4f8cea2a16ccded9d5cf57e21d8d2ce24d40b0c2a71863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://00f801f58c90aa307a563c301e895f371c1e1e8ef0e8645d9601a449a1e2752c\",\"dweb:/ipfs/QmUtMkLnPxyoSx8bRiJdUwVGfxDacaHphp4UEcSKMWgY5b\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1baa3e4dd802cf1e2ed3634f79f3b1f86397f1bcb819f55811da1a9bf6a6189c\",\"dweb:/ipfs/QmPmiK9Tj3P7fhnroK2REuendr4sjx4vjev7PRQJyxMob5\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1322,
								"contract": "node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol:ContextUpgradeable",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							}
						],
						"types": {
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"upgradeable/ERC20Updateable.sol": {
				"MyTokenV1": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint8",
									"name": "version",
									"type": "uint8"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "decimals",
							"outputs": [
								{
									"internalType": "uint8",
									"name": "",
									"type": "uint8"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "subtractedValue",
									"type": "uint256"
								}
							],
							"name": "decreaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "addedValue",
									"type": "uint256"
								}
							],
							"name": "increaseAllowance",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "initialize",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "See {IERC20-allowance}."
							},
							"approve(address,uint256)": {
								"details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
							},
							"balanceOf(address)": {
								"details": "See {IERC20-balanceOf}."
							},
							"constructor": {
								"custom:oz-upgrades-unsafe-allow": "constructor"
							},
							"decimals()": {
								"details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
							},
							"decreaseAllowance(address,uint256)": {
								"details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
							},
							"increaseAllowance(address,uint256)": {
								"details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
							},
							"name()": {
								"details": "Returns the name of the token."
							},
							"symbol()": {
								"details": "Returns the symbol of the token, usually a shorter version of the name."
							},
							"totalSupply()": {
								"details": "See {IERC20-totalSupply}."
							},
							"transfer(address,uint256)": {
								"details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"upgradeable/ERC20Updateable.sol\":374:669  contract MyTokenV1 is Initializable, ERC20Upgradeable {... */\n  mstore(0x40, 0x80)\n    /* \"upgradeable/ERC20Updateable.sol\":638:666  constructor() initializer {} */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3189:3208  bool isTopLevelCall */\n  0x00\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3212:3225  _initializing */\n  sload\n  0x0100\n  swap1\n  div\n  0xff\n  and\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3211:3225  !_initializing */\n  iszero\n  dup1\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3259:3293  isTopLevelCall && _initialized < 1 */\n  dup1\n  iszero\n  tag_4\n  jumpi\n  pop\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3277:3289  _initialized */\n  sload(0x00)\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3292:3293  1 */\n  0x01\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3277:3289  _initialized */\n  0xff\n  swap1\n  swap2\n  and\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3277:3293  _initialized < 1 */\n  lt\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3259:3293  isTopLevelCall && _initialized < 1 */\ntag_4:\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3258:3366  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n  dup1\n  tag_8\n  jumpi\n  pop\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3300:3344  AddressUpgradeable.isContract(address(this)) */\n  tag_6\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3338:3342  this */\n  address\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3300:3329  AddressUpgradeable.isContract */\n  or(tag_0_66, shl(0x20, tag_7))\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3300:3344  AddressUpgradeable.isContract(address(this)) */\n  0x20\n  shr\n  jump\t// in\ntag_6:\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3299:3344  !AddressUpgradeable.isContract(address(this)) */\n  iszero\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3299:3365  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n  dup1\n  iszero\n  tag_8\n  jumpi\n  pop\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3348:3360  _initialized */\n  and(0xff, sload(0x00))\n  0x01\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3348:3365  _initialized == 1 */\n  eq\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3299:3365  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\ntag_8:\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3236:3440  require(... */\n  tag_9\n  jumpi\n  mload(0x40)\n  shl(0xe5, 0x461bcd)\n  dup2\n  mstore\n    /* \"#utility.yul\":216:218   */\n  0x20\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3236:3440  require(... */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":198:219   */\n  mstore\n    /* \"#utility.yul\":255:257   */\n  0x2e\n    /* \"#utility.yul\":235:253   */\n  0x24\n  dup3\n  add\n    /* \"#utility.yul\":228:258   */\n  mstore\n    /* \"#utility.yul\":294:328   */\n  0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n    /* \"#utility.yul\":274:292   */\n  0x44\n  dup3\n  add\n    /* \"#utility.yul\":267:329   */\n  mstore\n  shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n    /* \"#utility.yul\":345:363   */\n  0x64\n  dup3\n  add\n    /* \"#utility.yul\":338:382   */\n  mstore\n    /* \"#utility.yul\":399:418   */\n  0x84\n  add\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3236:3440  require(... */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\ntag_9:\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3451:3463  _initialized */\n  0x00\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3451:3467  _initialized = 1 */\n  dup1\n  sload\n  not(0xff)\n  and\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3466:3467  1 */\n  0x01\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3451:3467  _initialized = 1 */\n  or\n  swap1\n  sstore\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3478:3545  if (isTopLevelCall) {... */\n  dup1\n  iszero\n  tag_12\n  jumpi\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3513:3526  _initializing */\n  0x00\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3513:3533  _initializing = true */\n  dup1\n  sload\n  not(0xff00)\n  and\n  0x0100\n  or\n  swap1\n  sstore\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3478:3545  if (isTopLevelCall) {... */\ntag_12:\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3571:3585  isTopLevelCall */\n  dup1\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3567:3669  if (isTopLevelCall) {... */\n  iszero\n  tag_14\n  jumpi\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3618:3623  false */\n  0x00\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3602:3623  _initializing = false */\n  dup1\n  sload\n  not(0xff00)\n  and\n  swap1\n  sstore\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3643:3657  Initialized(1) */\n  mload(0x40)\n  0x01\n    /* \"#utility.yul\":581:617   */\n  dup2\n  mstore\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3643:3657  Initialized(1) */\n  0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n  swap1\n    /* \"#utility.yul\":569:571   */\n  0x20\n    /* \"#utility.yul\":554:572   */\n  add\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3643:3657  Initialized(1) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  log1\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3567:3669  if (isTopLevelCall) {... */\ntag_14:\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3178:3676  {... */\n  pop\n    /* \"upgradeable/ERC20Updateable.sol\":374:669  contract MyTokenV1 is Initializable, ERC20Upgradeable {... */\n  jump(tag_19)\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1221:1547  function isContract(address account) internal view returns (bool) {... */\ntag_7:\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1516:1535  account.code.length */\n  and\n  extcodesize\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1516:1539  account.code.length > 0 */\n  iszero\n  iszero\n  swap1\n    /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1221:1547  function isContract(address account) internal view returns (bool) {... */\n  jump\t// out\n    /* \"#utility.yul\":429:623   */\ntag_19:\n    /* \"upgradeable/ERC20Updateable.sol\":374:669  contract MyTokenV1 is Initializable, ERC20Upgradeable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"upgradeable/ERC20Updateable.sol\":374:669  contract MyTokenV1 is Initializable, ERC20Upgradeable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x70a08231\n      gt\n      tag_15\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x8129fc1c\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_11\n      jumpi\n      dup1\n      0xa457c2d7\n      eq\n      tag_12\n      jumpi\n      dup1\n      0xa9059cbb\n      eq\n      tag_13\n      jumpi\n      dup1\n      0xdd62ed3e\n      eq\n      tag_14\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_15:\n      dup1\n      0x06fdde03\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x18160ddd\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x313ce567\n      eq\n      tag_7\n      jumpi\n      dup1\n      0x39509351\n      eq\n      tag_8\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2557:2657  function name() public view virtual override returns (string memory) {... */\n    tag_3:\n      tag_16\n      tag_17\n      jump\t// in\n    tag_16:\n      mload(0x40)\n      tag_18\n      swap2\n      swap1\n      tag_19\n      jump\t// in\n    tag_18:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_4:\n      tag_20\n      tag_21\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_21:\n      tag_23\n      jump\t// in\n    tag_20:\n      mload(0x40)\n        /* \"#utility.yul\":1218:1232   */\n      swap1\n      iszero\n        /* \"#utility.yul\":1211:1233   */\n      iszero\n        /* \"#utility.yul\":1193:1234   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1181:1183   */\n      0x20\n        /* \"#utility.yul\":1166:1184   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n      tag_18\n        /* \"#utility.yul\":1053:1240   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3677:3785  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_5:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3765:3777  _totalSupply */\n      sload(0x35)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3677:3785  function totalSupply() public view virtual override returns (uint256) {... */\n    tag_26:\n      mload(0x40)\n        /* \"#utility.yul\":1391:1416   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3677:3785  function totalSupply() public view virtual override returns (uint256) {... */\n      tag_18\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5689:5984  function transferFrom(... */\n    tag_6:\n      tag_20\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3519:3612  function decimals() public view virtual override returns (uint8) {... */\n    tag_7:\n      mload(0x40)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3602:3604  18 */\n      0x12\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3519:3612  function decimals() public view virtual override returns (uint8) {... */\n      tag_18\n        /* \"#utility.yul\":1760:1944   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6393:6631  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_8:\n      tag_20\n      tag_40\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_40:\n      tag_41\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3848:3975  function balanceOf(address account) public view virtual override returns (uint256) {... */\n    tag_9:\n      tag_26\n      tag_44\n      calldatasize\n      0x04\n      tag_45\n      jump\t// in\n    tag_44:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3967  _balances[account] */\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3922:3929  uint256 */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3967  _balances[account] */\n      swap1\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3958  _balances */\n      0x33\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3949:3967  _balances[account] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3848:3975  function balanceOf(address account) public view virtual override returns (uint256) {... */\n      jump\n        /* \"upgradeable/ERC20Updateable.sol\":435:576  function initialize() initializer public {... */\n    tag_10:\n      tag_48\n      tag_49\n      jump\t// in\n    tag_48:\n      stop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2776:2880  function symbol() public view virtual override returns (string memory) {... */\n    tag_11:\n      tag_16\n      tag_51\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7134:7570  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_12:\n      tag_20\n      tag_54\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4181:4374  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_13:\n      tag_20\n      tag_58\n      calldatasize\n      0x04\n      tag_22\n      jump\t// in\n    tag_58:\n      tag_59\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4437:4588  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_14:\n      tag_26\n      tag_62\n      calldatasize\n      0x04\n      tag_63\n      jump\t// in\n    tag_62:\n      tag_64\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2557:2657  function name() public view virtual override returns (string memory) {... */\n    tag_17:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2611:2624  string memory */\n      0x60\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2644:2649  _name */\n      0x36\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2637:2649  return _name */\n      dup1\n      sload\n      tag_68\n      swap1\n      tag_69\n      jump\t// in\n    tag_68:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_70\n      swap1\n      tag_69\n      jump\t// in\n    tag_70:\n      dup1\n      iszero\n      tag_71\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_72\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_71)\n    tag_72:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_73:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_73\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_71:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2557:2657  function name() public view virtual override returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_23:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4991:4995  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5047:5079  _approve(owner, spender, amount) */\n      tag_77\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5063:5070  spender */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5072:5078  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5047:5055  _approve */\n      tag_78\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5047:5079  _approve(owner, spender, amount) */\n      jump\t// in\n    tag_77:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5097:5101  true */\n      0x01\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5090:5101  return true */\n      swap2\n      pop\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4908:5109  function approve(address spender, uint256 amount) public virtual override returns (bool) {... */\n    tag_74:\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5689:5984  function transferFrom(... */\n    tag_33:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5820:5824  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5878:5916  _spendAllowance(from, spender, amount) */\n      tag_82\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5894:5898  from */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5909:5915  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5878:5893  _spendAllowance */\n      tag_83\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5878:5916  _spendAllowance(from, spender, amount) */\n      jump\t// in\n    tag_82:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5927:5954  _transfer(from, to, amount) */\n      tag_84\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5937:5941  from */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5943:5945  to */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5947:5953  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5927:5936  _transfer */\n      tag_85\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5927:5954  _transfer(from, to, amount) */\n      jump\t// in\n    tag_84:\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5972:5976  true */\n      0x01\n      swap5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":5689:5984  function transferFrom(... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6393:6631  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {... */\n    tag_41:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6481:6485  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6537:6601  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      tag_77\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6553:6560  spender */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6590:6600  addedValue */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6587  allowance(owner, spender) */\n      tag_90\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6553:6560  spender */\n      dup4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6571  allowance */\n      tag_64\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6587  allowance(owner, spender) */\n      jump\t// in\n    tag_90:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6562:6600  allowance(owner, spender) + addedValue */\n      tag_91\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_91:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6537:6545  _approve */\n      tag_78\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":6537:6601  _approve(owner, spender, allowance(owner, spender) + addedValue) */\n      jump\t// in\n        /* \"upgradeable/ERC20Updateable.sol\":435:576  function initialize() initializer public {... */\n    tag_49:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3189:3208  bool isTopLevelCall */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3212:3225  _initializing */\n      sload\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3211:3225  !_initializing */\n      iszero\n      dup1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3259:3293  isTopLevelCall && _initialized < 1 */\n      dup1\n      iszero\n      tag_95\n      jumpi\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3277:3289  _initialized */\n      sload(0x00)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3292:3293  1 */\n      0x01\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3277:3289  _initialized */\n      0xff\n      swap1\n      swap2\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3277:3293  _initialized < 1 */\n      lt\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3259:3293  isTopLevelCall && _initialized < 1 */\n    tag_95:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3258:3366  (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1) */\n      dup1\n      tag_98\n      jumpi\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3338:3342  this */\n      address\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1516:1535  account.code.length */\n      extcodesize\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1516:1539  account.code.length > 0 */\n      iszero\n      dup1\n      iszero\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3299:3365  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n      tag_98\n      jumpi\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3348:3360  _initialized */\n      and(0xff, sload(0x00))\n      0x01\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3348:3365  _initialized == 1 */\n      eq\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3299:3365  !AddressUpgradeable.isContract(address(this)) && _initialized == 1 */\n    tag_98:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3236:3440  require(... */\n      tag_99\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":3257:3259   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3236:3440  require(... */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":3239:3260   */\n      mstore\n        /* \"#utility.yul\":3296:3298   */\n      0x2e\n        /* \"#utility.yul\":3276:3294   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":3269:3299   */\n      mstore\n        /* \"#utility.yul\":3335:3369   */\n      0x496e697469616c697a61626c653a20636f6e747261637420697320616c726561\n        /* \"#utility.yul\":3315:3333   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":3308:3370   */\n      mstore\n      shl(0x92, 0x191e481a5b9a5d1a585b1a5e9959)\n        /* \"#utility.yul\":3386:3404   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":3379:3423   */\n      mstore\n        /* \"#utility.yul\":3440:3459   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3236:3440  require(... */\n    tag_100:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_99:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3451:3463  _initialized */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3451:3467  _initialized = 1 */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3466:3467  1 */\n      0x01\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3451:3467  _initialized = 1 */\n      or\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3478:3545  if (isTopLevelCall) {... */\n      dup1\n      iszero\n      tag_102\n      jumpi\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3513:3526  _initializing */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3513:3533  _initializing = true */\n      dup1\n      sload\n      not(0xff00)\n      and\n      0x0100\n      or\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3478:3545  if (isTopLevelCall) {... */\n    tag_102:\n        /* \"upgradeable/ERC20Updateable.sol\":485:515  __ERC20_init(\"MyToken\", \"MTK\") */\n      tag_104\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x07\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xc9, 0x26bcaa37b5b2b7)\n      dup2\n      mstore\n      pop\n      mload(0x40)\n      dup1\n      0x40\n      add\n      0x40\n      mstore\n      dup1\n      0x03\n      dup2\n      mstore\n      0x20\n      add\n      shl(0xe8, 0x4d544b)\n      dup2\n      mstore\n      pop\n        /* \"upgradeable/ERC20Updateable.sol\":485:497  __ERC20_init */\n      tag_105\n        /* \"upgradeable/ERC20Updateable.sol\":485:515  __ERC20_init(\"MyToken\", \"MTK\") */\n      jump\t// in\n    tag_104:\n        /* \"upgradeable/ERC20Updateable.sol\":526:568  _mint(msg.sender, 1000 * 10 ** decimals()) */\n      tag_106\n        /* \"upgradeable/ERC20Updateable.sol\":532:542  msg.sender */\n      caller\n        /* \"upgradeable/ERC20Updateable.sol\":551:567  10 ** decimals() */\n      tag_108\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":3602:3604  18 */\n      0x12\n        /* \"upgradeable/ERC20Updateable.sol\":551:553  10 */\n      0x0a\n        /* \"upgradeable/ERC20Updateable.sol\":551:567  10 ** decimals() */\n      tag_109\n      jump\t// in\n    tag_108:\n        /* \"upgradeable/ERC20Updateable.sol\":544:567  1000 * 10 ** decimals() */\n      tag_110\n      swap1\n        /* \"upgradeable/ERC20Updateable.sol\":544:548  1000 */\n      0x03e8\n        /* \"upgradeable/ERC20Updateable.sol\":544:567  1000 * 10 ** decimals() */\n      tag_111\n      jump\t// in\n    tag_110:\n        /* \"upgradeable/ERC20Updateable.sol\":526:531  _mint */\n      tag_112\n        /* \"upgradeable/ERC20Updateable.sol\":526:568  _mint(msg.sender, 1000 * 10 ** decimals()) */\n      jump\t// in\n    tag_106:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3571:3585  isTopLevelCall */\n      dup1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3567:3669  if (isTopLevelCall) {... */\n      iszero\n      tag_113\n      jumpi\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3618:3623  false */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3602:3623  _initializing = false */\n      dup1\n      sload\n      not(0xff00)\n      and\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3643:3657  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":1902:1938   */\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3643:3657  Initialized(1) */\n      0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498\n      swap1\n        /* \"#utility.yul\":1890:1892   */\n      0x20\n        /* \"#utility.yul\":1875:1893   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3643:3657  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3567:3669  if (isTopLevelCall) {... */\n    tag_113:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":3178:3676  {... */\n      pop\n        /* \"upgradeable/ERC20Updateable.sol\":435:576  function initialize() initializer public {... */\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2776:2880  function symbol() public view virtual override returns (string memory) {... */\n    tag_51:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2832:2845  string memory */\n      0x60\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2865:2872  _symbol */\n      0x37\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2858:2872  return _symbol */\n      dup1\n      sload\n      tag_68\n      swap1\n      tag_69\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7134:7570  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {... */\n    tag_55:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7227:7231  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7227:7231  bool */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7310:7335  allowance(owner, spender) */\n      tag_124\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7327:7334  spender */\n      dup7\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7310:7319  allowance */\n      tag_64\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7310:7335  allowance(owner, spender) */\n      jump\t// in\n    tag_124:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7283:7335  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7374:7389  subtractedValue */\n      dup4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7354:7370  currentAllowance */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7354:7389  currentAllowance >= subtractedValue */\n      lt\n      iszero\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7346:7431  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_125\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5427:5429   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7346:7431  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5409:5430   */\n      mstore\n        /* \"#utility.yul\":5466:5468   */\n      0x25\n        /* \"#utility.yul\":5446:5464   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":5439:5469   */\n      mstore\n        /* \"#utility.yul\":5505:5539   */\n      0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77\n        /* \"#utility.yul\":5485:5503   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5478:5540   */\n      mstore\n      shl(0xd8, 0x207a65726f)\n        /* \"#utility.yul\":5556:5574   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5549:5584   */\n      mstore\n        /* \"#utility.yul\":5601:5620   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7346:7431  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n      tag_100\n        /* \"#utility.yul\":5225:5626   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7346:7431  require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\") */\n    tag_125:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7467:7527  _approve(owner, spender, currentAllowance - subtractedValue) */\n      tag_84\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7476:7481  owner */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7483:7490  spender */\n      dup7\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7511:7526  subtractedValue */\n      dup7\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7492:7508  currentAllowance */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7492:7526  currentAllowance - subtractedValue */\n      sub\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7467:7475  _approve */\n      tag_78\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":7467:7527  _approve(owner, spender, currentAllowance - subtractedValue) */\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4181:4374  function transfer(address to, uint256 amount) public virtual override returns (bool) {... */\n    tag_59:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4260:4264  bool */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      caller\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4316:4344  _transfer(owner, to, amount) */\n      tag_77\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":952:962  msg.sender */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4333:4335  to */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4337:4343  amount */\n      dup6\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4316:4325  _transfer */\n      tag_85\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4316:4344  _transfer(owner, to, amount) */\n      jump\t// in\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4437:4588  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n    tag_64:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4571  _allowances[owner] */\n      swap2\n      dup3\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4526:4533  uint256 */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4571  _allowances[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4564  _allowances */\n      0x34\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4571  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4553:4580  _allowances[owner][spender] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      swap1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":4437:4588  function allowance(address owner, address spender) public view virtual override returns (uint256) {... */\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1221:1547  function isContract(address account) internal view returns (bool) {... */\n    tag_66:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1516:1535  account.code.length */\n      and\n      extcodesize\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1516:1539  account.code.length > 0 */\n      iszero\n      iszero\n      swap1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":1221:1547  function isContract(address account) internal view returns (bool) {... */\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11161:11541  function _approve(... */\n    tag_78:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11297:11316  owner != address(0) */\n      dup4\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_136\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":5833:5835   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":5815:5836   */\n      mstore\n        /* \"#utility.yul\":5872:5874   */\n      0x24\n        /* \"#utility.yul\":5852:5870   */\n      dup1\n      dup3\n      add\n        /* \"#utility.yul\":5845:5875   */\n      mstore\n        /* \"#utility.yul\":5911:5945   */\n      0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464\n        /* \"#utility.yul\":5891:5909   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":5884:5946   */\n      mstore\n      shl(0xe0, 0x72657373)\n        /* \"#utility.yul\":5962:5980   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":5955:5989   */\n      mstore\n        /* \"#utility.yul\":6006:6025   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":5631:6031   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11289:11357  require(owner != address(0), \"ERC20: approve from the zero address\") */\n    tag_136:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11376:11397  spender != address(0) */\n      dup3\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_139\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6238:6240   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6220:6241   */\n      mstore\n        /* \"#utility.yul\":6277:6279   */\n      0x22\n        /* \"#utility.yul\":6257:6275   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6250:6280   */\n      mstore\n        /* \"#utility.yul\":6316:6350   */\n      0x45524332303a20617070726f766520746f20746865207a65726f206164647265\n        /* \"#utility.yul\":6296:6314   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6289:6351   */\n      mstore\n      shl(0xf0, 0x7373)\n        /* \"#utility.yul\":6367:6385   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":6360:6392   */\n      mstore\n        /* \"#utility.yul\":6409:6428   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":6036:6434   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11368:11436  require(spender != address(0), \"ERC20: approve to the zero address\") */\n    tag_139:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11467  _allowances[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11460  _allowances */\n      0x34\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11467  _allowances[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11476  _allowances[owner][spender] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11449:11485  _allowances[owner][spender] = amount */\n      dup6\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11533  Approval(owner, spender, amount) */\n      swap1\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11533  Approval(owner, spender, amount) */\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11501:11533  Approval(owner, spender, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11161:11541  function _approve(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11832:12285  function _spendAllowance(... */\n    tag_83:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11967:11991  uint256 currentAllowance */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11994:12019  allowance(owner, spender) */\n      tag_144\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12004:12009  owner */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12011:12018  spender */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11994:12003  allowance */\n      tag_64\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11994:12019  allowance(owner, spender) */\n      jump\t// in\n    tag_144:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11967:12019  uint256 currentAllowance = allowance(owner, spender) */\n      swap1\n      pop\n      not(0x00)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12034:12050  currentAllowance */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12034:12071  currentAllowance != type(uint256).max */\n      eq\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12030:12278  if (currentAllowance != type(uint256).max) {... */\n      tag_149\n      jumpi\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12116:12122  amount */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12096:12112  currentAllowance */\n      dup2\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12096:12122  currentAllowance >= amount */\n      lt\n      iszero\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_146\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6641:6643   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6623:6644   */\n      mstore\n        /* \"#utility.yul\":6680:6682   */\n      0x1d\n        /* \"#utility.yul\":6660:6678   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6653:6683   */\n      mstore\n        /* \"#utility.yul\":6719:6750   */\n      0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000\n        /* \"#utility.yul\":6699:6717   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6692:6751   */\n      mstore\n        /* \"#utility.yul\":6768:6786   */\n      0x64\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n      tag_100\n        /* \"#utility.yul\":6439:6792   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12088:12156  require(currentAllowance >= amount, \"ERC20: insufficient allowance\") */\n    tag_146:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12200:12251  _approve(owner, spender, currentAllowance - amount) */\n      tag_149\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12209:12214  owner */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12216:12223  spender */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12244:12250  amount */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12225:12241  currentAllowance */\n      dup5\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12225:12250  currentAllowance - amount */\n      sub\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12200:12208  _approve */\n      tag_78\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12200:12251  _approve(owner, spender, currentAllowance - amount) */\n      jump\t// in\n    tag_149:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11956:12285  {... */\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":11832:12285  function _spendAllowance(... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8040:8880  function _transfer(... */\n    tag_85:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8171:8189  from != address(0) */\n      dup4\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_151\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":6999:7001   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":6981:7002   */\n      mstore\n        /* \"#utility.yul\":7038:7040   */\n      0x25\n        /* \"#utility.yul\":7018:7036   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7011:7041   */\n      mstore\n        /* \"#utility.yul\":7077:7111   */\n      0x45524332303a207472616e736665722066726f6d20746865207a65726f206164\n        /* \"#utility.yul\":7057:7075   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7050:7112   */\n      mstore\n      shl(0xd8, 0x6472657373)\n        /* \"#utility.yul\":7128:7146   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7121:7156   */\n      mstore\n        /* \"#utility.yul\":7173:7192   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n      tag_100\n        /* \"#utility.yul\":6797:7198   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8163:8231  require(from != address(0), \"ERC20: transfer from the zero address\") */\n    tag_151:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8250:8266  to != address(0) */\n      dup3\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_154\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7405:7407   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7387:7408   */\n      mstore\n        /* \"#utility.yul\":7444:7446   */\n      0x23\n        /* \"#utility.yul\":7424:7442   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7417:7447   */\n      mstore\n        /* \"#utility.yul\":7483:7517   */\n      0x45524332303a207472616e7366657220746f20746865207a65726f2061646472\n        /* \"#utility.yul\":7463:7481   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7456:7518   */\n      mstore\n      shl(0xe8, 0x657373)\n        /* \"#utility.yul\":7534:7552   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7527:7560   */\n      mstore\n        /* \"#utility.yul\":7577:7596   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":7203:7602   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8242:8306  require(to != address(0), \"ERC20: transfer to the zero address\") */\n    tag_154:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8407  _balances[from] */\n      dup4\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8370:8389  uint256 fromBalance */\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8407  _balances[from] */\n      swap1\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8401  _balances */\n      0x33\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8392:8407  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8426:8447  fromBalance >= amount */\n      dup2\n      dup2\n      lt\n      iszero\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_159\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":7809:7811   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7791:7812   */\n      mstore\n        /* \"#utility.yul\":7848:7850   */\n      0x26\n        /* \"#utility.yul\":7828:7846   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":7821:7851   */\n      mstore\n        /* \"#utility.yul\":7887:7921   */\n      0x45524332303a207472616e7366657220616d6f756e7420657863656564732062\n        /* \"#utility.yul\":7867:7885   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":7860:7922   */\n      mstore\n      shl(0xd0, 0x616c616e6365)\n        /* \"#utility.yul\":7938:7956   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":7931:7967   */\n      mstore\n        /* \"#utility.yul\":7984:8003   */\n      0x84\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n      tag_100\n        /* \"#utility.yul\":7607:8009   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8418:8490  require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\") */\n    tag_159:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8541  _balances[from] */\n      dup1\n      dup6\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8535  _balances */\n      0x33\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8541  _balances[from] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8544:8564  fromBalance - amount */\n      dup7\n      dup7\n      sub\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8526:8564  _balances[from] = fromBalance - amount */\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8744:8757  _balances[to] */\n      swap3\n      dup7\n      and\n      dup1\n      dup3\n      mstore\n      swap1\n      dup4\n      swap1\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8744:8767  _balances[to] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8796:8822  Transfer(from, to, amount) */\n      swap2\n      mload\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap1\n      tag_162\n      swap1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8558:8564  amount */\n      dup7\n        /* \"#utility.yul\":1391:1416   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1379:1381   */\n      0x20\n        /* \"#utility.yul\":1364:1382   */\n      add\n      swap1\n        /* \"#utility.yul\":1245:1422   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8796:8822  Transfer(from, to, amount) */\n    tag_162:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":8835:8872  _afterTokenTransfer(from, to, amount) */\n      tag_149\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12885:13010  function _beforeTokenTransfer(... */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2168:2317  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_105:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":5030:5043  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":5022:5091  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_166\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_168\n      jump\t// in\n    tag_166:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2271:2309  __ERC20_init_unchained(name_, symbol_) */\n      tag_170\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2294:2299  name_ */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2301:2308  symbol_ */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2271:2293  __ERC20_init_unchained */\n      tag_171\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2271:2309  __ERC20_init_unchained(name_, symbol_) */\n      jump\t// in\n    tag_170:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2168:2317  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9167:9715  function _mint(address account, uint256 amount) internal virtual {... */\n    tag_112:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9251:9272  account != address(0) */\n      dup3\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9243:9308  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_173\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":8628:8630   */\n      0x20\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9243:9308  require(account != address(0), \"ERC20: mint to the zero address\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":8610:8631   */\n      mstore\n        /* \"#utility.yul\":8667:8669   */\n      0x1f\n        /* \"#utility.yul\":8647:8665   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":8640:8670   */\n      mstore\n        /* \"#utility.yul\":8706:8739   */\n      0x45524332303a206d696e7420746f20746865207a65726f206164647265737300\n        /* \"#utility.yul\":8686:8704   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":8679:8740   */\n      mstore\n        /* \"#utility.yul\":8757:8775   */\n      0x64\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9243:9308  require(account != address(0), \"ERC20: mint to the zero address\") */\n      tag_100\n        /* \"#utility.yul\":8426:8781   */\n      jump\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9243:9308  require(account != address(0), \"ERC20: mint to the zero address\") */\n    tag_173:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9399:9405  amount */\n      dup1\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9383:9395  _totalSupply */\n      0x35\n      0x00\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9383:9405  _totalSupply += amount */\n      dup3\n      dup3\n      sload\n      tag_177\n      swap2\n      swap1\n      tag_92\n      jump\t// in\n    tag_177:\n      swap1\n      swap2\n      sstore\n      pop\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9554:9572  _balances[account] */\n      dup3\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9554:9563  _balances */\n      0x33\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9554:9572  _balances[account] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9554:9582  _balances[account] += amount */\n      dup1\n      sload\n      dup7\n      add\n      swap1\n      sstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9609:9646  Transfer(address(0), account, amount) */\n      mload\n        /* \"#utility.yul\":1391:1416   */\n      dup5\n      dup2\n      mstore\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9609:9646  Transfer(address(0), account, amount) */\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n        /* \"#utility.yul\":1364:1382   */\n      add\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":9609:9646  Transfer(address(0), account, amount) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2168:2317  function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {... */\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":12885:13010  function _beforeTokenTransfer(... */\n    tag_158:\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2325:2487  function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {... */\n    tag_171:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":5030:5043  _initializing */\n      sload(0x00)\n      0x0100\n      swap1\n      div\n      0xff\n      and\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":5022:5091  require(_initializing, \"Initializable: contract is not initializing\") */\n      tag_183\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n      0x04\n      add\n      tag_100\n      swap1\n      tag_168\n      jump\t// in\n    tag_183:\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2438:2443  _name */\n      0x36\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2438:2451  _name = name_ */\n      tag_186\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2446:2451  name_ */\n      dup4\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2438:2443  _name */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2438:2451  _name = name_ */\n      tag_187\n      jump\t// in\n    tag_186:\n      pop\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2462:2469  _symbol */\n      0x37\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2462:2479  _symbol = symbol_ */\n      tag_158\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2472:2479  symbol_ */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2462:2469  _symbol */\n      dup3\n        /* \"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":2462:2479  _symbol = symbol_ */\n      tag_187\n      jump\t// in\n        /* \"#utility.yul\":14:611   */\n    tag_19:\n        /* \"#utility.yul\":126:130   */\n      0x00\n        /* \"#utility.yul\":155:157   */\n      0x20\n        /* \"#utility.yul\":184:186   */\n      dup1\n        /* \"#utility.yul\":173:182   */\n      dup4\n        /* \"#utility.yul\":166:187   */\n      mstore\n        /* \"#utility.yul\":216:222   */\n      dup4\n        /* \"#utility.yul\":210:223   */\n      mload\n        /* \"#utility.yul\":259:265   */\n      dup1\n        /* \"#utility.yul\":254:256   */\n      dup3\n        /* \"#utility.yul\":243:252   */\n      dup6\n        /* \"#utility.yul\":239:257   */\n      add\n        /* \"#utility.yul\":232:266   */\n      mstore\n        /* \"#utility.yul\":284:285   */\n      0x00\n        /* \"#utility.yul\":294:434   */\n    tag_199:\n        /* \"#utility.yul\":308:314   */\n      dup2\n        /* \"#utility.yul\":305:306   */\n      dup2\n        /* \"#utility.yul\":302:315   */\n      lt\n        /* \"#utility.yul\":294:434   */\n      iszero\n      tag_201\n      jumpi\n        /* \"#utility.yul\":403:417   */\n      dup6\n      dup2\n      add\n        /* \"#utility.yul\":399:422   */\n      dup4\n      add\n        /* \"#utility.yul\":393:423   */\n      mload\n        /* \"#utility.yul\":369:386   */\n      dup6\n      dup3\n      add\n        /* \"#utility.yul\":388:390   */\n      0x40\n        /* \"#utility.yul\":365:391   */\n      add\n        /* \"#utility.yul\":358:424   */\n      mstore\n        /* \"#utility.yul\":323:333   */\n      dup3\n      add\n        /* \"#utility.yul\":294:434   */\n      jump(tag_199)\n    tag_201:\n        /* \"#utility.yul\":452:458   */\n      dup2\n        /* \"#utility.yul\":449:450   */\n      dup2\n        /* \"#utility.yul\":446:459   */\n      gt\n        /* \"#utility.yul\":443:534   */\n      iszero\n      tag_202\n      jumpi\n        /* \"#utility.yul\":522:523   */\n      0x00\n        /* \"#utility.yul\":517:519   */\n      0x40\n        /* \"#utility.yul\":508:514   */\n      dup4\n        /* \"#utility.yul\":497:506   */\n      dup8\n        /* \"#utility.yul\":493:515   */\n      add\n        /* \"#utility.yul\":489:520   */\n      add\n        /* \"#utility.yul\":482:524   */\n      mstore\n        /* \"#utility.yul\":443:534   */\n    tag_202:\n      pop\n        /* \"#utility.yul\":595:597   */\n      0x1f\n        /* \"#utility.yul\":574:589   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":570:599   */\n      and\n        /* \"#utility.yul\":555:600   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":602:604   */\n      0x40\n        /* \"#utility.yul\":551:605   */\n      add\n      swap4\n        /* \"#utility.yul\":14:611   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":616:789   */\n    tag_189:\n        /* \"#utility.yul\":684:704   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":733:764   */\n      dup2\n      and\n        /* \"#utility.yul\":723:765   */\n      dup2\n      eq\n        /* \"#utility.yul\":713:783   */\n      tag_204\n      jumpi\n        /* \"#utility.yul\":779:780   */\n      0x00\n        /* \"#utility.yul\":776:777   */\n      dup1\n        /* \"#utility.yul\":769:781   */\n      revert\n        /* \"#utility.yul\":713:783   */\n    tag_204:\n        /* \"#utility.yul\":616:789   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":794:1048   */\n    tag_22:\n        /* \"#utility.yul\":862:868   */\n      0x00\n        /* \"#utility.yul\":870:876   */\n      dup1\n        /* \"#utility.yul\":923:925   */\n      0x40\n        /* \"#utility.yul\":911:920   */\n      dup4\n        /* \"#utility.yul\":902:909   */\n      dup6\n        /* \"#utility.yul\":898:921   */\n      sub\n        /* \"#utility.yul\":894:926   */\n      slt\n        /* \"#utility.yul\":891:943   */\n      iszero\n      tag_206\n      jumpi\n        /* \"#utility.yul\":939:940   */\n      0x00\n        /* \"#utility.yul\":936:937   */\n      dup1\n        /* \"#utility.yul\":929:941   */\n      revert\n        /* \"#utility.yul\":891:943   */\n    tag_206:\n        /* \"#utility.yul\":962:991   */\n      tag_207\n        /* \"#utility.yul\":981:990   */\n      dup4\n        /* \"#utility.yul\":962:991   */\n      tag_189\n      jump\t// in\n    tag_207:\n        /* \"#utility.yul\":952:991   */\n      swap5\n        /* \"#utility.yul\":1038:1040   */\n      0x20\n        /* \"#utility.yul\":1023:1041   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":1010:1042   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":794:1048   */\n      jump\t// out\n        /* \"#utility.yul\":1427:1755   */\n    tag_32:\n        /* \"#utility.yul\":1504:1510   */\n      0x00\n        /* \"#utility.yul\":1512:1518   */\n      dup1\n        /* \"#utility.yul\":1520:1526   */\n      0x00\n        /* \"#utility.yul\":1573:1575   */\n      0x60\n        /* \"#utility.yul\":1561:1570   */\n      dup5\n        /* \"#utility.yul\":1552:1559   */\n      dup7\n        /* \"#utility.yul\":1548:1571   */\n      sub\n        /* \"#utility.yul\":1544:1576   */\n      slt\n        /* \"#utility.yul\":1541:1593   */\n      iszero\n      tag_211\n      jumpi\n        /* \"#utility.yul\":1589:1590   */\n      0x00\n        /* \"#utility.yul\":1586:1587   */\n      dup1\n        /* \"#utility.yul\":1579:1591   */\n      revert\n        /* \"#utility.yul\":1541:1593   */\n    tag_211:\n        /* \"#utility.yul\":1612:1641   */\n      tag_212\n        /* \"#utility.yul\":1631:1640   */\n      dup5\n        /* \"#utility.yul\":1612:1641   */\n      tag_189\n      jump\t// in\n    tag_212:\n        /* \"#utility.yul\":1602:1641   */\n      swap3\n      pop\n        /* \"#utility.yul\":1660:1698   */\n      tag_213\n        /* \"#utility.yul\":1694:1696   */\n      0x20\n        /* \"#utility.yul\":1683:1692   */\n      dup6\n        /* \"#utility.yul\":1679:1697   */\n      add\n        /* \"#utility.yul\":1660:1698   */\n      tag_189\n      jump\t// in\n    tag_213:\n        /* \"#utility.yul\":1650:1698   */\n      swap2\n      pop\n        /* \"#utility.yul\":1745:1747   */\n      0x40\n        /* \"#utility.yul\":1734:1743   */\n      dup5\n        /* \"#utility.yul\":1730:1748   */\n      add\n        /* \"#utility.yul\":1717:1749   */\n      calldataload\n        /* \"#utility.yul\":1707:1749   */\n      swap1\n      pop\n        /* \"#utility.yul\":1427:1755   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1949:2135   */\n    tag_45:\n        /* \"#utility.yul\":2008:2014   */\n      0x00\n        /* \"#utility.yul\":2061:2063   */\n      0x20\n        /* \"#utility.yul\":2049:2058   */\n      dup3\n        /* \"#utility.yul\":2040:2047   */\n      dup5\n        /* \"#utility.yul\":2036:2059   */\n      sub\n        /* \"#utility.yul\":2032:2064   */\n      slt\n        /* \"#utility.yul\":2029:2081   */\n      iszero\n      tag_216\n      jumpi\n        /* \"#utility.yul\":2077:2078   */\n      0x00\n        /* \"#utility.yul\":2074:2075   */\n      dup1\n        /* \"#utility.yul\":2067:2079   */\n      revert\n        /* \"#utility.yul\":2029:2081   */\n    tag_216:\n        /* \"#utility.yul\":2100:2129   */\n      tag_217\n        /* \"#utility.yul\":2119:2128   */\n      dup3\n        /* \"#utility.yul\":2100:2129   */\n      tag_189\n      jump\t// in\n    tag_217:\n        /* \"#utility.yul\":2090:2129   */\n      swap4\n        /* \"#utility.yul\":1949:2135   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2140:2400   */\n    tag_63:\n        /* \"#utility.yul\":2208:2214   */\n      0x00\n        /* \"#utility.yul\":2216:2222   */\n      dup1\n        /* \"#utility.yul\":2269:2271   */\n      0x40\n        /* \"#utility.yul\":2257:2266   */\n      dup4\n        /* \"#utility.yul\":2248:2255   */\n      dup6\n        /* \"#utility.yul\":2244:2267   */\n      sub\n        /* \"#utility.yul\":2240:2272   */\n      slt\n        /* \"#utility.yul\":2237:2289   */\n      iszero\n      tag_219\n      jumpi\n        /* \"#utility.yul\":2285:2286   */\n      0x00\n        /* \"#utility.yul\":2282:2283   */\n      dup1\n        /* \"#utility.yul\":2275:2287   */\n      revert\n        /* \"#utility.yul\":2237:2289   */\n    tag_219:\n        /* \"#utility.yul\":2308:2337   */\n      tag_220\n        /* \"#utility.yul\":2327:2336   */\n      dup4\n        /* \"#utility.yul\":2308:2337   */\n      tag_189\n      jump\t// in\n    tag_220:\n        /* \"#utility.yul\":2298:2337   */\n      swap2\n      pop\n        /* \"#utility.yul\":2356:2394   */\n      tag_221\n        /* \"#utility.yul\":2390:2392   */\n      0x20\n        /* \"#utility.yul\":2379:2388   */\n      dup5\n        /* \"#utility.yul\":2375:2393   */\n      add\n        /* \"#utility.yul\":2356:2394   */\n      tag_189\n      jump\t// in\n    tag_221:\n        /* \"#utility.yul\":2346:2394   */\n      swap1\n      pop\n        /* \"#utility.yul\":2140:2400   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2405:2785   */\n    tag_69:\n        /* \"#utility.yul\":2484:2485   */\n      0x01\n        /* \"#utility.yul\":2480:2492   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":2527:2539   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":2548:2609   */\n      tag_223\n      jumpi\n        /* \"#utility.yul\":2602:2606   */\n      0x7f\n        /* \"#utility.yul\":2594:2600   */\n      dup3\n        /* \"#utility.yul\":2590:2607   */\n      and\n        /* \"#utility.yul\":2580:2607   */\n      swap2\n      pop\n        /* \"#utility.yul\":2548:2609   */\n    tag_223:\n        /* \"#utility.yul\":2655:2657   */\n      0x20\n        /* \"#utility.yul\":2647:2653   */\n      dup3\n        /* \"#utility.yul\":2644:2658   */\n      lt\n        /* \"#utility.yul\":2624:2642   */\n      dup2\n        /* \"#utility.yul\":2621:2659   */\n      sub\n        /* \"#utility.yul\":2618:2779   */\n      tag_224\n      jumpi\n        /* \"#utility.yul\":2701:2711   */\n      0x4e487b71\n        /* \"#utility.yul\":2696:2699   */\n      0xe0\n        /* \"#utility.yul\":2692:2712   */\n      shl\n        /* \"#utility.yul\":2689:2690   */\n      0x00\n        /* \"#utility.yul\":2682:2713   */\n      mstore\n        /* \"#utility.yul\":2736:2740   */\n      0x22\n        /* \"#utility.yul\":2733:2734   */\n      0x04\n        /* \"#utility.yul\":2726:2741   */\n      mstore\n        /* \"#utility.yul\":2764:2768   */\n      0x24\n        /* \"#utility.yul\":2761:2762   */\n      0x00\n        /* \"#utility.yul\":2754:2769   */\n      revert\n        /* \"#utility.yul\":2618:2779   */\n    tag_224:\n      pop\n        /* \"#utility.yul\":2405:2785   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":2790:2917   */\n    tag_190:\n        /* \"#utility.yul\":2851:2861   */\n      0x4e487b71\n        /* \"#utility.yul\":2846:2849   */\n      0xe0\n        /* \"#utility.yul\":2842:2862   */\n      shl\n        /* \"#utility.yul\":2839:2840   */\n      0x00\n        /* \"#utility.yul\":2832:2863   */\n      mstore\n        /* \"#utility.yul\":2882:2886   */\n      0x11\n        /* \"#utility.yul\":2879:2880   */\n      0x04\n        /* \"#utility.yul\":2872:2887   */\n      mstore\n        /* \"#utility.yul\":2906:2910   */\n      0x24\n        /* \"#utility.yul\":2903:2904   */\n      0x00\n        /* \"#utility.yul\":2896:2911   */\n      revert\n        /* \"#utility.yul\":2922:3050   */\n    tag_92:\n        /* \"#utility.yul\":2962:2965   */\n      0x00\n        /* \"#utility.yul\":2993:2994   */\n      dup3\n        /* \"#utility.yul\":2989:2995   */\n      not\n        /* \"#utility.yul\":2986:2987   */\n      dup3\n        /* \"#utility.yul\":2983:2996   */\n      gt\n        /* \"#utility.yul\":2980:3019   */\n      iszero\n      tag_228\n      jumpi\n        /* \"#utility.yul\":2999:3017   */\n      tag_228\n      tag_190\n      jump\t// in\n    tag_228:\n      pop\n        /* \"#utility.yul\":3035:3044   */\n      add\n      swap1\n        /* \"#utility.yul\":2922:3050   */\n      jump\t// out\n        /* \"#utility.yul\":3470:3892   */\n    tag_191:\n        /* \"#utility.yul\":3559:3560   */\n      0x01\n        /* \"#utility.yul\":3602:3607   */\n      dup2\n        /* \"#utility.yul\":3559:3560   */\n      dup2\n        /* \"#utility.yul\":3616:3886   */\n    tag_231:\n        /* \"#utility.yul\":3637:3644   */\n      dup1\n        /* \"#utility.yul\":3627:3635   */\n      dup6\n        /* \"#utility.yul\":3624:3645   */\n      gt\n        /* \"#utility.yul\":3616:3886   */\n      iszero\n      tag_233\n      jumpi\n        /* \"#utility.yul\":3696:3700   */\n      dup2\n        /* \"#utility.yul\":3692:3693   */\n      0x00\n        /* \"#utility.yul\":3688:3694   */\n      not\n        /* \"#utility.yul\":3684:3701   */\n      div\n        /* \"#utility.yul\":3678:3682   */\n      dup3\n        /* \"#utility.yul\":3675:3702   */\n      gt\n        /* \"#utility.yul\":3672:3725   */\n      iszero\n      tag_235\n      jumpi\n        /* \"#utility.yul\":3705:3723   */\n      tag_235\n      tag_190\n      jump\t// in\n    tag_235:\n        /* \"#utility.yul\":3755:3762   */\n      dup1\n        /* \"#utility.yul\":3745:3753   */\n      dup6\n        /* \"#utility.yul\":3741:3763   */\n      and\n        /* \"#utility.yul\":3738:3793   */\n      iszero\n      tag_236\n      jumpi\n        /* \"#utility.yul\":3775:3791   */\n      swap2\n      dup2\n      mul\n      swap2\n        /* \"#utility.yul\":3738:3793   */\n    tag_236:\n        /* \"#utility.yul\":3854:3876   */\n      swap4\n      dup5\n      shr\n      swap4\n        /* \"#utility.yul\":3814:3829   */\n      swap1\n      dup1\n      mul\n      swap1\n        /* \"#utility.yul\":3616:3886   */\n      jump(tag_231)\n    tag_233:\n        /* \"#utility.yul\":3620:3623   */\n      pop\n        /* \"#utility.yul\":3470:3892   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3897:4703   */\n    tag_192:\n        /* \"#utility.yul\":3946:3951   */\n      0x00\n        /* \"#utility.yul\":3976:3984   */\n      dup3\n        /* \"#utility.yul\":3966:4046   */\n      tag_238\n      jumpi\n      pop\n        /* \"#utility.yul\":4017:4018   */\n      0x01\n        /* \"#utility.yul\":4031:4036   */\n      jump(tag_74)\n        /* \"#utility.yul\":3966:4046   */\n    tag_238:\n        /* \"#utility.yul\":4065:4069   */\n      dup2\n        /* \"#utility.yul\":4055:4131   */\n      tag_239\n      jumpi\n      pop\n        /* \"#utility.yul\":4102:4103   */\n      0x00\n        /* \"#utility.yul\":4116:4121   */\n      jump(tag_74)\n        /* \"#utility.yul\":4055:4131   */\n    tag_239:\n        /* \"#utility.yul\":4147:4151   */\n      dup2\n        /* \"#utility.yul\":4165:4166   */\n      0x01\n        /* \"#utility.yul\":4160:4219   */\n      dup2\n      eq\n      tag_241\n      jumpi\n        /* \"#utility.yul\":4233:4234   */\n      0x02\n        /* \"#utility.yul\":4228:4358   */\n      dup2\n      eq\n      tag_242\n      jumpi\n        /* \"#utility.yul\":4140:4358   */\n      jump(tag_240)\n        /* \"#utility.yul\":4160:4219   */\n    tag_241:\n        /* \"#utility.yul\":4190:4191   */\n      0x01\n        /* \"#utility.yul\":4181:4191   */\n      swap2\n      pop\n        /* \"#utility.yul\":4204:4209   */\n      pop\n      jump(tag_74)\n        /* \"#utility.yul\":4228:4358   */\n    tag_242:\n        /* \"#utility.yul\":4265:4268   */\n      0xff\n        /* \"#utility.yul\":4255:4263   */\n      dup5\n        /* \"#utility.yul\":4252:4269   */\n      gt\n        /* \"#utility.yul\":4249:4292   */\n      iszero\n      tag_244\n      jumpi\n        /* \"#utility.yul\":4272:4290   */\n      tag_244\n      tag_190\n      jump\t// in\n    tag_244:\n      pop\n      pop\n        /* \"#utility.yul\":4328:4329   */\n      0x01\n        /* \"#utility.yul\":4314:4330   */\n      dup3\n      shl\n        /* \"#utility.yul\":4343:4348   */\n      jump(tag_74)\n        /* \"#utility.yul\":4140:4358   */\n    tag_240:\n      pop\n        /* \"#utility.yul\":4442:4444   */\n      0x20\n        /* \"#utility.yul\":4432:4440   */\n      dup4\n        /* \"#utility.yul\":4429:4445   */\n      lt\n        /* \"#utility.yul\":4423:4426   */\n      0x0133\n        /* \"#utility.yul\":4417:4421   */\n      dup4\n        /* \"#utility.yul\":4414:4427   */\n      lt\n        /* \"#utility.yul\":4410:4446   */\n      and\n        /* \"#utility.yul\":4404:4406   */\n      0x4e\n        /* \"#utility.yul\":4394:4402   */\n      dup5\n        /* \"#utility.yul\":4391:4407   */\n      lt\n        /* \"#utility.yul\":4386:4388   */\n      0x0b\n        /* \"#utility.yul\":4380:4384   */\n      dup5\n        /* \"#utility.yul\":4377:4389   */\n      lt\n        /* \"#utility.yul\":4373:4408   */\n      and\n        /* \"#utility.yul\":4370:4447   */\n      or\n        /* \"#utility.yul\":4367:4526   */\n      iszero\n      tag_245\n      jumpi\n      pop\n        /* \"#utility.yul\":4479:4498   */\n      dup2\n      dup2\n      exp\n        /* \"#utility.yul\":4511:4516   */\n      jump(tag_74)\n        /* \"#utility.yul\":4367:4526   */\n    tag_245:\n        /* \"#utility.yul\":4558:4592   */\n      tag_246\n        /* \"#utility.yul\":4583:4591   */\n      dup4\n        /* \"#utility.yul\":4577:4581   */\n      dup4\n        /* \"#utility.yul\":4558:4592   */\n      tag_191\n      jump\t// in\n    tag_246:\n        /* \"#utility.yul\":4628:4634   */\n      dup1\n        /* \"#utility.yul\":4624:4625   */\n      0x00\n        /* \"#utility.yul\":4620:4626   */\n      not\n        /* \"#utility.yul\":4616:4635   */\n      div\n        /* \"#utility.yul\":4607:4614   */\n      dup3\n        /* \"#utility.yul\":4604:4636   */\n      gt\n        /* \"#utility.yul\":4601:4659   */\n      iszero\n      tag_248\n      jumpi\n        /* \"#utility.yul\":4639:4657   */\n      tag_248\n      tag_190\n      jump\t// in\n    tag_248:\n        /* \"#utility.yul\":4677:4697   */\n      mul\n      swap4\n        /* \"#utility.yul\":3897:4703   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":4708:4848   */\n    tag_109:\n        /* \"#utility.yul\":4766:4771   */\n      0x00\n        /* \"#utility.yul\":4795:4842   */\n      tag_217\n        /* \"#utility.yul\":4836:4840   */\n      0xff\n        /* \"#utility.yul\":4826:4834   */\n      dup5\n        /* \"#utility.yul\":4822:4841   */\n      and\n        /* \"#utility.yul\":4816:4820   */\n      dup4\n        /* \"#utility.yul\":4795:4842   */\n      tag_192\n      jump\t// in\n        /* \"#utility.yul\":4853:5021   */\n    tag_111:\n        /* \"#utility.yul\":4893:4900   */\n      0x00\n        /* \"#utility.yul\":4959:4960   */\n      dup2\n        /* \"#utility.yul\":4955:4956   */\n      0x00\n        /* \"#utility.yul\":4951:4957   */\n      not\n        /* \"#utility.yul\":4947:4961   */\n      div\n        /* \"#utility.yul\":4944:4945   */\n      dup4\n        /* \"#utility.yul\":4941:4962   */\n      gt\n        /* \"#utility.yul\":4936:4937   */\n      dup3\n        /* \"#utility.yul\":4929:4938   */\n      iszero\n        /* \"#utility.yul\":4922:4939   */\n      iszero\n        /* \"#utility.yul\":4918:4963   */\n      and\n        /* \"#utility.yul\":4915:4986   */\n      iszero\n      tag_253\n      jumpi\n        /* \"#utility.yul\":4966:4984   */\n      tag_253\n      tag_190\n      jump\t// in\n    tag_253:\n      pop\n        /* \"#utility.yul\":5006:5015   */\n      mul\n      swap1\n        /* \"#utility.yul\":4853:5021   */\n      jump\t// out\n        /* \"#utility.yul\":8014:8421   */\n    tag_168:\n        /* \"#utility.yul\":8216:8218   */\n      0x20\n        /* \"#utility.yul\":8198:8219   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":8255:8257   */\n      0x2b\n        /* \"#utility.yul\":8235:8253   */\n      swap1\n      dup3\n      add\n        /* \"#utility.yul\":8228:8258   */\n      mstore\n        /* \"#utility.yul\":8294:8328   */\n      0x496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069\n        /* \"#utility.yul\":8289:8291   */\n      0x40\n        /* \"#utility.yul\":8274:8292   */\n      dup3\n      add\n        /* \"#utility.yul\":8267:8329   */\n      mstore\n      shl(0xa8, 0x6e697469616c697a696e67)\n        /* \"#utility.yul\":8360:8362   */\n      0x60\n        /* \"#utility.yul\":8345:8363   */\n      dup3\n      add\n        /* \"#utility.yul\":8338:8379   */\n      mstore\n        /* \"#utility.yul\":8411:8414   */\n      0x80\n        /* \"#utility.yul\":8396:8415   */\n      add\n      swap1\n        /* \"#utility.yul\":8014:8421   */\n      jump\t// out\n        /* \"#utility.yul\":8786:8913   */\n    tag_193:\n        /* \"#utility.yul\":8847:8857   */\n      0x4e487b71\n        /* \"#utility.yul\":8842:8845   */\n      0xe0\n        /* \"#utility.yul\":8838:8858   */\n      shl\n        /* \"#utility.yul\":8835:8836   */\n      0x00\n        /* \"#utility.yul\":8828:8859   */\n      mstore\n        /* \"#utility.yul\":8878:8882   */\n      0x41\n        /* \"#utility.yul\":8875:8876   */\n      0x04\n        /* \"#utility.yul\":8868:8883   */\n      mstore\n        /* \"#utility.yul\":8902:8906   */\n      0x24\n        /* \"#utility.yul\":8899:8900   */\n      0x00\n        /* \"#utility.yul\":8892:8907   */\n      revert\n        /* \"#utility.yul\":9044:9589   */\n    tag_195:\n        /* \"#utility.yul\":9146:9148   */\n      0x1f\n        /* \"#utility.yul\":9141:9144   */\n      dup3\n        /* \"#utility.yul\":9138:9149   */\n      gt\n        /* \"#utility.yul\":9135:9583   */\n      iszero\n      tag_158\n      jumpi\n        /* \"#utility.yul\":9182:9183   */\n      0x00\n        /* \"#utility.yul\":9207:9212   */\n      dup2\n        /* \"#utility.yul\":9203:9205   */\n      dup2\n        /* \"#utility.yul\":9196:9213   */\n      mstore\n        /* \"#utility.yul\":9252:9256   */\n      0x20\n        /* \"#utility.yul\":9248:9250   */\n      dup2\n        /* \"#utility.yul\":9238:9257   */\n      keccak256\n        /* \"#utility.yul\":9322:9324   */\n      0x1f\n        /* \"#utility.yul\":9310:9320   */\n      dup6\n        /* \"#utility.yul\":9306:9325   */\n      add\n        /* \"#utility.yul\":9303:9304   */\n      0x05\n        /* \"#utility.yul\":9299:9326   */\n      shr\n        /* \"#utility.yul\":9293:9297   */\n      dup2\n        /* \"#utility.yul\":9289:9327   */\n      add\n        /* \"#utility.yul\":9358:9362   */\n      0x20\n        /* \"#utility.yul\":9346:9356   */\n      dup7\n        /* \"#utility.yul\":9343:9363   */\n      lt\n        /* \"#utility.yul\":9340:9387   */\n      iszero\n      tag_268\n      jumpi\n      pop\n        /* \"#utility.yul\":9381:9385   */\n      dup1\n        /* \"#utility.yul\":9340:9387   */\n    tag_268:\n        /* \"#utility.yul\":9436:9438   */\n      0x1f\n        /* \"#utility.yul\":9431:9434   */\n      dup6\n        /* \"#utility.yul\":9427:9439   */\n      add\n        /* \"#utility.yul\":9424:9425   */\n      0x05\n        /* \"#utility.yul\":9420:9440   */\n      shr\n        /* \"#utility.yul\":9414:9418   */\n      dup3\n        /* \"#utility.yul\":9410:9441   */\n      add\n        /* \"#utility.yul\":9400:9441   */\n      swap2\n      pop\n        /* \"#utility.yul\":9491:9573   */\n    tag_269:\n        /* \"#utility.yul\":9509:9511   */\n      dup2\n        /* \"#utility.yul\":9502:9507   */\n      dup2\n        /* \"#utility.yul\":9499:9512   */\n      lt\n        /* \"#utility.yul\":9491:9573   */\n      iszero\n      tag_271\n      jumpi\n        /* \"#utility.yul\":9554:9571   */\n      dup3\n      dup2\n      sstore\n        /* \"#utility.yul\":9535:9536   */\n      0x01\n        /* \"#utility.yul\":9524:9537   */\n      add\n        /* \"#utility.yul\":9491:9573   */\n      jump(tag_269)\n    tag_271:\n        /* \"#utility.yul\":9495:9498   */\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":9044:9589   */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":9765:11117   */\n    tag_187:\n        /* \"#utility.yul\":9891:9894   */\n      dup2\n        /* \"#utility.yul\":9885:9895   */\n      mload\n        /* \"#utility.yul\":9918:9936   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":9910:9916   */\n      dup2\n        /* \"#utility.yul\":9907:9937   */\n      gt\n        /* \"#utility.yul\":9904:9960   */\n      iszero\n      tag_275\n      jumpi\n        /* \"#utility.yul\":9940:9958   */\n      tag_275\n      tag_193\n      jump\t// in\n    tag_275:\n        /* \"#utility.yul\":9969:10066   */\n      tag_276\n        /* \"#utility.yul\":10059:10065   */\n      dup2\n        /* \"#utility.yul\":10019:10057   */\n      tag_277\n        /* \"#utility.yul\":10051:10055   */\n      dup5\n        /* \"#utility.yul\":10045:10056   */\n      sload\n        /* \"#utility.yul\":10019:10057   */\n      tag_69\n      jump\t// in\n    tag_277:\n        /* \"#utility.yul\":10013:10017   */\n      dup5\n        /* \"#utility.yul\":9969:10066   */\n      tag_195\n      jump\t// in\n    tag_276:\n        /* \"#utility.yul\":10121:10125   */\n      0x20\n      dup1\n        /* \"#utility.yul\":10185:10187   */\n      0x1f\n        /* \"#utility.yul\":10174:10188   */\n      dup4\n      gt\n        /* \"#utility.yul\":10202:10203   */\n      0x01\n        /* \"#utility.yul\":10197:10860   */\n      dup2\n      eq\n      tag_279\n      jumpi\n        /* \"#utility.yul\":10904:10905   */\n      0x00\n        /* \"#utility.yul\":10921:10927   */\n      dup5\n        /* \"#utility.yul\":10918:11007   */\n      iszero\n      tag_280\n      jumpi\n      pop\n        /* \"#utility.yul\":10973:10992   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":10967:10993   */\n      mload\n        /* \"#utility.yul\":10918:11007   */\n    tag_280:\n      not(0x00)\n        /* \"#utility.yul\":9722:9723   */\n      0x03\n        /* \"#utility.yul\":9718:9729   */\n      dup7\n      swap1\n      shl\n        /* \"#utility.yul\":9714:9738   */\n      shr\n        /* \"#utility.yul\":9710:9739   */\n      not\n        /* \"#utility.yul\":9700:9740   */\n      and\n        /* \"#utility.yul\":9746:9747   */\n      0x01\n        /* \"#utility.yul\":9742:9753   */\n      dup6\n      swap1\n      shl\n        /* \"#utility.yul\":9697:9754   */\n      or\n        /* \"#utility.yul\":11020:11101   */\n      dup6\n      sstore\n        /* \"#utility.yul\":10167:11111   */\n      jump(tag_271)\n        /* \"#utility.yul\":10197:10860   */\n    tag_279:\n        /* \"#utility.yul\":8991:8992   */\n      0x00\n        /* \"#utility.yul\":8984:8998   */\n      dup6\n      dup2\n      mstore\n        /* \"#utility.yul\":9028:9032   */\n      0x20\n        /* \"#utility.yul\":9015:9033   */\n      dup2\n      keccak256\n      not(0x1f)\n        /* \"#utility.yul\":10233:10253   */\n      dup7\n      and\n      swap2\n        /* \"#utility.yul\":10351:10587   */\n    tag_283:\n        /* \"#utility.yul\":10365:10372   */\n      dup3\n        /* \"#utility.yul\":10362:10363   */\n      dup2\n        /* \"#utility.yul\":10359:10373   */\n      lt\n        /* \"#utility.yul\":10351:10587   */\n      iszero\n      tag_285\n      jumpi\n        /* \"#utility.yul\":10454:10473   */\n      dup9\n      dup7\n      add\n        /* \"#utility.yul\":10448:10474   */\n      mload\n        /* \"#utility.yul\":10433:10475   */\n      dup3\n      sstore\n        /* \"#utility.yul\":10546:10573   */\n      swap5\n      dup5\n      add\n      swap5\n        /* \"#utility.yul\":10514:10515   */\n      0x01\n        /* \"#utility.yul\":10502:10516   */\n      swap1\n      swap2\n      add\n      swap1\n        /* \"#utility.yul\":10381:10400   */\n      dup5\n      add\n        /* \"#utility.yul\":10351:10587   */\n      jump(tag_283)\n    tag_285:\n        /* \"#utility.yul\":10355:10358   */\n      pop\n        /* \"#utility.yul\":10615:10621   */\n      dup6\n        /* \"#utility.yul\":10606:10613   */\n      dup3\n        /* \"#utility.yul\":10603:10622   */\n      lt\n        /* \"#utility.yul\":10600:10801   */\n      iszero\n      tag_286\n      jumpi\n        /* \"#utility.yul\":10676:10695   */\n      dup8\n      dup6\n      add\n        /* \"#utility.yul\":10670:10696   */\n      mload\n      not(0x00)\n        /* \"#utility.yul\":10759:10760   */\n      0x03\n        /* \"#utility.yul\":10755:10769   */\n      dup9\n      swap1\n      shl\n        /* \"#utility.yul\":10771:10774   */\n      0xf8\n        /* \"#utility.yul\":10751:10775   */\n      and\n        /* \"#utility.yul\":10747:10784   */\n      shr\n        /* \"#utility.yul\":10743:10785   */\n      not\n        /* \"#utility.yul\":10728:10786   */\n      and\n        /* \"#utility.yul\":10713:10787   */\n      dup2\n      sstore\n        /* \"#utility.yul\":10600:10801   */\n    tag_286:\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":10847:10848   */\n      0x01\n        /* \"#utility.yul\":10831:10845   */\n      swap1\n      dup2\n      shl\n        /* \"#utility.yul\":10827:10849   */\n      add\n        /* \"#utility.yul\":10814:10850   */\n      swap1\n      sstore\n      pop\n        /* \"#utility.yul\":9765:11117   */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212209cac22c944e2ec9de7b92f113f7d69c63985dac3d1558e90bfdb448a28355e7664736f6c634300080f0033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_1361": {
									"entryPoint": null,
									"id": 1361,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isContract_1015": {
									"entryPoint": 306,
									"id": 1015,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:625:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "188:236:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "205:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "216:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "198:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "198:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "198:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "239:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "250:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "235:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "235:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "255:2:8",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "228:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "228:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "228:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "278:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "289:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "274:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "274:18:8"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "294:34:8",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "267:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "267:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "267:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "349:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "360:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "345:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "345:18:8"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "365:16:8",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "338:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "338:44:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "338:44:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "391:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "403:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "414:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "399:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "399:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "391:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "165:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "179:4:8",
														"type": ""
													}
												],
												"src": "14:410:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "536:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "546:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "558:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "569:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "554:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "554:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "546:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "588:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "603:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "611:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "599:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "599:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "581:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "581:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "581:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "505:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "516:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "527:4:8",
														"type": ""
													}
												],
												"src": "429:194:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600054610100900460ff16158080156100315750600054600160ff909116105b8061005c575061004a3061013260201b6104dd1760201c565b15801561005c575060005460ff166001145b6100c35760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840160405180910390fd5b6000805460ff1916600117905580156100e6576000805461ff0019166101001790555b801561012c576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50610141565b6001600160a01b03163b151590565b610dbb806101506000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101415780638129fc1c1461016a57806395d89b4114610174578063a457c2d71461017c578063a9059cbb1461018f578063dd62ed3e146101a257600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f578063395093511461012e575b600080fd5b6100c16101b5565b6040516100ce9190610970565b60405180910390f35b6100ea6100e53660046109e1565b610247565b60405190151581526020016100ce565b6035545b6040519081526020016100ce565b6100ea61011a366004610a0b565b610261565b604051601281526020016100ce565b6100ea61013c3660046109e1565b610285565b6100fe61014f366004610a47565b6001600160a01b031660009081526033602052604090205490565b6101726102a7565b005b6100c161041a565b6100ea61018a3660046109e1565b610429565b6100ea61019d3660046109e1565b6104a4565b6100fe6101b0366004610a69565b6104b2565b6060603680546101c490610a9c565b80601f01602080910402602001604051908101604052809291908181526020018280546101f090610a9c565b801561023d5780601f106102125761010080835404028352916020019161023d565b820191906000526020600020905b81548152906001019060200180831161022057829003601f168201915b5050505050905090565b6000336102558185856104ec565b60019150505b92915050565b60003361026f858285610610565b61027a85858561068a565b506001949350505050565b60003361025581858561029883836104b2565b6102a29190610aec565b6104ec565b600054610100900460ff16158080156102c75750600054600160ff909116105b806102e15750303b1580156102e1575060005460ff166001145b6103495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561036c576000805461ff0019166101001790555b6103b06040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b815250610835565b6103d1336103c06012600a610be8565b6103cc906103e8610bf7565b61086a565b8015610417576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6060603780546101c490610a9c565b6000338161043782866104b2565b9050838110156104975760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610340565b61027a82868684036104ec565b60003361025581858561068a565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b03163b151590565b6001600160a01b03831661054e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610340565b6001600160a01b0382166105af5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610340565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061061c84846104b2565b9050600019811461068457818110156106775760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610340565b61068484848484036104ec565b50505050565b6001600160a01b0383166106ee5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610340565b6001600160a01b0382166107505760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610340565b6001600160a01b038316600090815260336020526040902054818110156107c85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610340565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108289086815260200190565b60405180910390a3610684565b600054610100900460ff1661085c5760405162461bcd60e51b815260040161034090610c16565b6108668282610930565b5050565b6001600160a01b0382166108c05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610340565b80603560008282546108d29190610aec565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b600054610100900460ff166109575760405162461bcd60e51b815260040161034090610c16565b60366109638382610cc5565b50603761092b8282610cc5565b600060208083528351808285015260005b8181101561099d57858101830151858201604001528201610981565b818111156109af576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146109dc57600080fd5b919050565b600080604083850312156109f457600080fd5b6109fd836109c5565b946020939093013593505050565b600080600060608486031215610a2057600080fd5b610a29846109c5565b9250610a37602085016109c5565b9150604084013590509250925092565b600060208284031215610a5957600080fd5b610a62826109c5565b9392505050565b60008060408385031215610a7c57600080fd5b610a85836109c5565b9150610a93602084016109c5565b90509250929050565b600181811c90821680610ab057607f821691505b602082108103610ad057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610aff57610aff610ad6565b500190565b600181815b80851115610b3f578160001904821115610b2557610b25610ad6565b80851615610b3257918102915b93841c9390800290610b09565b509250929050565b600082610b565750600161025b565b81610b635750600061025b565b8160018114610b795760028114610b8357610b9f565b600191505061025b565b60ff841115610b9457610b94610ad6565b50506001821b61025b565b5060208310610133831016604e8410600b8410161715610bc2575081810a61025b565b610bcc8383610b04565b8060001904821115610be057610be0610ad6565b029392505050565b6000610a6260ff841683610b47565b6000816000190483118215151615610c1157610c11610ad6565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b601f82111561092b57600081815260208120601f850160051c81016020861015610c9e5750805b601f850160051c820191505b81811015610cbd57828155600101610caa565b505050505050565b815167ffffffffffffffff811115610cdf57610cdf610c61565b610cf381610ced8454610a9c565b84610c77565b602080601f831160018114610d285760008415610d105750858301515b600019600386901b1c1916600185901b178555610cbd565b600085815260208120601f198616915b82811015610d5757888601518255948401946001909101908401610d38565b5085821015610d755787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212209cac22c944e2ec9de7b92f113f7d69c63985dac3d1558e90bfdb448a28355e7664736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x31 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x5C JUMPI POP PUSH2 0x4A ADDRESS PUSH2 0x132 PUSH1 0x20 SHL PUSH2 0x4DD OR PUSH1 0x20 SHR JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 0x5C JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0xC3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0xE6 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST DUP1 ISZERO PUSH2 0x12C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP PUSH2 0x141 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH2 0xDBB DUP1 PUSH2 0x150 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x12E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0x970 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEA PUSH2 0xE5 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x247 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0xEA PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xA0B JUMP JUMPDEST PUSH2 0x261 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0xEA PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST PUSH2 0xFE PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0xA47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x172 PUSH2 0x2A7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC1 PUSH2 0x41A JUMP JUMPDEST PUSH2 0xEA PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH2 0xEA PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH2 0xFE PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0xA69 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1C4 SWAP1 PUSH2 0xA9C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1F0 SWAP1 PUSH2 0xA9C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x23D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x212 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x23D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x220 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x255 DUP2 DUP6 DUP6 PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x26F DUP6 DUP3 DUP6 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x27A DUP6 DUP6 DUP6 PUSH2 0x68A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x255 DUP2 DUP6 DUP6 PUSH2 0x298 DUP4 DUP4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2A2 SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x2C7 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x2E1 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E1 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x349 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x3B0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x26BCAA37B5B2B7 PUSH1 0xC9 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4D544B PUSH1 0xE8 SHL DUP2 MSTORE POP PUSH2 0x835 JUMP JUMPDEST PUSH2 0x3D1 CALLER PUSH2 0x3C0 PUSH1 0x12 PUSH1 0xA PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x3CC SWAP1 PUSH2 0x3E8 PUSH2 0xBF7 JUMP JUMPDEST PUSH2 0x86A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1C4 SWAP1 PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x437 DUP3 DUP7 PUSH2 0x4B2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x497 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH2 0x27A DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x255 DUP2 DUP6 DUP6 PUSH2 0x68A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61C DUP5 DUP5 PUSH2 0x4B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x684 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x677 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x340 JUMP JUMPDEST PUSH2 0x684 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x4EC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x750 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x7C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x828 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x684 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x85C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x340 SWAP1 PUSH2 0xC16 JUMP JUMPDEST PUSH2 0x866 DUP3 DUP3 PUSH2 0x930 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x8D2 SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x957 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x340 SWAP1 PUSH2 0xC16 JUMP JUMPDEST PUSH1 0x36 PUSH2 0x963 DUP4 DUP3 PUSH2 0xCC5 JUMP JUMPDEST POP PUSH1 0x37 PUSH2 0x92B DUP3 DUP3 PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x99D JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x981 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9FD DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA29 DUP5 PUSH2 0x9C5 JUMP JUMPDEST SWAP3 POP PUSH2 0xA37 PUSH1 0x20 DUP6 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA62 DUP3 PUSH2 0x9C5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA85 DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP2 POP PUSH2 0xA93 PUSH1 0x20 DUP5 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xAB0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xAD0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAFF JUMPI PUSH2 0xAFF PUSH2 0xAD6 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xB3F JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xB25 JUMPI PUSH2 0xB25 PUSH2 0xAD6 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xB32 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xB09 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB56 JUMPI POP PUSH1 0x1 PUSH2 0x25B JUMP JUMPDEST DUP2 PUSH2 0xB63 JUMPI POP PUSH1 0x0 PUSH2 0x25B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xB79 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xB83 JUMPI PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x25B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xB94 JUMPI PUSH2 0xB94 PUSH2 0xAD6 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x25B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBC2 JUMPI POP DUP2 DUP2 EXP PUSH2 0x25B JUMP JUMPDEST PUSH2 0xBCC DUP4 DUP4 PUSH2 0xB04 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xBE0 JUMPI PUSH2 0xBE0 PUSH2 0xAD6 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA62 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0xB47 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC11 JUMPI PUSH2 0xC11 PUSH2 0xAD6 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0xC9E JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCBD JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xCAA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCDF JUMPI PUSH2 0xCDF PUSH2 0xC61 JUMP JUMPDEST PUSH2 0xCF3 DUP2 PUSH2 0xCED DUP5 SLOAD PUSH2 0xA9C JUMP JUMPDEST DUP5 PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xD28 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xD10 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xCBD JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD57 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xD38 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xD75 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xAC 0x22 0xC9 DIFFICULTY 0xE2 0xEC SWAP14 0xE7 0xB9 0x2F GT EXTCODEHASH PUSH30 0x69C63985DAC3D1558E90BFDB448A28355E7664736F6C634300080F003300 ",
							"sourceMap": "374:295:7:-:0;;;638:28;;;;;;;;;-1:-1:-1;3189:19:1;3212:13;;;;;;3211:14;;3259:34;;;;-1:-1:-1;3277:12:1;;3292:1;3277:12;;;;:16;3259:34;3258:108;;;;3300:44;3338:4;3300:29;;;;;:44;;:::i;:::-;3299:45;:66;;;;-1:-1:-1;3348:12:1;;;;;:17;3299:66;3236:204;;;;-1:-1:-1;;;3236:204:1;;216:2:8;3236:204:1;;;198:21:8;255:2;235:18;;;228:30;294:34;274:18;;;267:62;-1:-1:-1;;;345:18:8;;;338:44;399:19;;3236:204:1;;;;;;;;3451:12;:16;;-1:-1:-1;;3451:16:1;3466:1;3451:16;;;3478:67;;;;3513:13;:20;;-1:-1:-1;;3513:20:1;;;;;3478:67;3571:14;3567:102;;;3618:5;3602:21;;-1:-1:-1;;3602:21:1;;;3643:14;;-1:-1:-1;581:36:8;;3643:14:1;;569:2:8;554:18;3643:14:1;;;;;;;3567:102;3178:498;374:295:7;;1221:326:5;-1:-1:-1;;;;;1516:19:5;;:23;;;1221:326::o;429:194:8:-;374:295:7;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__ERC20_init_329": {
									"entryPoint": 2101,
									"id": 329,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@__ERC20_init_unchained_347": {
									"entryPoint": 2352,
									"id": 347,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_afterTokenTransfer_888": {
									"entryPoint": null,
									"id": 888,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_823": {
									"entryPoint": 1260,
									"id": 823,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_beforeTokenTransfer_877": {
									"entryPoint": 2347,
									"id": 877,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_mint_706": {
									"entryPoint": 2154,
									"id": 706,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_msgSender_1308": {
									"entryPoint": null,
									"id": 1308,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_spendAllowance_866": {
									"entryPoint": 1552,
									"id": 866,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transfer_649": {
									"entryPoint": 1674,
									"id": 649,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@allowance_444": {
									"entryPoint": 1202,
									"id": 444,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@approve_469": {
									"entryPoint": 583,
									"id": 469,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@balanceOf_401": {
									"entryPoint": null,
									"id": 401,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@decimals_377": {
									"entryPoint": null,
									"id": 377,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@decreaseAllowance_572": {
									"entryPoint": 1065,
									"id": 572,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@increaseAllowance_531": {
									"entryPoint": 645,
									"id": 531,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@initialize_1354": {
									"entryPoint": 679,
									"id": 1354,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@isContract_1015": {
									"entryPoint": 1245,
									"id": 1015,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_357": {
									"entryPoint": 437,
									"id": 357,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@symbol_367": {
									"entryPoint": 1050,
									"id": 367,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@totalSupply_387": {
									"entryPoint": null,
									"id": 387,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@transferFrom_502": {
									"entryPoint": 609,
									"id": 502,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@transfer_426": {
									"entryPoint": 1188,
									"id": 426,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 2501,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 2631,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 2665,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 2571,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 2529,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 2416,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3094,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 2796,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_helper": {
									"entryPoint": 2820,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"checked_exp_t_uint256_t_uint8": {
									"entryPoint": 3048,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_exp_unsigned": {
									"entryPoint": 2887,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 3063,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 3191,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 3269,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 2716,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 2774,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 3169,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:11119:8",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:8",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "135:476:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "145:12:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "155:2:8",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "149:2:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "173:9:8"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "184:2:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "166:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "166:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "166:21:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "196:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "216:6:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "210:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "210:13:8"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "200:6:8",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "243:9:8"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "254:2:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "239:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "239:18:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "259:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "232:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "232:34:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "275:10:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "284:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "279:1:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "344:90:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "373:9:8"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "384:1:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "369:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "369:17:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "388:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "365:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "365:26:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "407:6:8"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "415:1:8"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "403:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "403:14:8"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "419:2:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "399:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "399:23:8"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "393:5:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "393:30:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "358:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "358:66:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "358:66:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "305:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "308:6:8"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "302:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "302:13:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "316:19:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "318:15:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "327:1:8"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "330:2:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "323:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "323:10:8"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "318:1:8"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "298:3:8",
																"statements": []
															},
															"src": "294:140:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "468:66:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "headStart",
																									"nodeType": "YulIdentifier",
																									"src": "497:9:8"
																								},
																								{
																									"name": "length",
																									"nodeType": "YulIdentifier",
																									"src": "508:6:8"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "493:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "493:22:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "517:2:8",
																							"type": "",
																							"value": "64"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "489:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "489:31:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "522:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "482:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "482:42:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "482:42:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "449:1:8"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "452:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "446:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "446:13:8"
															},
															"nodeType": "YulIf",
															"src": "443:91:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "543:62:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "559:9:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "578:6:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "586:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "574:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "574:15:8"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "595:2:8",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "591:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "591:7:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "570:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "570:29:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "555:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "555:45:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "602:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "551:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "551:54:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "543:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "104:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "115:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "126:4:8",
														"type": ""
													}
												],
												"src": "14:597:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "665:124:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "675:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "697:6:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "684:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "684:20:8"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "675:5:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "767:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "776:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "779:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "769:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "769:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "769:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "726:5:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "737:5:8"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "752:3:8",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "757:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "748:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "748:11:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "761:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "744:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "744:19:8"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "733:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "733:31:8"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "723:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "723:42:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "716:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "716:50:8"
															},
															"nodeType": "YulIf",
															"src": "713:70:8"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "644:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "655:5:8",
														"type": ""
													}
												],
												"src": "616:173:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "881:167:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "927:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "936:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "939:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "929:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "929:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "929:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "902:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "911:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "898:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "898:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "923:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "894:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "894:32:8"
															},
															"nodeType": "YulIf",
															"src": "891:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "952:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "981:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "962:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "962:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "952:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1000:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1027:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1038:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1010:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1010:32:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1000:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "839:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "850:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "862:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "870:6:8",
														"type": ""
													}
												],
												"src": "794:254:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1148:92:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1158:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1170:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1181:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1166:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1166:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1158:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1200:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "1225:6:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1218:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1218:14:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1211:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1211:22:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1193:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1193:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1193:41:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1117:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1128:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1139:4:8",
														"type": ""
													}
												],
												"src": "1053:187:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1346:76:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1356:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1368:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1379:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1364:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1364:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1356:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1398:9:8"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1409:6:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1391:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1391:25:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1391:25:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1315:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1326:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1337:4:8",
														"type": ""
													}
												],
												"src": "1245:177:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1531:224:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1577:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1586:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1589:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1579:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1579:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1579:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1552:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1561:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1548:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1548:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1573:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1544:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1544:32:8"
															},
															"nodeType": "YulIf",
															"src": "1541:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1602:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1631:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1612:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1612:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1602:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1650:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1683:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1694:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1679:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1679:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "1660:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1660:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1650:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1707:42:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1734:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1745:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1730:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1730:18:8"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1717:12:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1717:32:8"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "1707:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1481:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1492:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1504:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1512:6:8",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "1520:6:8",
														"type": ""
													}
												],
												"src": "1427:328:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1857:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1867:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1879:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1890:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1875:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1875:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1867:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1909:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1924:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1932:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1920:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1920:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1902:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "1902:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1902:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1826:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1837:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1848:4:8",
														"type": ""
													}
												],
												"src": "1760:184:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2019:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2065:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2074:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2077:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2067:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2067:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2067:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2040:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2049:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2036:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2036:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2061:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2032:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2032:32:8"
															},
															"nodeType": "YulIf",
															"src": "2029:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2090:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2119:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2100:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2100:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2090:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1985:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1996:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2008:6:8",
														"type": ""
													}
												],
												"src": "1949:186:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2227:173:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2273:16:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2282:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2285:1:8",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2275:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2275:12:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2275:12:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2248:7:8"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2257:9:8"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2244:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2244:23:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2269:2:8",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2240:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2240:32:8"
															},
															"nodeType": "YulIf",
															"src": "2237:52:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2298:39:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2327:9:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2308:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2308:29:8"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2298:6:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2346:48:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2379:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2390:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2375:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2375:18:8"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2356:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2356:38:8"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2346:6:8"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2185:9:8",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2196:7:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2208:6:8",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2216:6:8",
														"type": ""
													}
												],
												"src": "2140:260:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2460:325:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2470:22:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2484:1:8",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2487:4:8"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "2480:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2480:12:8"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "2470:6:8"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2501:38:8",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "2531:4:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2537:1:8",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "2527:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2527:12:8"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "2505:18:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2578:31:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2580:27:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "2594:6:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2602:4:8",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "2590:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2590:17:8"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2580:6:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2558:18:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2551:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2551:26:8"
															},
															"nodeType": "YulIf",
															"src": "2548:61:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2668:111:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2689:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2696:3:8",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2701:10:8",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "2692:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2692:20:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2682:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2682:31:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2682:31:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2733:1:8",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2736:4:8",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2726:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2726:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2726:15:8"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2761:1:8",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2764:4:8",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2754:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2754:15:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2754:15:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "2624:18:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "2647:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2655:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "2644:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2644:14:8"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "2621:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:38:8"
															},
															"nodeType": "YulIf",
															"src": "2618:161:8"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2440:4:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "2449:6:8",
														"type": ""
													}
												],
												"src": "2405:380:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2822:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2839:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2846:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2851:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2842:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2842:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2832:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2832:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2832:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2879:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2882:4:8",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2872:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2872:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2872:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2903:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2906:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2896:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2896:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2896:15:8"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2790:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2970:80:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2997:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "2999:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2999:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2999:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "2986:1:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "2993:1:8"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "2989:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2989:6:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2983:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "2983:13:8"
															},
															"nodeType": "YulIf",
															"src": "2980:39:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3028:16:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "3039:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "3042:1:8"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3035:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3035:9:8"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "3028:3:8"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "2953:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "2956:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "2962:3:8",
														"type": ""
													}
												],
												"src": "2922:128:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3229:236:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3246:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3257:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3239:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3239:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3239:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3280:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3291:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3276:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3276:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3296:2:8",
																		"type": "",
																		"value": "46"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3269:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3269:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3269:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3319:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3330:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3315:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3315:18:8"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3335:34:8",
																		"type": "",
																		"value": "Initializable: contract is alrea"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3308:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3308:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3308:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3390:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3401:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3386:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3386:18:8"
																	},
																	{
																		"hexValue": "647920696e697469616c697a6564",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "3406:16:8",
																		"type": "",
																		"value": "dy initialized"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3379:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3379:44:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3379:44:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3432:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3444:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3455:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "3440:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3440:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3432:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3206:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3220:4:8",
														"type": ""
													}
												],
												"src": "3055:410:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3534:358:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3544:16:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "3559:1:8",
																"type": "",
																"value": "1"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "3548:7:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3569:16:8",
															"value": {
																"name": "power_1",
																"nodeType": "YulIdentifier",
																"src": "3578:7:8"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "3569:5:8"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "3594:13:8",
															"value": {
																"name": "_base",
																"nodeType": "YulIdentifier",
																"src": "3602:5:8"
															},
															"variableNames": [
																{
																	"name": "base",
																	"nodeType": "YulIdentifier",
																	"src": "3594:4:8"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3658:228:8",
																"statements": [
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "3703:22:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [],
																						"functionName": {
																							"name": "panic_error_0x11",
																							"nodeType": "YulIdentifier",
																							"src": "3705:16:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3705:18:8"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "3705:18:8"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "3678:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3692:1:8",
																									"type": "",
																									"value": "0"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "3688:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3688:6:8"
																						},
																						{
																							"name": "base",
																							"nodeType": "YulIdentifier",
																							"src": "3696:4:8"
																						}
																					],
																					"functionName": {
																						"name": "div",
																						"nodeType": "YulIdentifier",
																						"src": "3684:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3684:17:8"
																				}
																			],
																			"functionName": {
																				"name": "gt",
																				"nodeType": "YulIdentifier",
																				"src": "3675:2:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3675:27:8"
																		},
																		"nodeType": "YulIf",
																		"src": "3672:53:8"
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "3764:29:8",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "3766:25:8",
																					"value": {
																						"arguments": [
																							{
																								"name": "power",
																								"nodeType": "YulIdentifier",
																								"src": "3779:5:8"
																							},
																							{
																								"name": "base",
																								"nodeType": "YulIdentifier",
																								"src": "3786:4:8"
																							}
																						],
																						"functionName": {
																							"name": "mul",
																							"nodeType": "YulIdentifier",
																							"src": "3775:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3775:16:8"
																					},
																					"variableNames": [
																						{
																							"name": "power",
																							"nodeType": "YulIdentifier",
																							"src": "3766:5:8"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "3745:8:8"
																				},
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "3755:7:8"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "3741:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3741:22:8"
																		},
																		"nodeType": "YulIf",
																		"src": "3738:55:8"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "3806:23:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "3818:4:8"
																				},
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "3824:4:8"
																				}
																			],
																			"functionName": {
																				"name": "mul",
																				"nodeType": "YulIdentifier",
																				"src": "3814:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3814:15:8"
																		},
																		"variableNames": [
																			{
																				"name": "base",
																				"nodeType": "YulIdentifier",
																				"src": "3806:4:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "3842:34:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "power_1",
																					"nodeType": "YulIdentifier",
																					"src": "3858:7:8"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "3867:8:8"
																				}
																			],
																			"functionName": {
																				"name": "shr",
																				"nodeType": "YulIdentifier",
																				"src": "3854:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3854:22:8"
																		},
																		"variableNames": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "3842:8:8"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "3627:8:8"
																	},
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "3637:7:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3624:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3624:21:8"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "3646:3:8",
																"statements": []
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "3620:3:8",
																"statements": []
															},
															"src": "3616:270:8"
														}
													]
												},
												"name": "checked_exp_helper",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "_base",
														"nodeType": "YulTypedName",
														"src": "3498:5:8",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "3505:8:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "3518:5:8",
														"type": ""
													},
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "3525:4:8",
														"type": ""
													}
												],
												"src": "3470:422:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3956:747:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3994:52:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4008:10:8",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "4017:1:8",
																			"type": "",
																			"value": "1"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "4008:5:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "4031:5:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "3976:8:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3969:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "3969:16:8"
															},
															"nodeType": "YulIf",
															"src": "3966:80:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4079:52:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4093:10:8",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "4102:1:8",
																			"type": "",
																			"value": "0"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "4093:5:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "4116:5:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "4065:4:8"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4058:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4058:12:8"
															},
															"nodeType": "YulIf",
															"src": "4055:76:8"
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "4167:52:8",
																		"statements": [
																			{
																				"nodeType": "YulAssignment",
																				"src": "4181:10:8",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4190:1:8",
																					"type": "",
																					"value": "1"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "4181:5:8"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "4204:5:8"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "4160:59:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4165:1:8",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "4235:123:8",
																		"statements": [
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "4270:22:8",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [],
																								"functionName": {
																									"name": "panic_error_0x11",
																									"nodeType": "YulIdentifier",
																									"src": "4272:16:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4272:18:8"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "4272:18:8"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "4255:8:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4265:3:8",
																							"type": "",
																							"value": "255"
																						}
																					],
																					"functionName": {
																						"name": "gt",
																						"nodeType": "YulIdentifier",
																						"src": "4252:2:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4252:17:8"
																				},
																				"nodeType": "YulIf",
																				"src": "4249:43:8"
																			},
																			{
																				"nodeType": "YulAssignment",
																				"src": "4305:25:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "exponent",
																							"nodeType": "YulIdentifier",
																							"src": "4318:8:8"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "4328:1:8",
																							"type": "",
																							"value": "1"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "4314:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "4314:16:8"
																				},
																				"variableNames": [
																					{
																						"name": "power",
																						"nodeType": "YulIdentifier",
																						"src": "4305:5:8"
																					}
																				]
																			},
																			{
																				"nodeType": "YulLeave",
																				"src": "4343:5:8"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "4228:130:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4233:1:8",
																		"type": "",
																		"value": "2"
																	}
																}
															],
															"expression": {
																"name": "base",
																"nodeType": "YulIdentifier",
																"src": "4147:4:8"
															},
															"nodeType": "YulSwitch",
															"src": "4140:218:8"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4456:70:8",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "4470:28:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "base",
																					"nodeType": "YulIdentifier",
																					"src": "4483:4:8"
																				},
																				{
																					"name": "exponent",
																					"nodeType": "YulIdentifier",
																					"src": "4489:8:8"
																				}
																			],
																			"functionName": {
																				"name": "exp",
																				"nodeType": "YulIdentifier",
																				"src": "4479:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4479:19:8"
																		},
																		"variableNames": [
																			{
																				"name": "power",
																				"nodeType": "YulIdentifier",
																				"src": "4470:5:8"
																			}
																		]
																	},
																	{
																		"nodeType": "YulLeave",
																		"src": "4511:5:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "4380:4:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4386:2:8",
																						"type": "",
																						"value": "11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "4377:2:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4377:12:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "4394:8:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4404:2:8",
																						"type": "",
																						"value": "78"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "4391:2:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4391:16:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4373:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4373:35:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "base",
																						"nodeType": "YulIdentifier",
																						"src": "4417:4:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4423:3:8",
																						"type": "",
																						"value": "307"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "4414:2:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4414:13:8"
																			},
																			{
																				"arguments": [
																					{
																						"name": "exponent",
																						"nodeType": "YulIdentifier",
																						"src": "4432:8:8"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4442:2:8",
																						"type": "",
																						"value": "32"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "4429:2:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4429:16:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4410:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4410:36:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4370:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4370:77:8"
															},
															"nodeType": "YulIf",
															"src": "4367:159:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4535:57:8",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "4577:4:8"
																	},
																	{
																		"name": "exponent",
																		"nodeType": "YulIdentifier",
																		"src": "4583:8:8"
																	}
																],
																"functionName": {
																	"name": "checked_exp_helper",
																	"nodeType": "YulIdentifier",
																	"src": "4558:18:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4558:34:8"
															},
															"variables": [
																{
																	"name": "power_1",
																	"nodeType": "YulTypedName",
																	"src": "4539:7:8",
																	"type": ""
																},
																{
																	"name": "base_1",
																	"nodeType": "YulTypedName",
																	"src": "4548:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4637:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4639:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4639:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4639:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "4607:7:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4624:1:8",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "4620:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4620:6:8"
																			},
																			{
																				"name": "base_1",
																				"nodeType": "YulIdentifier",
																				"src": "4628:6:8"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "4616:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4616:19:8"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4604:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4604:32:8"
															},
															"nodeType": "YulIf",
															"src": "4601:58:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4668:29:8",
															"value": {
																"arguments": [
																	{
																		"name": "power_1",
																		"nodeType": "YulIdentifier",
																		"src": "4681:7:8"
																	},
																	{
																		"name": "base_1",
																		"nodeType": "YulIdentifier",
																		"src": "4690:6:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "4677:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4677:20:8"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "4668:5:8"
																}
															]
														}
													]
												},
												"name": "checked_exp_unsigned",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "3927:4:8",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "3933:8:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "3946:5:8",
														"type": ""
													}
												],
												"src": "3897:806:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4776:72:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4786:56:8",
															"value": {
																"arguments": [
																	{
																		"name": "base",
																		"nodeType": "YulIdentifier",
																		"src": "4816:4:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "exponent",
																				"nodeType": "YulIdentifier",
																				"src": "4826:8:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4836:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4822:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4822:19:8"
																	}
																],
																"functionName": {
																	"name": "checked_exp_unsigned",
																	"nodeType": "YulIdentifier",
																	"src": "4795:20:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4795:47:8"
															},
															"variableNames": [
																{
																	"name": "power",
																	"nodeType": "YulIdentifier",
																	"src": "4786:5:8"
																}
															]
														}
													]
												},
												"name": "checked_exp_t_uint256_t_uint8",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "base",
														"nodeType": "YulTypedName",
														"src": "4747:4:8",
														"type": ""
													},
													{
														"name": "exponent",
														"nodeType": "YulTypedName",
														"src": "4753:8:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "power",
														"nodeType": "YulTypedName",
														"src": "4766:5:8",
														"type": ""
													}
												],
												"src": "4708:140:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4905:116:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4964:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "4966:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4966:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4966:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4936:1:8"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "4929:6:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4929:9:8"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "4922:6:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4922:17:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4944:1:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4955:1:8",
																								"type": "",
																								"value": "0"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "4951:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4951:6:8"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "4959:1:8"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "4947:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4947:14:8"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4941:2:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4941:21:8"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "4918:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "4918:45:8"
															},
															"nodeType": "YulIf",
															"src": "4915:71:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4995:20:8",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "5010:1:8"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "5013:1:8"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "5006:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5006:9:8"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "4995:7:8"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "4884:1:8",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "4887:1:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "4893:7:8",
														"type": ""
													}
												],
												"src": "4853:168:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5133:87:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5143:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5155:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5166:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5151:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5151:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5143:4:8"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5185:9:8"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "5200:6:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5208:4:8",
																				"type": "",
																				"value": "0xff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "5196:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5196:17:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5178:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5178:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5178:36:8"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5102:9:8",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5113:6:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5124:4:8",
														"type": ""
													}
												],
												"src": "5026:194:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5399:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5416:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5427:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5409:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5409:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5409:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5450:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5461:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5446:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5446:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5466:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5439:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5439:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5439:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5489:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5500:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5485:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5485:18:8"
																	},
																	{
																		"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5505:34:8",
																		"type": "",
																		"value": "ERC20: decreased allowance below"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5478:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5478:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5478:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5560:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5571:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5556:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5556:18:8"
																	},
																	{
																		"hexValue": "207a65726f",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5576:7:8",
																		"type": "",
																		"value": " zero"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5549:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5549:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5549:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5593:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5605:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5616:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5601:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5601:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5593:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5376:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5390:4:8",
														"type": ""
													}
												],
												"src": "5225:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5805:226:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5822:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5833:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5815:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5815:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5815:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5856:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5867:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5852:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5852:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5872:2:8",
																		"type": "",
																		"value": "36"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5845:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5845:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5845:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5895:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5906:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5891:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5891:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f20616464",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5911:34:8",
																		"type": "",
																		"value": "ERC20: approve from the zero add"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5884:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5884:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5884:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5966:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5977:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5962:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5962:18:8"
																	},
																	{
																		"hexValue": "72657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "5982:6:8",
																		"type": "",
																		"value": "ress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5955:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "5955:34:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5955:34:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5998:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6010:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6021:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6006:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6006:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5998:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5782:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5796:4:8",
														"type": ""
													}
												],
												"src": "5631:400:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6210:224:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6227:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6238:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6220:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6220:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6220:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6261:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6272:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6257:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6257:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6277:2:8",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6250:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6250:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6250:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6300:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6311:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6296:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6296:18:8"
																	},
																	{
																		"hexValue": "45524332303a20617070726f766520746f20746865207a65726f206164647265",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6316:34:8",
																		"type": "",
																		"value": "ERC20: approve to the zero addre"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6289:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6289:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6289:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6371:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6382:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6367:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6367:18:8"
																	},
																	{
																		"hexValue": "7373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6387:4:8",
																		"type": "",
																		"value": "ss"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6360:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6360:32:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6360:32:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6401:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6413:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6424:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6409:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6409:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6401:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6187:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6201:4:8",
														"type": ""
													}
												],
												"src": "6036:398:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6613:179:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6630:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6641:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6623:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6623:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6623:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6664:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6675:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6660:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6660:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6680:2:8",
																		"type": "",
																		"value": "29"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6653:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6653:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6653:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6703:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6714:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6699:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6699:18:8"
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "6719:31:8",
																		"type": "",
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6692:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6692:59:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6692:59:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6760:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6772:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6783:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6768:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6768:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "6760:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6590:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6604:4:8",
														"type": ""
													}
												],
												"src": "6439:353:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6971:227:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6988:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6999:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6981:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "6981:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6981:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7022:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7033:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7018:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7018:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7038:2:8",
																		"type": "",
																		"value": "37"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7011:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7011:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7011:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7061:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7072:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7057:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7057:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f206164",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7077:34:8",
																		"type": "",
																		"value": "ERC20: transfer from the zero ad"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7050:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7050:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7050:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7132:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7143:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7128:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7128:18:8"
																	},
																	{
																		"hexValue": "6472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7148:7:8",
																		"type": "",
																		"value": "dress"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7121:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7121:35:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7121:35:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7165:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7177:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7188:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7173:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7173:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7165:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6948:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6962:4:8",
														"type": ""
													}
												],
												"src": "6797:401:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7377:225:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7394:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7405:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7387:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7387:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7387:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7428:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7439:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7424:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7424:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7444:2:8",
																		"type": "",
																		"value": "35"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7417:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7417:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7417:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7467:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7478:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7463:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7463:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7483:34:8",
																		"type": "",
																		"value": "ERC20: transfer to the zero addr"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7456:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7456:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7456:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7538:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7549:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7534:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7534:18:8"
																	},
																	{
																		"hexValue": "657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7554:5:8",
																		"type": "",
																		"value": "ess"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7527:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7527:33:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7527:33:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7569:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7581:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7592:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7577:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7577:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7569:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7354:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7368:4:8",
														"type": ""
													}
												],
												"src": "7203:399:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7781:228:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7798:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7809:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7791:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7791:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7791:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7832:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7843:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7828:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7828:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7848:2:8",
																		"type": "",
																		"value": "38"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7821:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7821:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7821:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7871:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7882:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7867:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7867:18:8"
																	},
																	{
																		"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7887:34:8",
																		"type": "",
																		"value": "ERC20: transfer amount exceeds b"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7860:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7860:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7860:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7942:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7953:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7938:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7938:18:8"
																	},
																	{
																		"hexValue": "616c616e6365",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "7958:8:8",
																		"type": "",
																		"value": "alance"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7931:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7931:36:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7931:36:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7976:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7988:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7999:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7984:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "7984:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7976:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7758:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7772:4:8",
														"type": ""
													}
												],
												"src": "7607:402:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8188:233:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8205:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8216:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8198:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8198:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8198:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8239:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8250:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8235:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8235:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8255:2:8",
																		"type": "",
																		"value": "43"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8228:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8228:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8228:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8278:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8289:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8274:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8274:18:8"
																	},
																	{
																		"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f742069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8294:34:8",
																		"type": "",
																		"value": "Initializable: contract is not i"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8267:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8267:62:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8267:62:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8349:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8360:2:8",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8345:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8345:18:8"
																	},
																	{
																		"hexValue": "6e697469616c697a696e67",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8365:13:8",
																		"type": "",
																		"value": "nitializing"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8338:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8338:41:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8338:41:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8388:27:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8400:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8411:3:8",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8396:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8396:19:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8388:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8165:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8179:4:8",
														"type": ""
													}
												],
												"src": "8014:407:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8600:181:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8617:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8628:2:8",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8610:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8610:21:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8610:21:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8651:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8662:2:8",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8647:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8647:18:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8667:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8640:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8640:30:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8640:30:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "8690:9:8"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8701:2:8",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "8686:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8686:18:8"
																	},
																	{
																		"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "8706:33:8",
																		"type": "",
																		"value": "ERC20: mint to the zero address"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8679:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8679:61:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8679:61:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "8749:26:8",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "8761:9:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8772:2:8",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "8757:3:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8757:18:8"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "8749:4:8"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "8577:9:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "8591:4:8",
														"type": ""
													}
												],
												"src": "8426:355:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8818:95:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8835:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8842:3:8",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "8847:10:8",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "8838:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "8838:20:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8828:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8828:31:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8828:31:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8875:1:8",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8878:4:8",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8868:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8868:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8868:15:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8899:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8902:4:8",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "8892:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8892:15:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8892:15:8"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "8786:127:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "8974:65:8",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "8991:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "8994:3:8"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "8984:6:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "8984:14:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "8984:14:8"
														},
														{
															"nodeType": "YulAssignment",
															"src": "9007:26:8",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9025:1:8",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9028:4:8",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "9015:9:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9015:18:8"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "9007:4:8"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "8957:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "8965:4:8",
														"type": ""
													}
												],
												"src": "8918:121:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9125:464:8",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9158:425:8",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9172:11:8",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "9182:1:8",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "9176:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "9203:2:8"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "9207:5:8"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "9196:6:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9196:17:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9196:17:8"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9226:31:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "9248:2:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9252:4:8",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "9238:9:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9238:19:8"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "9230:4:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9270:57:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "9293:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9303:1:8",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "9310:10:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "9322:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "9306:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9306:19:8"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "9299:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9299:27:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9289:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9289:38:8"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "9274:11:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "9364:23:8",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "9366:19:8",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "9381:4:8"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "9366:11:8"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "9346:10:8"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "9358:4:8",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "9343:2:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9343:20:8"
																		},
																		"nodeType": "YulIf",
																		"src": "9340:47:8"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9400:41:8",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "9414:4:8"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "9424:1:8",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "9431:3:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "9436:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "9427:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "9427:12:8"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "9420:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "9420:20:8"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "9410:3:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9410:31:8"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "9404:2:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "9454:24:8",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "9467:11:8"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "9458:5:8",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "9552:21:8",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "9561:5:8"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "9568:2:8"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "9554:6:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9554:17:8"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "9554:17:8"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "9502:5:8"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "9509:2:8"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "9499:2:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9499:13:8"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "9513:26:8",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "9515:22:8",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "9528:5:8"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "9535:1:8",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "9524:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9524:13:8"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "9515:5:8"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "9495:3:8",
																			"statements": []
																		},
																		"src": "9491:82:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "9141:3:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9146:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9138:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9138:11:8"
															},
															"nodeType": "YulIf",
															"src": "9135:448:8"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "9097:5:8",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "9104:3:8",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "9109:10:8",
														"type": ""
													}
												],
												"src": "9044:545:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9679:81:8",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "9689:65:8",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "9704:4:8"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "9722:1:8",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "9725:3:8"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "9718:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9718:11:8"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "9735:1:8",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "9731:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "9731:6:8"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "9714:3:8"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "9714:24:8"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "9710:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "9710:29:8"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "9700:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9700:40:8"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "9746:1:8",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "9749:3:8"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "9742:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "9742:11:8"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "9697:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9697:57:8"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "9689:4:8"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "9656:4:8",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "9662:3:8",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "9670:4:8",
														"type": ""
													}
												],
												"src": "9594:166:8"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "9861:1256:8",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "9871:24:8",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "9891:3:8"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "9885:5:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9885:10:8"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "9875:6:8",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "9938:22:8",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "9940:16:8"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "9940:18:8"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "9940:18:8"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "9910:6:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "9918:18:8",
																		"type": "",
																		"value": "0xffffffffffffffff"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "9907:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9907:30:8"
															},
															"nodeType": "YulIf",
															"src": "9904:56:8"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "10013:4:8"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "10051:4:8"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "10045:5:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "10045:11:8"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "10019:25:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "10019:38:8"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "10059:6:8"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "9969:43:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "9969:97:8"
															},
															"nodeType": "YulExpressionStatement",
															"src": "9969:97:8"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10075:18:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10092:1:8",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "10079:9:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "10102:23:8",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "10121:4:8",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "10106:11:8",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "10134:24:8",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "10147:11:8"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "10134:9:8"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "10204:656:8",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "10218:35:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "10237:6:8"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "10249:2:8",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "10245:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10245:7:8"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "10233:3:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10233:20:8"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "10222:7:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "10266:49:8",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "10310:4:8"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "10280:29:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10280:35:8"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "10270:6:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "10328:10:8",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10337:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "10332:1:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "10415:172:8",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "10440:6:8"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "10458:3:8"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "10463:9:8"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "10454:3:8"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "10454:19:8"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "10448:5:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "10448:26:8"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "10433:6:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10433:42:8"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "10433:42:8"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "10492:24:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "10506:6:8"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "10514:1:8",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "10502:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10502:14:8"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "10492:6:8"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "10533:40:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "10550:9:8"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "10561:11:8"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "10546:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10546:27:8"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "10533:9:8"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "10362:1:8"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "10365:7:8"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "10359:2:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10359:14:8"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "10374:28:8",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "10376:24:8",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "10385:1:8"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "10388:11:8"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "10381:3:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10381:19:8"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "10376:1:8"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "10355:3:8",
																					"statements": []
																				},
																				"src": "10351:236:8"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "10635:166:8",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "10653:43:8",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "10680:3:8"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "10685:9:8"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "10676:3:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "10676:19:8"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "10670:5:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10670:26:8"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "10657:9:8",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "10720:6:8"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "10732:9:8"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "10759:1:8",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "10762:6:8"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "10755:3:8"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "10755:14:8"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "10771:3:8",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "10751:3:8"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "10751:24:8"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "10781:1:8",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "10777:3:8"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "10777:6:8"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "10747:3:8"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "10747:37:8"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "10743:3:8"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "10743:42:8"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "10728:3:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "10728:58:8"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "10713:6:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10713:74:8"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "10713:74:8"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "10606:7:8"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "10615:6:8"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "10603:2:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10603:19:8"
																				},
																				"nodeType": "YulIf",
																				"src": "10600:201:8"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "10821:4:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "10835:1:8",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "10838:6:8"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "10831:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "10831:14:8"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "10847:1:8",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "10827:3:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "10827:22:8"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "10814:6:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "10814:36:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "10814:36:8"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "10197:663:8",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10202:1:8",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "10877:234:8",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "10891:14:8",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "10904:1:8",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "10895:5:8",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "10940:67:8",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "10958:35:8",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "10977:3:8"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "10982:9:8"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "10973:3:8"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "10973:19:8"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "10967:5:8"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "10967:26:8"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "10958:5:8"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "10921:6:8"
																				},
																				"nodeType": "YulIf",
																				"src": "10918:89:8"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "11027:4:8"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "11086:5:8"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "11093:6:8"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "11033:52:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "11033:67:8"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "11020:6:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "11020:81:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "11020:81:8"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "10869:242:8",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "10177:6:8"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "10185:2:8",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "10174:2:8"
																},
																"nodeType": "YulFunctionCall",
																"src": "10174:14:8"
															},
															"nodeType": "YulSwitch",
															"src": "10167:944:8"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "9846:4:8",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "9852:3:8",
														"type": ""
													}
												],
												"src": "9765:1352:8"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        mstore(headStart, _1)\n        let length := mload(value0)\n        mstore(add(headStart, _1), length)\n        let i := 0\n        for { } lt(i, length) { i := add(i, _1) }\n        {\n            mstore(add(add(headStart, i), 64), mload(add(add(value0, i), _1)))\n        }\n        if gt(i, length)\n        {\n            mstore(add(add(headStart, length), 64), 0)\n        }\n        tail := add(add(headStart, and(add(length, 31), not(31))), 64)\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_uint8__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function abi_encode_tuple_t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 46)\n        mstore(add(headStart, 64), \"Initializable: contract is alrea\")\n        mstore(add(headStart, 96), \"dy initialized\")\n        tail := add(headStart, 128)\n    }\n    function checked_exp_helper(_base, exponent) -> power, base\n    {\n        let power_1 := 1\n        power := power_1\n        base := _base\n        for { } gt(exponent, power_1) { }\n        {\n            if gt(base, div(not(0), base)) { panic_error_0x11() }\n            if and(exponent, power_1) { power := mul(power, base) }\n            base := mul(base, base)\n            exponent := shr(power_1, exponent)\n        }\n    }\n    function checked_exp_unsigned(base, exponent) -> power\n    {\n        if iszero(exponent)\n        {\n            power := 1\n            leave\n        }\n        if iszero(base)\n        {\n            power := 0\n            leave\n        }\n        switch base\n        case 1 {\n            power := 1\n            leave\n        }\n        case 2 {\n            if gt(exponent, 255) { panic_error_0x11() }\n            power := shl(exponent, 1)\n            leave\n        }\n        if or(and(lt(base, 11), lt(exponent, 78)), and(lt(base, 307), lt(exponent, 32)))\n        {\n            power := exp(base, exponent)\n            leave\n        }\n        let power_1, base_1 := checked_exp_helper(base, exponent)\n        if gt(power_1, div(not(0), base_1)) { panic_error_0x11() }\n        power := mul(power_1, base_1)\n    }\n    function checked_exp_t_uint256_t_uint8(base, exponent) -> power\n    {\n        power := checked_exp_unsigned(base, and(exponent, 0xff))\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint8__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xff))\n    }\n    function abi_encode_tuple_t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: decreased allowance below\")\n        mstore(add(headStart, 96), \" zero\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 36)\n        mstore(add(headStart, 64), \"ERC20: approve from the zero add\")\n        mstore(add(headStart, 96), \"ress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ERC20: approve to the zero addre\")\n        mstore(add(headStart, 96), \"ss\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"ERC20: insufficient allowance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"ERC20: transfer from the zero ad\")\n        mstore(add(headStart, 96), \"dress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 35)\n        mstore(add(headStart, 64), \"ERC20: transfer to the zero addr\")\n        mstore(add(headStart, 96), \"ess\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"ERC20: transfer amount exceeds b\")\n        mstore(add(headStart, 96), \"alance\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 43)\n        mstore(add(headStart, 64), \"Initializable: contract is not i\")\n        mstore(add(headStart, 96), \"nitializing\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ERC20: mint to the zero address\")\n        tail := add(headStart, 96)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}",
									"id": 8,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a08231146101415780638129fc1c1461016a57806395d89b4114610174578063a457c2d71461017c578063a9059cbb1461018f578063dd62ed3e146101a257600080fd5b806306fdde03146100b9578063095ea7b3146100d757806318160ddd146100fa57806323b872dd1461010c578063313ce5671461011f578063395093511461012e575b600080fd5b6100c16101b5565b6040516100ce9190610970565b60405180910390f35b6100ea6100e53660046109e1565b610247565b60405190151581526020016100ce565b6035545b6040519081526020016100ce565b6100ea61011a366004610a0b565b610261565b604051601281526020016100ce565b6100ea61013c3660046109e1565b610285565b6100fe61014f366004610a47565b6001600160a01b031660009081526033602052604090205490565b6101726102a7565b005b6100c161041a565b6100ea61018a3660046109e1565b610429565b6100ea61019d3660046109e1565b6104a4565b6100fe6101b0366004610a69565b6104b2565b6060603680546101c490610a9c565b80601f01602080910402602001604051908101604052809291908181526020018280546101f090610a9c565b801561023d5780601f106102125761010080835404028352916020019161023d565b820191906000526020600020905b81548152906001019060200180831161022057829003601f168201915b5050505050905090565b6000336102558185856104ec565b60019150505b92915050565b60003361026f858285610610565b61027a85858561068a565b506001949350505050565b60003361025581858561029883836104b2565b6102a29190610aec565b6104ec565b600054610100900460ff16158080156102c75750600054600160ff909116105b806102e15750303b1580156102e1575060005460ff166001145b6103495760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801561036c576000805461ff0019166101001790555b6103b06040518060400160405280600781526020016626bcaa37b5b2b760c91b815250604051806040016040528060038152602001624d544b60e81b815250610835565b6103d1336103c06012600a610be8565b6103cc906103e8610bf7565b61086a565b8015610417576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b6060603780546101c490610a9c565b6000338161043782866104b2565b9050838110156104975760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152608401610340565b61027a82868684036104ec565b60003361025581858561068a565b6001600160a01b03918216600090815260346020908152604080832093909416825291909152205490565b6001600160a01b03163b151590565b6001600160a01b03831661054e5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610340565b6001600160a01b0382166105af5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610340565b6001600160a01b0383811660008181526034602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b600061061c84846104b2565b9050600019811461068457818110156106775760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610340565b61068484848484036104ec565b50505050565b6001600160a01b0383166106ee5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608401610340565b6001600160a01b0382166107505760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610340565b6001600160a01b038316600090815260336020526040902054818110156107c85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608401610340565b6001600160a01b0380851660008181526033602052604080822086860390559286168082529083902080548601905591517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906108289086815260200190565b60405180910390a3610684565b600054610100900460ff1661085c5760405162461bcd60e51b815260040161034090610c16565b6108668282610930565b5050565b6001600160a01b0382166108c05760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606401610340565b80603560008282546108d29190610aec565b90915550506001600160a01b0382166000818152603360209081526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b600054610100900460ff166109575760405162461bcd60e51b815260040161034090610c16565b60366109638382610cc5565b50603761092b8282610cc5565b600060208083528351808285015260005b8181101561099d57858101830151858201604001528201610981565b818111156109af576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146109dc57600080fd5b919050565b600080604083850312156109f457600080fd5b6109fd836109c5565b946020939093013593505050565b600080600060608486031215610a2057600080fd5b610a29846109c5565b9250610a37602085016109c5565b9150604084013590509250925092565b600060208284031215610a5957600080fd5b610a62826109c5565b9392505050565b60008060408385031215610a7c57600080fd5b610a85836109c5565b9150610a93602084016109c5565b90509250929050565b600181811c90821680610ab057607f821691505b602082108103610ad057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60008219821115610aff57610aff610ad6565b500190565b600181815b80851115610b3f578160001904821115610b2557610b25610ad6565b80851615610b3257918102915b93841c9390800290610b09565b509250929050565b600082610b565750600161025b565b81610b635750600061025b565b8160018114610b795760028114610b8357610b9f565b600191505061025b565b60ff841115610b9457610b94610ad6565b50506001821b61025b565b5060208310610133831016604e8410600b8410161715610bc2575081810a61025b565b610bcc8383610b04565b8060001904821115610be057610be0610ad6565b029392505050565b6000610a6260ff841683610b47565b6000816000190483118215151615610c1157610c11610ad6565b500290565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b634e487b7160e01b600052604160045260246000fd5b601f82111561092b57600081815260208120601f850160051c81016020861015610c9e5750805b601f850160051c820191505b81811015610cbd57828155600101610caa565b505050505050565b815167ffffffffffffffff811115610cdf57610cdf610c61565b610cf381610ced8454610a9c565b84610c77565b602080601f831160018114610d285760008415610d105750858301515b600019600386901b1c1916600185901b178555610cbd565b600085815260208120601f198616915b82811015610d5757888601518255948401946001909101908401610d38565b5085821015610d755787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea26469706673582212209cac22c944e2ec9de7b92f113f7d69c63985dac3d1558e90bfdb448a28355e7664736f6c634300080f0033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xB4 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x141 JUMPI DUP1 PUSH4 0x8129FC1C EQ PUSH2 0x16A JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0xA457C2D7 EQ PUSH2 0x17C JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x18F JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0xB9 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xD7 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xFA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x11F JUMPI DUP1 PUSH4 0x39509351 EQ PUSH2 0x12E JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC1 PUSH2 0x1B5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xCE SWAP2 SWAP1 PUSH2 0x970 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xEA PUSH2 0xE5 CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x247 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH1 0x35 SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0xEA PUSH2 0x11A CALLDATASIZE PUSH1 0x4 PUSH2 0xA0B JUMP JUMPDEST PUSH2 0x261 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x12 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xCE JUMP JUMPDEST PUSH2 0xEA PUSH2 0x13C CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x285 JUMP JUMPDEST PUSH2 0xFE PUSH2 0x14F CALLDATASIZE PUSH1 0x4 PUSH2 0xA47 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x172 PUSH2 0x2A7 JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC1 PUSH2 0x41A JUMP JUMPDEST PUSH2 0xEA PUSH2 0x18A CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x429 JUMP JUMPDEST PUSH2 0xEA PUSH2 0x19D CALLDATASIZE PUSH1 0x4 PUSH2 0x9E1 JUMP JUMPDEST PUSH2 0x4A4 JUMP JUMPDEST PUSH2 0xFE PUSH2 0x1B0 CALLDATASIZE PUSH1 0x4 PUSH2 0xA69 JUMP JUMPDEST PUSH2 0x4B2 JUMP JUMPDEST PUSH1 0x60 PUSH1 0x36 DUP1 SLOAD PUSH2 0x1C4 SWAP1 PUSH2 0xA9C JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1F0 SWAP1 PUSH2 0xA9C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x23D JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x212 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x23D JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x220 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x255 DUP2 DUP6 DUP6 PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x26F DUP6 DUP3 DUP6 PUSH2 0x610 JUMP JUMPDEST PUSH2 0x27A DUP6 DUP6 DUP6 PUSH2 0x68A JUMP JUMPDEST POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x255 DUP2 DUP6 DUP6 PUSH2 0x298 DUP4 DUP4 PUSH2 0x4B2 JUMP JUMPDEST PUSH2 0x2A2 SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO DUP1 DUP1 ISZERO PUSH2 0x2C7 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xFF SWAP1 SWAP2 AND LT JUMPDEST DUP1 PUSH2 0x2E1 JUMPI POP ADDRESS EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2E1 JUMPI POP PUSH1 0x0 SLOAD PUSH1 0xFF AND PUSH1 0x1 EQ JUMPDEST PUSH2 0x349 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E747261637420697320616C726561 PUSH1 0x44 DUP3 ADD MSTORE PUSH14 0x191E481A5B9A5D1A585B1A5E9959 PUSH1 0x92 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE DUP1 ISZERO PUSH2 0x36C JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 OR SWAP1 SSTORE JUMPDEST PUSH2 0x3B0 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x7 DUP2 MSTORE PUSH1 0x20 ADD PUSH7 0x26BCAA37B5B2B7 PUSH1 0xC9 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x3 DUP2 MSTORE PUSH1 0x20 ADD PUSH3 0x4D544B PUSH1 0xE8 SHL DUP2 MSTORE POP PUSH2 0x835 JUMP JUMPDEST PUSH2 0x3D1 CALLER PUSH2 0x3C0 PUSH1 0x12 PUSH1 0xA PUSH2 0xBE8 JUMP JUMPDEST PUSH2 0x3CC SWAP1 PUSH2 0x3E8 PUSH2 0xBF7 JUMP JUMPDEST PUSH2 0x86A JUMP JUMPDEST DUP1 ISZERO PUSH2 0x417 JUMPI PUSH1 0x0 DUP1 SLOAD PUSH2 0xFF00 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x37 DUP1 SLOAD PUSH2 0x1C4 SWAP1 PUSH2 0xA9C JUMP JUMPDEST PUSH1 0x0 CALLER DUP2 PUSH2 0x437 DUP3 DUP7 PUSH2 0x4B2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 0x497 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x207A65726F PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH2 0x27A DUP3 DUP7 DUP7 DUP5 SUB PUSH2 0x4EC JUMP JUMPDEST PUSH1 0x0 CALLER PUSH2 0x255 DUP2 DUP6 DUP6 PUSH2 0x68A JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x54E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP1 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F76652066726F6D20746865207A65726F20616464 PUSH1 0x44 DUP3 ADD MSTORE PUSH4 0x72657373 PUSH1 0xE0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x5AF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20617070726F766520746F20746865207A65726F206164647265 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x7373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x34 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61C DUP5 DUP5 PUSH2 0x4B2 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 NOT DUP2 EQ PUSH2 0x684 JUMPI DUP2 DUP2 LT ISZERO PUSH2 0x677 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x340 JUMP JUMPDEST PUSH2 0x684 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 0x4EC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0x6EE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E736665722066726F6D20746865207A65726F206164 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6472657373 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x750 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x23 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220746F20746865207A65726F2061646472 PUSH1 0x44 DUP3 ADD MSTORE PUSH3 0x657373 PUSH1 0xE8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 DUP2 LT ISZERO PUSH2 0x7C8 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A207472616E7366657220616D6F756E7420657863656564732062 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x616C616E6365 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x340 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 PUSH2 0x828 SWAP1 DUP7 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x684 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x85C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x340 SWAP1 PUSH2 0xC16 JUMP JUMPDEST PUSH2 0x866 DUP3 DUP3 PUSH2 0x930 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x8C0 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45524332303A206D696E7420746F20746865207A65726F206164647265737300 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x340 JUMP JUMPDEST DUP1 PUSH1 0x35 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x8D2 SWAP2 SWAP1 PUSH2 0xAEC JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x33 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE MLOAD DUP5 DUP2 MSTORE PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND PUSH2 0x957 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x340 SWAP1 PUSH2 0xC16 JUMP JUMPDEST PUSH1 0x36 PUSH2 0x963 DUP4 DUP3 PUSH2 0xCC5 JUMP JUMPDEST POP PUSH1 0x37 PUSH2 0x92B DUP3 DUP3 PUSH2 0xCC5 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x99D JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 0x40 ADD MSTORE DUP3 ADD PUSH2 0x981 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 0x9AF JUMPI PUSH1 0x0 PUSH1 0x40 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x40 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x9DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9FD DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xA20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA29 DUP5 PUSH2 0x9C5 JUMP JUMPDEST SWAP3 POP PUSH2 0xA37 PUSH1 0x20 DUP6 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA62 DUP3 PUSH2 0x9C5 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA85 DUP4 PUSH2 0x9C5 JUMP JUMPDEST SWAP2 POP PUSH2 0xA93 PUSH1 0x20 DUP5 ADD PUSH2 0x9C5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0xAB0 JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0xAD0 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0xAFF JUMPI PUSH2 0xAFF PUSH2 0xAD6 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xB3F JUMPI DUP2 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xB25 JUMPI PUSH2 0xB25 PUSH2 0xAD6 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 0xB32 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 0xB09 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0xB56 JUMPI POP PUSH1 0x1 PUSH2 0x25B JUMP JUMPDEST DUP2 PUSH2 0xB63 JUMPI POP PUSH1 0x0 PUSH2 0x25B JUMP JUMPDEST DUP2 PUSH1 0x1 DUP2 EQ PUSH2 0xB79 JUMPI PUSH1 0x2 DUP2 EQ PUSH2 0xB83 JUMPI PUSH2 0xB9F JUMP JUMPDEST PUSH1 0x1 SWAP2 POP POP PUSH2 0x25B JUMP JUMPDEST PUSH1 0xFF DUP5 GT ISZERO PUSH2 0xB94 JUMPI PUSH2 0xB94 PUSH2 0xAD6 JUMP JUMPDEST POP POP PUSH1 0x1 DUP3 SHL PUSH2 0x25B JUMP JUMPDEST POP PUSH1 0x20 DUP4 LT PUSH2 0x133 DUP4 LT AND PUSH1 0x4E DUP5 LT PUSH1 0xB DUP5 LT AND OR ISZERO PUSH2 0xBC2 JUMPI POP DUP2 DUP2 EXP PUSH2 0x25B JUMP JUMPDEST PUSH2 0xBCC DUP4 DUP4 PUSH2 0xB04 JUMP JUMPDEST DUP1 PUSH1 0x0 NOT DIV DUP3 GT ISZERO PUSH2 0xBE0 JUMPI PUSH2 0xBE0 PUSH2 0xAD6 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0xA62 PUSH1 0xFF DUP5 AND DUP4 PUSH2 0xB47 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0xC11 JUMPI PUSH2 0xC11 PUSH2 0xAD6 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x2B SWAP1 DUP3 ADD MSTORE PUSH32 0x496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069 PUSH1 0x40 DUP3 ADD MSTORE PUSH11 0x6E697469616C697A696E67 PUSH1 0xA8 SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x92B JUMPI PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0xC9E JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0xCBD JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0xCAA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xCDF JUMPI PUSH2 0xCDF PUSH2 0xC61 JUMP JUMPDEST PUSH2 0xCF3 DUP2 PUSH2 0xCED DUP5 SLOAD PUSH2 0xA9C JUMP JUMPDEST DUP5 PUSH2 0xC77 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH2 0xD28 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH2 0xD10 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH2 0xCBD JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0xD57 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH2 0xD38 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH2 0xD75 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP13 0xAC 0x22 0xC9 DIFFICULTY 0xE2 0xEC SWAP14 0xE7 0xB9 0x2F GT EXTCODEHASH PUSH30 0x69C63985DAC3D1558E90BFDB448A28355E7664736F6C634300080F003300 ",
							"sourceMap": "374:295:7:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2557:100:2;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;4908:201;;;;;;:::i;:::-;;:::i;:::-;;;1218:14:8;;1211:22;1193:41;;1181:2;1166:18;4908:201:2;1053:187:8;3677:108:2;3765:12;;3677:108;;;1391:25:8;;;1379:2;1364:18;3677:108:2;1245:177:8;5689:295:2;;;;;;:::i;:::-;;:::i;3519:93::-;;;3602:2;1902:36:8;;1890:2;1875:18;3519:93:2;1760:184:8;6393:238:2;;;;;;:::i;:::-;;:::i;3848:127::-;;;;;;:::i;:::-;-1:-1:-1;;;;;3949:18:2;3922:7;3949:18;;;:9;:18;;;;;;;3848:127;435:141:7;;;:::i;:::-;;2776:104:2;;;:::i;7134:436::-;;;;;;:::i;:::-;;:::i;4181:193::-;;;;;;:::i;:::-;;:::i;4437:151::-;;;;;;:::i;:::-;;:::i;2557:100::-;2611:13;2644:5;2637:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2557:100;:::o;4908:201::-;4991:4;952:10:6;5047:32:2;952:10:6;5063:7:2;5072:6;5047:8;:32::i;:::-;5097:4;5090:11;;;4908:201;;;;;:::o;5689:295::-;5820:4;952:10:6;5878:38:2;5894:4;952:10:6;5909:6:2;5878:15;:38::i;:::-;5927:27;5937:4;5943:2;5947:6;5927:9;:27::i;:::-;-1:-1:-1;5972:4:2;;5689:295;-1:-1:-1;;;;5689:295:2:o;6393:238::-;6481:4;952:10:6;6537:64:2;952:10:6;6553:7:2;6590:10;6562:25;952:10:6;6553:7:2;6562:9;:25::i;:::-;:38;;;;:::i;:::-;6537:8;:64::i;435:141:7:-;3189:19:1;3212:13;;;;;;3211:14;;3259:34;;;;-1:-1:-1;3277:12:1;;3292:1;3277:12;;;;:16;3259:34;3258:108;;;-1:-1:-1;3338:4:1;1516:19:5;:23;;;3299:66:1;;-1:-1:-1;3348:12:1;;;;;:17;3299:66;3236:204;;;;-1:-1:-1;;;3236:204:1;;3257:2:8;3236:204:1;;;3239:21:8;3296:2;3276:18;;;3269:30;3335:34;3315:18;;;3308:62;-1:-1:-1;;;3386:18:8;;;3379:44;3440:19;;3236:204:1;;;;;;;;;3451:12;:16;;-1:-1:-1;;3451:16:1;3466:1;3451:16;;;3478:67;;;;3513:13;:20;;-1:-1:-1;;3513:20:1;;;;;3478:67;485:30:7::1;;;;;;;;;;;;;;-1:-1:-1::0;;;485:30:7::1;;::::0;::::1;;;;;;;;;;;;;-1:-1:-1::0;;;485:30:7::1;;::::0;:12:::1;:30::i;:::-;526:42;532:10;551:16;3602:2:2::0;551::7::1;:16;:::i;:::-;544:23;::::0;:4:::1;:23;:::i;:::-;526:5;:42::i;:::-;3571:14:1::0;3567:102;;;3618:5;3602:21;;-1:-1:-1;;3602:21:1;;;3643:14;;-1:-1:-1;1902:36:8;;3643:14:1;;1890:2:8;1875:18;3643:14:1;;;;;;;3567:102;3178:498;435:141:7:o;2776:104:2:-;2832:13;2865:7;2858:14;;;;;:::i;7134:436::-;7227:4;952:10:6;7227:4:2;7310:25;952:10:6;7327:7:2;7310:9;:25::i;:::-;7283:52;;7374:15;7354:16;:35;;7346:85;;;;-1:-1:-1;;;7346:85:2;;5427:2:8;7346:85:2;;;5409:21:8;5466:2;5446:18;;;5439:30;5505:34;5485:18;;;5478:62;-1:-1:-1;;;5556:18:8;;;5549:35;5601:19;;7346:85:2;5225:401:8;7346:85:2;7467:60;7476:5;7483:7;7511:15;7492:16;:34;7467:8;:60::i;4181:193::-;4260:4;952:10:6;4316:28:2;952:10:6;4333:2:2;4337:6;4316:9;:28::i;4437:151::-;-1:-1:-1;;;;;4553:18:2;;;4526:7;4553:18;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;4437:151::o;1221:326:5:-;-1:-1:-1;;;;;1516:19:5;;:23;;;1221:326::o;11161:380:2:-;-1:-1:-1;;;;;11297:19:2;;11289:68;;;;-1:-1:-1;;;11289:68:2;;5833:2:8;11289:68:2;;;5815:21:8;5872:2;5852:18;;;5845:30;5911:34;5891:18;;;5884:62;-1:-1:-1;;;5962:18:8;;;5955:34;6006:19;;11289:68:2;5631:400:8;11289:68:2;-1:-1:-1;;;;;11376:21:2;;11368:68;;;;-1:-1:-1;;;11368:68:2;;6238:2:8;11368:68:2;;;6220:21:8;6277:2;6257:18;;;6250:30;6316:34;6296:18;;;6289:62;-1:-1:-1;;;6367:18:8;;;6360:32;6409:19;;11368:68:2;6036:398:8;11368:68:2;-1:-1:-1;;;;;11449:18:2;;;;;;;:11;:18;;;;;;;;:27;;;;;;;;;;;;;:36;;;11501:32;;1391:25:8;;;11501:32:2;;1364:18:8;11501:32:2;;;;;;;11161:380;;;:::o;11832:453::-;11967:24;11994:25;12004:5;12011:7;11994:9;:25::i;:::-;11967:52;;-1:-1:-1;;12034:16:2;:37;12030:248;;12116:6;12096:16;:26;;12088:68;;;;-1:-1:-1;;;12088:68:2;;6641:2:8;12088:68:2;;;6623:21:8;6680:2;6660:18;;;6653:30;6719:31;6699:18;;;6692:59;6768:18;;12088:68:2;6439:353:8;12088:68:2;12200:51;12209:5;12216:7;12244:6;12225:16;:25;12200:8;:51::i;:::-;11956:329;11832:453;;;:::o;8040:840::-;-1:-1:-1;;;;;8171:18:2;;8163:68;;;;-1:-1:-1;;;8163:68:2;;6999:2:8;8163:68:2;;;6981:21:8;7038:2;7018:18;;;7011:30;7077:34;7057:18;;;7050:62;-1:-1:-1;;;7128:18:8;;;7121:35;7173:19;;8163:68:2;6797:401:8;8163:68:2;-1:-1:-1;;;;;8250:16:2;;8242:64;;;;-1:-1:-1;;;8242:64:2;;7405:2:8;8242:64:2;;;7387:21:8;7444:2;7424:18;;;7417:30;7483:34;7463:18;;;7456:62;-1:-1:-1;;;7534:18:8;;;7527:33;7577:19;;8242:64:2;7203:399:8;8242:64:2;-1:-1:-1;;;;;8392:15:2;;8370:19;8392:15;;;:9;:15;;;;;;8426:21;;;;8418:72;;;;-1:-1:-1;;;8418:72:2;;7809:2:8;8418:72:2;;;7791:21:8;7848:2;7828:18;;;7821:30;7887:34;7867:18;;;7860:62;-1:-1:-1;;;7938:18:8;;;7931:36;7984:19;;8418:72:2;7607:402:8;8418:72:2;-1:-1:-1;;;;;8526:15:2;;;;;;;:9;:15;;;;;;8544:20;;;8526:38;;8744:13;;;;;;;;;;:23;;;;;;8796:26;;;;;;8558:6;1391:25:8;;1379:2;1364:18;;1245:177;8796:26:2;;;;;;;;8835:37;12885:125;2168:149;5030:13:1;;;;;;;5022:69;;;;-1:-1:-1;;;5022:69:1;;;;;;;:::i;:::-;2271:38:2::1;2294:5;2301:7;2271:22;:38::i;:::-;2168:149:::0;;:::o;9167:548::-;-1:-1:-1;;;;;9251:21:2;;9243:65;;;;-1:-1:-1;;;9243:65:2;;8628:2:8;9243:65:2;;;8610:21:8;8667:2;8647:18;;;8640:30;8706:33;8686:18;;;8679:61;8757:18;;9243:65:2;8426:355:8;9243:65:2;9399:6;9383:12;;:22;;;;;;;:::i;:::-;;;;-1:-1:-1;;;;;;;9554:18:2;;;;;;:9;:18;;;;;;;;:28;;;;;;9609:37;1391:25:8;;;9609:37:2;;1364:18:8;9609:37:2;;;;;;;2168:149;;:::o;12885:125::-;;;;:::o;2325:162::-;5030:13:1;;;;;;;5022:69;;;;-1:-1:-1;;;5022:69:1;;;;;;;:::i;:::-;2438:5:2::1;:13;2446:5:::0;2438;:13:::1;:::i;:::-;-1:-1:-1::0;2462:7:2::1;:17;2472:7:::0;2462;:17:::1;:::i;14:597:8:-:0;126:4;155:2;184;173:9;166:21;216:6;210:13;259:6;254:2;243:9;239:18;232:34;284:1;294:140;308:6;305:1;302:13;294:140;;;403:14;;;399:23;;393:30;369:17;;;388:2;365:26;358:66;323:10;;294:140;;;452:6;449:1;446:13;443:91;;;522:1;517:2;508:6;497:9;493:22;489:31;482:42;443:91;-1:-1:-1;595:2:8;574:15;-1:-1:-1;;570:29:8;555:45;;;;602:2;551:54;;14:597;-1:-1:-1;;;14:597:8:o;616:173::-;684:20;;-1:-1:-1;;;;;733:31:8;;723:42;;713:70;;779:1;776;769:12;713:70;616:173;;;:::o;794:254::-;862:6;870;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;962:29;981:9;962:29;:::i;:::-;952:39;1038:2;1023:18;;;;1010:32;;-1:-1:-1;;;794:254:8:o;1427:328::-;1504:6;1512;1520;1573:2;1561:9;1552:7;1548:23;1544:32;1541:52;;;1589:1;1586;1579:12;1541:52;1612:29;1631:9;1612:29;:::i;:::-;1602:39;;1660:38;1694:2;1683:9;1679:18;1660:38;:::i;:::-;1650:48;;1745:2;1734:9;1730:18;1717:32;1707:42;;1427:328;;;;;:::o;1949:186::-;2008:6;2061:2;2049:9;2040:7;2036:23;2032:32;2029:52;;;2077:1;2074;2067:12;2029:52;2100:29;2119:9;2100:29;:::i;:::-;2090:39;1949:186;-1:-1:-1;;;1949:186:8:o;2140:260::-;2208:6;2216;2269:2;2257:9;2248:7;2244:23;2240:32;2237:52;;;2285:1;2282;2275:12;2237:52;2308:29;2327:9;2308:29;:::i;:::-;2298:39;;2356:38;2390:2;2379:9;2375:18;2356:38;:::i;:::-;2346:48;;2140:260;;;;;:::o;2405:380::-;2484:1;2480:12;;;;2527;;;2548:61;;2602:4;2594:6;2590:17;2580:27;;2548:61;2655:2;2647:6;2644:14;2624:18;2621:38;2618:161;;2701:10;2696:3;2692:20;2689:1;2682:31;2736:4;2733:1;2726:15;2764:4;2761:1;2754:15;2618:161;;2405:380;;;:::o;2790:127::-;2851:10;2846:3;2842:20;2839:1;2832:31;2882:4;2879:1;2872:15;2906:4;2903:1;2896:15;2922:128;2962:3;2993:1;2989:6;2986:1;2983:13;2980:39;;;2999:18;;:::i;:::-;-1:-1:-1;3035:9:8;;2922:128::o;3470:422::-;3559:1;3602:5;3559:1;3616:270;3637:7;3627:8;3624:21;3616:270;;;3696:4;3692:1;3688:6;3684:17;3678:4;3675:27;3672:53;;;3705:18;;:::i;:::-;3755:7;3745:8;3741:22;3738:55;;;3775:16;;;;3738:55;3854:22;;;;3814:15;;;;3616:270;;;3620:3;3470:422;;;;;:::o;3897:806::-;3946:5;3976:8;3966:80;;-1:-1:-1;4017:1:8;4031:5;;3966:80;4065:4;4055:76;;-1:-1:-1;4102:1:8;4116:5;;4055:76;4147:4;4165:1;4160:59;;;;4233:1;4228:130;;;;4140:218;;4160:59;4190:1;4181:10;;4204:5;;;4228:130;4265:3;4255:8;4252:17;4249:43;;;4272:18;;:::i;:::-;-1:-1:-1;;4328:1:8;4314:16;;4343:5;;4140:218;;4442:2;4432:8;4429:16;4423:3;4417:4;4414:13;4410:36;4404:2;4394:8;4391:16;4386:2;4380:4;4377:12;4373:35;4370:77;4367:159;;;-1:-1:-1;4479:19:8;;;4511:5;;4367:159;4558:34;4583:8;4577:4;4558:34;:::i;:::-;4628:6;4624:1;4620:6;4616:19;4607:7;4604:32;4601:58;;;4639:18;;:::i;:::-;4677:20;;3897:806;-1:-1:-1;;;3897:806:8:o;4708:140::-;4766:5;4795:47;4836:4;4826:8;4822:19;4816:4;4795:47;:::i;4853:168::-;4893:7;4959:1;4955;4951:6;4947:14;4944:1;4941:21;4936:1;4929:9;4922:17;4918:45;4915:71;;;4966:18;;:::i;:::-;-1:-1:-1;5006:9:8;;4853:168::o;8014:407::-;8216:2;8198:21;;;8255:2;8235:18;;;8228:30;8294:34;8289:2;8274:18;;8267:62;-1:-1:-1;;;8360:2:8;8345:18;;8338:41;8411:3;8396:19;;8014:407::o;8786:127::-;8847:10;8842:3;8838:20;8835:1;8828:31;8878:4;8875:1;8868:15;8902:4;8899:1;8892:15;9044:545;9146:2;9141:3;9138:11;9135:448;;;9182:1;9207:5;9203:2;9196:17;9252:4;9248:2;9238:19;9322:2;9310:10;9306:19;9303:1;9299:27;9293:4;9289:38;9358:4;9346:10;9343:20;9340:47;;;-1:-1:-1;9381:4:8;9340:47;9436:2;9431:3;9427:12;9424:1;9420:20;9414:4;9410:31;9400:41;;9491:82;9509:2;9502:5;9499:13;9491:82;;;9554:17;;;9535:1;9524:13;9491:82;;;9495:3;;;9044:545;;;:::o;9765:1352::-;9891:3;9885:10;9918:18;9910:6;9907:30;9904:56;;;9940:18;;:::i;:::-;9969:97;10059:6;10019:38;10051:4;10045:11;10019:38;:::i;:::-;10013:4;9969:97;:::i;:::-;10121:4;;10185:2;10174:14;;10202:1;10197:663;;;;10904:1;10921:6;10918:89;;;-1:-1:-1;10973:19:8;;;10967:26;10918:89;-1:-1:-1;;9722:1:8;9718:11;;;9714:24;9710:29;9700:40;9746:1;9742:11;;;9697:57;11020:81;;10167:944;;10197:663;8991:1;8984:14;;;9028:4;9015:18;;-1:-1:-1;;10233:20:8;;;10351:236;10365:7;10362:1;10359:14;10351:236;;;10454:19;;;10448:26;10433:42;;10546:27;;;;10514:1;10502:14;;;;10381:19;;10351:236;;;10355:3;10615:6;10606:7;10603:19;10600:201;;;10676:19;;;10670:26;-1:-1:-1;;10759:1:8;10755:14;;;10771:3;10751:24;10747:37;10743:42;10728:58;10713:74;;10600:201;-1:-1:-1;;;;;10847:1:8;10831:14;;;10827:22;10814:36;;-1:-1:-1;9765:1352:8:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "703000",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"allowance(address,address)": "infinite",
								"approve(address,uint256)": "24628",
								"balanceOf(address)": "2537",
								"decimals()": "266",
								"decreaseAllowance(address,uint256)": "27016",
								"increaseAllowance(address,uint256)": "27093",
								"initialize()": "infinite",
								"name()": "infinite",
								"symbol()": "infinite",
								"totalSupply()": "2326",
								"transfer(address,uint256)": "51147",
								"transferFrom(address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 374,
									"end": 669,
									"name": "PUSH",
									"source": 7,
									"value": "80"
								},
								{
									"begin": 374,
									"end": 669,
									"name": "PUSH",
									"source": 7,
									"value": "40"
								},
								{
									"begin": 374,
									"end": 669,
									"name": "MSTORE",
									"source": 7
								},
								{
									"begin": 638,
									"end": 666,
									"name": "CALLVALUE",
									"source": 7
								},
								{
									"begin": 638,
									"end": 666,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 638,
									"end": 666,
									"name": "ISZERO",
									"source": 7
								},
								{
									"begin": 638,
									"end": 666,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 638,
									"end": 666,
									"name": "JUMPI",
									"source": 7
								},
								{
									"begin": 638,
									"end": 666,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 638,
									"end": 666,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 638,
									"end": 666,
									"name": "REVERT",
									"source": 7
								},
								{
									"begin": 638,
									"end": 666,
									"name": "tag",
									"source": 7,
									"value": "1"
								},
								{
									"begin": 638,
									"end": 666,
									"name": "JUMPDEST",
									"source": 7
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3189,
									"end": 3208,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3212,
									"end": 3225,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 3212,
									"end": 3225,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 3212,
									"end": 3225,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3212,
									"end": 3225,
									"name": "DIV",
									"source": 1
								},
								{
									"begin": 3212,
									"end": 3225,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 3212,
									"end": 3225,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3211,
									"end": 3225,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3211,
									"end": 3225,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3259,
									"end": 3293,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3259,
									"end": 3293,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3259,
									"end": 3293,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 3259,
									"end": 3293,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3277,
									"end": 3289,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3277,
									"end": 3289,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 3292,
									"end": 3293,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 3277,
									"end": 3289,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 3277,
									"end": 3289,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3277,
									"end": 3289,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 3277,
									"end": 3289,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3277,
									"end": 3293,
									"name": "LT",
									"source": 1
								},
								{
									"begin": 3259,
									"end": 3293,
									"name": "tag",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 3259,
									"end": 3293,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3258,
									"end": 3366,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3258,
									"end": 3366,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 3258,
									"end": 3366,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 3258,
									"end": 3366,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3300,
									"end": 3344,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 3338,
									"end": 3342,
									"name": "ADDRESS",
									"source": 1
								},
								{
									"begin": 3300,
									"end": 3329,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "7"
								},
								{
									"begin": 3300,
									"end": 3329,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 3300,
									"end": 3329,
									"name": "SHL",
									"source": 1
								},
								{
									"begin": 3300,
									"end": 3329,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "18446744073709551682"
								},
								{
									"begin": 3300,
									"end": 3329,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 3300,
									"end": 3344,
									"name": "PUSH",
									"source": 1,
									"value": "20"
								},
								{
									"begin": 3300,
									"end": 3344,
									"name": "SHR",
									"source": 1
								},
								{
									"begin": 3300,
									"end": 3344,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 3300,
									"end": 3344,
									"name": "tag",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 3300,
									"end": 3344,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3299,
									"end": 3344,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3299,
									"end": 3365,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3299,
									"end": 3365,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3299,
									"end": 3365,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 3299,
									"end": 3365,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3348,
									"end": 3360,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3348,
									"end": 3360,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": 3348,
									"end": 3360,
									"name": "PUSH",
									"source": 1,
									"value": "FF"
								},
								{
									"begin": 3348,
									"end": 3360,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3348,
									"end": 3360,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 3348,
									"end": 3365,
									"name": "EQ",
									"source": 1
								},
								{
									"begin": 3299,
									"end": 3365,
									"name": "tag",
									"source": 1,
									"value": "8"
								},
								{
									"begin": 3299,
									"end": 3365,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "461BCD"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E5"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 216,
									"end": 218,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 198,
									"end": 219,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 255,
									"end": 257,
									"name": "PUSH",
									"source": 8,
									"value": "2E"
								},
								{
									"begin": 235,
									"end": 253,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 235,
									"end": 253,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 235,
									"end": 253,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 228,
									"end": 258,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 294,
									"end": 328,
									"name": "PUSH",
									"source": 8,
									"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
								},
								{
									"begin": 274,
									"end": 292,
									"name": "PUSH",
									"source": 8,
									"value": "44"
								},
								{
									"begin": 274,
									"end": 292,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 274,
									"end": 292,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 267,
									"end": 329,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "191E481A5B9A5D1A585B1A5E9959"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "92"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 345,
									"end": 363,
									"name": "PUSH",
									"source": 8,
									"value": "64"
								},
								{
									"begin": 345,
									"end": 363,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 345,
									"end": 363,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 338,
									"end": 382,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 399,
									"end": 418,
									"name": "PUSH",
									"source": 8,
									"value": "84"
								},
								{
									"begin": 399,
									"end": 418,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "tag",
									"source": 1,
									"value": "9"
								},
								{
									"begin": 3236,
									"end": 3440,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3451,
									"end": 3463,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3451,
									"end": 3467,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3451,
									"end": 3467,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3451,
									"end": 3467,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3466,
									"end": 3467,
									"name": "PUSH",
									"source": 1,
									"value": "1"
								},
								{
									"begin": 3451,
									"end": 3467,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 3451,
									"end": 3467,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3451,
									"end": 3467,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 3478,
									"end": 3545,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3478,
									"end": 3545,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3478,
									"end": 3545,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 3478,
									"end": 3545,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 3513,
									"end": 3526,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3513,
									"end": 3533,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3513,
									"end": 3533,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF00"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3513,
									"end": 3533,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3513,
									"end": 3533,
									"name": "PUSH",
									"source": 1,
									"value": "100"
								},
								{
									"begin": 3513,
									"end": 3533,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 3513,
									"end": 3533,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3513,
									"end": 3533,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 3478,
									"end": 3545,
									"name": "tag",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 3478,
									"end": 3545,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3571,
									"end": 3585,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3567,
									"end": 3669,
									"name": "ISZERO",
									"source": 1
								},
								{
									"begin": 3567,
									"end": 3669,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 3567,
									"end": 3669,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 3618,
									"end": 3623,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3602,
									"end": 3623,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3602,
									"end": 3623,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF00"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3602,
									"end": 3623,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3602,
									"end": 3623,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3602,
									"end": 3623,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": 581,
									"end": 617,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 581,
									"end": 617,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "PUSH",
									"source": 1,
									"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 569,
									"end": 571,
									"name": "PUSH",
									"source": 8,
									"value": "20"
								},
								{
									"begin": 554,
									"end": 572,
									"name": "ADD",
									"source": 8
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3643,
									"end": 3657,
									"name": "LOG1",
									"source": 1
								},
								{
									"begin": 3567,
									"end": 3669,
									"name": "tag",
									"source": 1,
									"value": "14"
								},
								{
									"begin": 3567,
									"end": 3669,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3178,
									"end": 3676,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 374,
									"end": 669,
									"name": "PUSH [tag]",
									"source": 7,
									"value": "19"
								},
								{
									"begin": 374,
									"end": 669,
									"name": "JUMP",
									"source": 7
								},
								{
									"begin": 1221,
									"end": 1547,
									"name": "tag",
									"source": 5,
									"value": "7"
								},
								{
									"begin": 1221,
									"end": 1547,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1516,
									"end": 1535,
									"name": "AND",
									"source": 5
								},
								{
									"begin": 1516,
									"end": 1535,
									"name": "EXTCODESIZE",
									"source": 5
								},
								{
									"begin": 1516,
									"end": 1539,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1516,
									"end": 1539,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 1516,
									"end": 1539,
									"name": "SWAP1",
									"source": 5
								},
								{
									"begin": 1221,
									"end": 1547,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 5
								},
								{
									"begin": 429,
									"end": 623,
									"name": "tag",
									"source": 8,
									"value": "19"
								},
								{
									"begin": 429,
									"end": 623,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 374,
									"end": 669,
									"name": "PUSH #[$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 374,
									"end": 669,
									"name": "DUP1",
									"source": 7
								},
								{
									"begin": 374,
									"end": 669,
									"name": "PUSH [$]",
									"source": 7,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 374,
									"end": 669,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 374,
									"end": 669,
									"name": "CODECOPY",
									"source": 7
								},
								{
									"begin": 374,
									"end": 669,
									"name": "PUSH",
									"source": 7,
									"value": "0"
								},
								{
									"begin": 374,
									"end": 669,
									"name": "RETURN",
									"source": 7
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212209cac22c944e2ec9de7b92f113f7d69c63985dac3d1558e90bfdb448a28355e7664736f6c634300080f0033",
									".code": [
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "80"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "CALLVALUE",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "ISZERO",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "tag",
											"source": 7,
											"value": "1"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "CALLDATASIZE",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "LT",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "CALLDATALOAD",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "E0"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "SHR",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "GT",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "70A08231"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "9"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "8129FC1C"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "95D89B41"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "11"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "A457C2D7"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "12"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "A9059CBB"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "13"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "DD62ED3E"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "14"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "tag",
											"source": 7,
											"value": "15"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "6FDDE03"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "95EA7B3"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "4"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "18160DDD"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "5"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "23B872DD"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "6"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "313CE567"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "39509351"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "EQ",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "8"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPI",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "tag",
											"source": 7,
											"value": "2"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "PUSH",
											"source": 7,
											"value": "0"
										},
										{
											"begin": 374,
											"end": 669,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 374,
											"end": 669,
											"name": "REVERT",
											"source": 7
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "3"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2557,
											"end": 2657,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "19"
										},
										{
											"begin": 2557,
											"end": 2657,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "RETURN",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4908,
											"end": 5109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "21"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4908,
											"end": 5109,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1218,
											"end": 1232,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1211,
											"end": 1233,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1193,
											"end": 1234,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1181,
											"end": 1183,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1166,
											"end": 1184,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1053,
											"end": 1240,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "tag",
											"source": 2,
											"value": "5"
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 3765,
											"end": 3777,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "tag",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3677,
											"end": 3785,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "tag",
											"source": 2,
											"value": "6"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "32"
										},
										{
											"begin": 5689,
											"end": 5984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "tag",
											"source": 2,
											"value": "31"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5689,
											"end": 5984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "tag",
											"source": 2,
											"value": "7"
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 3602,
											"end": 3604,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3519,
											"end": 3612,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "18"
										},
										{
											"begin": 1760,
											"end": 1944,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "tag",
											"source": 2,
											"value": "8"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 6393,
											"end": 6631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "tag",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 6393,
											"end": 6631,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "tag",
											"source": 2,
											"value": "9"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "45"
										},
										{
											"begin": 3848,
											"end": 3975,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "tag",
											"source": 2,
											"value": "44"
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 3922,
											"end": 3929,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3958,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 3949,
											"end": 3967,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 3848,
											"end": 3975,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 435,
											"end": 576,
											"name": "tag",
											"source": 7,
											"value": "10"
										},
										{
											"begin": 435,
											"end": 576,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 435,
											"end": 576,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 435,
											"end": 576,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 435,
											"end": 576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 435,
											"end": 576,
											"name": "tag",
											"source": 7,
											"value": "48"
										},
										{
											"begin": 435,
											"end": 576,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 435,
											"end": 576,
											"name": "STOP",
											"source": 7
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "tag",
											"source": 2,
											"value": "11"
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "16"
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 2776,
											"end": 2880,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "tag",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 7134,
											"end": 7570,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "tag",
											"source": 2,
											"value": "54"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 7134,
											"end": 7570,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "tag",
											"source": 2,
											"value": "13"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "22"
										},
										{
											"begin": 4181,
											"end": 4374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "tag",
											"source": 2,
											"value": "58"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4181,
											"end": 4374,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "tag",
											"source": 2,
											"value": "14"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "26"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "CALLDATASIZE",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "63"
										},
										{
											"begin": 4437,
											"end": 4588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "tag",
											"source": 2,
											"value": "62"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4437,
											"end": 4588,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "tag",
											"source": 2,
											"value": "17"
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2611,
											"end": 2624,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2644,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2637,
											"end": 2649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2637,
											"end": 2649,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "70"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DIV",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MUL",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "72"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "GT",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "73"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "PUSH",
											"source": 2,
											"value": "1F"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "tag",
											"source": 2,
											"value": "71"
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2637,
											"end": 2649,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2557,
											"end": 2657,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "23"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4991,
											"end": 4995,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5047,
											"end": 5079,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 5063,
											"end": 5070,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5072,
											"end": 5078,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5055,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 5047,
											"end": 5079,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5047,
											"end": 5079,
											"name": "tag",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 5047,
											"end": 5079,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5097,
											"end": 5101,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5090,
											"end": 5101,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 5090,
											"end": 5101,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 5090,
											"end": 5101,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "tag",
											"source": 2,
											"value": "74"
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 4908,
											"end": 5109,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "tag",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5820,
											"end": 5824,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 5878,
											"end": 5916,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 5894,
											"end": 5898,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 5909,
											"end": 5915,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5878,
											"end": 5893,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 5878,
											"end": 5916,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5878,
											"end": 5916,
											"name": "tag",
											"source": 2,
											"value": "82"
										},
										{
											"begin": 5878,
											"end": 5916,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5927,
											"end": 5954,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 5937,
											"end": 5941,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5943,
											"end": 5945,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5947,
											"end": 5953,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 5927,
											"end": 5936,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 5927,
											"end": 5954,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 5927,
											"end": 5954,
											"name": "tag",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 5927,
											"end": 5954,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5972,
											"end": 5976,
											"name": "PUSH",
											"source": 2,
											"value": "1"
										},
										{
											"begin": 5972,
											"end": 5976,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 5689,
											"end": 5984,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5689,
											"end": 5984,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "tag",
											"source": 2,
											"value": "41"
										},
										{
											"begin": 6393,
											"end": 6631,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6481,
											"end": 6485,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 6537,
											"end": 6601,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 6553,
											"end": 6560,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6590,
											"end": 6600,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6587,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 6553,
											"end": 6560,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6571,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 6562,
											"end": 6587,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6587,
											"name": "tag",
											"source": 2,
											"value": "90"
										},
										{
											"begin": 6562,
											"end": 6587,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 6562,
											"end": 6600,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "tag",
											"source": 2,
											"value": "91"
										},
										{
											"begin": 6562,
											"end": 6600,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 6537,
											"end": 6545,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 6537,
											"end": 6601,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 435,
											"end": 576,
											"name": "tag",
											"source": 7,
											"value": "49"
										},
										{
											"begin": 435,
											"end": 576,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3189,
											"end": 3208,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3212,
											"end": 3225,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3212,
											"end": 3225,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3212,
											"end": 3225,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3212,
											"end": 3225,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 3212,
											"end": 3225,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3212,
											"end": 3225,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3211,
											"end": 3225,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3211,
											"end": 3225,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3259,
											"end": 3293,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3259,
											"end": 3293,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3259,
											"end": 3293,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 3259,
											"end": 3293,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3277,
											"end": 3289,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3277,
											"end": 3289,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3292,
											"end": 3293,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3277,
											"end": 3289,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3277,
											"end": 3289,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3277,
											"end": 3289,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3277,
											"end": 3289,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3277,
											"end": 3293,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 3259,
											"end": 3293,
											"name": "tag",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 3259,
											"end": 3293,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3258,
											"end": 3366,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3258,
											"end": 3366,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 3258,
											"end": 3366,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3338,
											"end": 3342,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 1516,
											"end": 1535,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1516,
											"end": 1539,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1516,
											"end": 1539,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 1516,
											"end": 1539,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 3299,
											"end": 3365,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 3299,
											"end": 3365,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3348,
											"end": 3360,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3348,
											"end": 3360,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 3348,
											"end": 3360,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 3348,
											"end": 3360,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3348,
											"end": 3360,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3348,
											"end": 3365,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 3299,
											"end": 3365,
											"name": "tag",
											"source": 1,
											"value": "98"
										},
										{
											"begin": 3299,
											"end": 3365,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 3257,
											"end": 3259,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3239,
											"end": 3260,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3296,
											"end": 3298,
											"name": "PUSH",
											"source": 8,
											"value": "2E"
										},
										{
											"begin": 3276,
											"end": 3294,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 3276,
											"end": 3294,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3276,
											"end": 3294,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3269,
											"end": 3299,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3335,
											"end": 3369,
											"name": "PUSH",
											"source": 8,
											"value": "496E697469616C697A61626C653A20636F6E747261637420697320616C726561"
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3315,
											"end": 3333,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3308,
											"end": 3370,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "191E481A5B9A5D1A585B1A5E9959"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "92"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3386,
											"end": 3404,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 3386,
											"end": 3404,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3386,
											"end": 3404,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3379,
											"end": 3423,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3440,
											"end": 3459,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 3440,
											"end": 3459,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "tag",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 3236,
											"end": 3440,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3451,
											"end": 3463,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3451,
											"end": 3467,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3451,
											"end": 3467,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3451,
											"end": 3467,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3466,
											"end": 3467,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 3451,
											"end": 3467,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3451,
											"end": 3467,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3451,
											"end": 3467,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3478,
											"end": 3545,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3478,
											"end": 3545,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3478,
											"end": 3545,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 3478,
											"end": 3545,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3526,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3513,
											"end": 3533,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3533,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3513,
											"end": 3533,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3533,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 3513,
											"end": 3533,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3533,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3513,
											"end": 3533,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3478,
											"end": 3545,
											"name": "tag",
											"source": 1,
											"value": "102"
										},
										{
											"begin": 3478,
											"end": 3545,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "7"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "26BCAA37B5B2B7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "C9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "40"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "3"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "20"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 7
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "4D544B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"name": "POP",
											"source": 7
										},
										{
											"begin": 485,
											"end": 497,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "105"
										},
										{
											"begin": 485,
											"end": 515,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "104"
										},
										{
											"begin": 485,
											"end": 515,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 526,
											"end": 568,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 532,
											"end": 542,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 551,
											"end": 567,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 3602,
											"end": 3604,
											"name": "PUSH",
											"source": 2,
											"value": "12"
										},
										{
											"begin": 551,
											"end": 553,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "A"
										},
										{
											"begin": 551,
											"end": 567,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "109"
										},
										{
											"begin": 551,
											"end": 567,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 551,
											"end": 567,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "108"
										},
										{
											"begin": 551,
											"end": 567,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 544,
											"end": 567,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 544,
											"end": 567,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 544,
											"end": 548,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 7,
											"value": "3E8"
										},
										{
											"begin": 544,
											"end": 567,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "111"
										},
										{
											"begin": 544,
											"end": 567,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 544,
											"end": 567,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "110"
										},
										{
											"begin": 544,
											"end": 567,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 526,
											"end": 531,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 7,
											"value": "112"
										},
										{
											"begin": 526,
											"end": 568,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 526,
											"end": 568,
											"modifierDepth": 1,
											"name": "tag",
											"source": 7,
											"value": "106"
										},
										{
											"begin": 526,
											"end": 568,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 7
										},
										{
											"begin": 3571,
											"end": 3585,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3567,
											"end": 3669,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 3567,
											"end": 3669,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3567,
											"end": 3669,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 3618,
											"end": 3623,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3602,
											"end": 3623,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3602,
											"end": 3623,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF00"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3602,
											"end": 3623,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3602,
											"end": 3623,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3602,
											"end": 3623,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1902,
											"end": 1938,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "PUSH",
											"source": 1,
											"value": "7F26B83FF96E1F2B6A682F133852F6798A09C465DA95921460CEFB3847402498"
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1890,
											"end": 1892,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1875,
											"end": 1893,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3643,
											"end": 3657,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 3567,
											"end": 3669,
											"name": "tag",
											"source": 1,
											"value": "113"
										},
										{
											"begin": 3567,
											"end": 3669,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3178,
											"end": 3676,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 435,
											"end": 576,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 7
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "tag",
											"source": 2,
											"value": "51"
										},
										{
											"begin": 2776,
											"end": 2880,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2832,
											"end": 2845,
											"name": "PUSH",
											"source": 2,
											"value": "60"
										},
										{
											"begin": 2865,
											"end": 2872,
											"name": "PUSH",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "68"
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 2858,
											"end": 2872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "69"
										},
										{
											"begin": 2858,
											"end": 2872,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "tag",
											"source": 2,
											"value": "55"
										},
										{
											"begin": 7134,
											"end": 7570,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7227,
											"end": 7231,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 7227,
											"end": 7231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7310,
											"end": 7335,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 7327,
											"end": 7334,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7310,
											"end": 7319,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 7310,
											"end": 7335,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 7310,
											"end": 7335,
											"name": "tag",
											"source": 2,
											"value": "124"
										},
										{
											"begin": 7310,
											"end": 7335,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7283,
											"end": 7335,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 7283,
											"end": 7335,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 7374,
											"end": 7389,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 7354,
											"end": 7370,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7354,
											"end": 7389,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 7354,
											"end": 7389,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5427,
											"end": 5429,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5409,
											"end": 5430,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5466,
											"end": 5468,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 5446,
											"end": 5464,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5446,
											"end": 5464,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5446,
											"end": 5464,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5439,
											"end": 5469,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5505,
											"end": 5539,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A2064656372656173656420616C6C6F77616E63652062656C6F77"
										},
										{
											"begin": 5485,
											"end": 5503,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5485,
											"end": 5503,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5485,
											"end": 5503,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5478,
											"end": 5540,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "207A65726F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5556,
											"end": 5574,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5556,
											"end": 5574,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5556,
											"end": 5574,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5549,
											"end": 5584,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5601,
											"end": 5620,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 5601,
											"end": 5620,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5225,
											"end": 5626,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "tag",
											"source": 2,
											"value": "125"
										},
										{
											"begin": 7346,
											"end": 7431,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7527,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "84"
										},
										{
											"begin": 7476,
											"end": 7481,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 7483,
											"end": 7490,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7511,
											"end": 7526,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 7492,
											"end": 7508,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 7492,
											"end": 7526,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 7467,
											"end": 7475,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 7467,
											"end": 7527,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "tag",
											"source": 2,
											"value": "59"
										},
										{
											"begin": 4181,
											"end": 4374,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 4260,
											"end": 4264,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "CALLER",
											"source": 6
										},
										{
											"begin": 4316,
											"end": 4344,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "77"
										},
										{
											"begin": 952,
											"end": 962,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 4333,
											"end": 4335,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4337,
											"end": 4343,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 4316,
											"end": 4325,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 4316,
											"end": 4344,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "tag",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 4437,
											"end": 4588,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4526,
											"end": 4533,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4564,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4571,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP4",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 4553,
											"end": 4580,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 4437,
											"end": 4588,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 1221,
											"end": 1547,
											"name": "tag",
											"source": 5,
											"value": "66"
										},
										{
											"begin": 1221,
											"end": 1547,
											"name": "JUMPDEST",
											"source": 5
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1516,
											"end": 1535,
											"name": "AND",
											"source": 5
										},
										{
											"begin": 1516,
											"end": 1535,
											"name": "EXTCODESIZE",
											"source": 5
										},
										{
											"begin": 1516,
											"end": 1539,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1516,
											"end": 1539,
											"name": "ISZERO",
											"source": 5
										},
										{
											"begin": 1516,
											"end": 1539,
											"name": "SWAP1",
											"source": 5
										},
										{
											"begin": 1221,
											"end": 1547,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 5
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "tag",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11297,
											"end": 11316,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11297,
											"end": 11316,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 5833,
											"end": 5835,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 5815,
											"end": 5836,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5872,
											"end": 5874,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 5852,
											"end": 5870,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 5852,
											"end": 5870,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5852,
											"end": 5870,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5845,
											"end": 5875,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 5911,
											"end": 5945,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F76652066726F6D20746865207A65726F20616464"
										},
										{
											"begin": 5891,
											"end": 5909,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 5891,
											"end": 5909,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5891,
											"end": 5909,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5884,
											"end": 5946,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "72657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5962,
											"end": 5980,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 5962,
											"end": 5980,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 5962,
											"end": 5980,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 5955,
											"end": 5989,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6006,
											"end": 6025,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 6006,
											"end": 6025,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 5631,
											"end": 6031,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "tag",
											"source": 2,
											"value": "136"
										},
										{
											"begin": 11289,
											"end": 11357,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11376,
											"end": 11397,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11376,
											"end": 11397,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6238,
											"end": 6240,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6220,
											"end": 6241,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6277,
											"end": 6279,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 6257,
											"end": 6275,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6257,
											"end": 6275,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6257,
											"end": 6275,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6250,
											"end": 6280,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6316,
											"end": 6350,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20617070726F766520746F20746865207A65726F206164647265"
										},
										{
											"begin": 6296,
											"end": 6314,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6296,
											"end": 6314,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6296,
											"end": 6314,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6289,
											"end": 6351,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6367,
											"end": 6385,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 6367,
											"end": 6385,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6367,
											"end": 6385,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6360,
											"end": 6392,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6409,
											"end": 6428,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 6409,
											"end": 6428,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6036,
											"end": 6434,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "tag",
											"source": 2,
											"value": "139"
										},
										{
											"begin": 11368,
											"end": 11436,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11460,
											"name": "PUSH",
											"source": 2,
											"value": "34"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11467,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP8",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP5",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11476,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11485,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11485,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11449,
											"end": 11485,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "PUSH",
											"source": 2,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11501,
											"end": 11533,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11161,
											"end": 11541,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "tag",
											"source": 2,
											"value": "83"
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11967,
											"end": 11991,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 11994,
											"end": 12019,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 12004,
											"end": 12009,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12011,
											"end": 12018,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 11994,
											"end": 12003,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "64"
										},
										{
											"begin": 11994,
											"end": 12019,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 11994,
											"end": 12019,
											"name": "tag",
											"source": 2,
											"value": "144"
										},
										{
											"begin": 11994,
											"end": 12019,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11967,
											"end": 12019,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 11967,
											"end": 12019,
											"name": "POP",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 12034,
											"end": 12050,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12034,
											"end": 12071,
											"name": "EQ",
											"source": 2
										},
										{
											"begin": 12030,
											"end": 12278,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 12030,
											"end": 12278,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12116,
											"end": 12122,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12096,
											"end": 12112,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12096,
											"end": 12122,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 12096,
											"end": 12122,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6641,
											"end": 6643,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6623,
											"end": 6644,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6680,
											"end": 6682,
											"name": "PUSH",
											"source": 8,
											"value": "1D"
										},
										{
											"begin": 6660,
											"end": 6678,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 6660,
											"end": 6678,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6660,
											"end": 6678,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6653,
											"end": 6683,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6719,
											"end": 6750,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A20696E73756666696369656E7420616C6C6F77616E6365000000"
										},
										{
											"begin": 6699,
											"end": 6717,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 6699,
											"end": 6717,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 6699,
											"end": 6717,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 6692,
											"end": 6751,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 6768,
											"end": 6786,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 6768,
											"end": 6786,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6439,
											"end": 6792,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "tag",
											"source": 2,
											"value": "146"
										},
										{
											"begin": 12088,
											"end": 12156,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12200,
											"end": 12251,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 12209,
											"end": 12214,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12216,
											"end": 12223,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12244,
											"end": 12250,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12225,
											"end": 12241,
											"name": "DUP5",
											"source": 2
										},
										{
											"begin": 12225,
											"end": 12250,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 12200,
											"end": 12208,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "78"
										},
										{
											"begin": 12200,
											"end": 12251,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12200,
											"end": 12251,
											"name": "tag",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 12200,
											"end": 12251,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 11956,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 11832,
											"end": 12285,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 8040,
											"end": 8880,
											"name": "tag",
											"source": 2,
											"value": "85"
										},
										{
											"begin": 8040,
											"end": 8880,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8171,
											"end": 8189,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8171,
											"end": 8189,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 6999,
											"end": 7001,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 6981,
											"end": 7002,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7038,
											"end": 7040,
											"name": "PUSH",
											"source": 8,
											"value": "25"
										},
										{
											"begin": 7018,
											"end": 7036,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7018,
											"end": 7036,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7018,
											"end": 7036,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7011,
											"end": 7041,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7077,
											"end": 7111,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E736665722066726F6D20746865207A65726F206164"
										},
										{
											"begin": 7057,
											"end": 7075,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 7057,
											"end": 7075,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7057,
											"end": 7075,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7050,
											"end": 7112,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6472657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7128,
											"end": 7146,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7128,
											"end": 7146,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7128,
											"end": 7146,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7121,
											"end": 7156,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7173,
											"end": 7192,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 7173,
											"end": 7192,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 6797,
											"end": 7198,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "tag",
											"source": 2,
											"value": "151"
										},
										{
											"begin": 8163,
											"end": 8231,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8250,
											"end": 8266,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8250,
											"end": 8266,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7405,
											"end": 7407,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7387,
											"end": 7408,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7444,
											"end": 7446,
											"name": "PUSH",
											"source": 8,
											"value": "23"
										},
										{
											"begin": 7424,
											"end": 7442,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7424,
											"end": 7442,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7424,
											"end": 7442,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7417,
											"end": 7447,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7483,
											"end": 7517,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220746F20746865207A65726F2061646472"
										},
										{
											"begin": 7463,
											"end": 7481,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 7463,
											"end": 7481,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7463,
											"end": 7481,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7456,
											"end": 7518,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "657373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7534,
											"end": 7552,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7534,
											"end": 7552,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7534,
											"end": 7552,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7527,
											"end": 7560,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7577,
											"end": 7596,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 7577,
											"end": 7596,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7203,
											"end": 7602,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "tag",
											"source": 2,
											"value": "154"
										},
										{
											"begin": 8242,
											"end": 8306,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8370,
											"end": 8389,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8401,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8392,
											"end": 8407,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "LT",
											"source": 2
										},
										{
											"begin": 8426,
											"end": 8447,
											"name": "ISZERO",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 7809,
											"end": 7811,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 7791,
											"end": 7812,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7848,
											"end": 7850,
											"name": "PUSH",
											"source": 8,
											"value": "26"
										},
										{
											"begin": 7828,
											"end": 7846,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 7828,
											"end": 7846,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7828,
											"end": 7846,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7821,
											"end": 7851,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7887,
											"end": 7921,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A207472616E7366657220616D6F756E7420657863656564732062"
										},
										{
											"begin": 7867,
											"end": 7885,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 7867,
											"end": 7885,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7867,
											"end": 7885,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7860,
											"end": 7922,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "616C616E6365"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "D0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7938,
											"end": 7956,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 7938,
											"end": 7956,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 7938,
											"end": 7956,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 7931,
											"end": 7967,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 7984,
											"end": 8003,
											"name": "PUSH",
											"source": 8,
											"value": "84"
										},
										{
											"begin": 7984,
											"end": 8003,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 7607,
											"end": 8009,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "tag",
											"source": 2,
											"value": "159"
										},
										{
											"begin": 8418,
											"end": 8490,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP6",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8535,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8541,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8544,
											"end": 8564,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8544,
											"end": 8564,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8544,
											"end": 8564,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8564,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8526,
											"end": 8564,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "SWAP3",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8757,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8744,
											"end": 8767,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8558,
											"end": 8564,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 1379,
											"end": 1381,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1245,
											"end": 1422,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "tag",
											"source": 2,
											"value": "162"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 8796,
											"end": 8822,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 8835,
											"end": 8872,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "149"
										},
										{
											"begin": 12885,
											"end": 13010,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2168,
											"end": 2317,
											"name": "tag",
											"source": 2,
											"value": "105"
										},
										{
											"begin": 2168,
											"end": 2317,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "166"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 5022,
											"end": 5091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "tag",
											"source": 1,
											"value": "166"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2271,
											"end": 2309,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 2294,
											"end": 2299,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2301,
											"end": 2308,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2271,
											"end": 2293,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 2271,
											"end": 2309,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2271,
											"end": 2309,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "170"
										},
										{
											"begin": 2271,
											"end": 2309,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 2168,
											"end": 2317,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2168,
											"end": 2317,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2168,
											"end": 2317,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9167,
											"end": 9715,
											"name": "tag",
											"source": 2,
											"value": "112"
										},
										{
											"begin": 9167,
											"end": 9715,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9251,
											"end": 9272,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9251,
											"end": 9272,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "JUMPI",
											"source": 2
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 8628,
											"end": 8630,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "PUSH",
											"source": 2,
											"value": "4"
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 8610,
											"end": 8631,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8667,
											"end": 8669,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 8647,
											"end": 8665,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 8647,
											"end": 8665,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8647,
											"end": 8665,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8640,
											"end": 8670,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8706,
											"end": 8739,
											"name": "PUSH",
											"source": 8,
											"value": "45524332303A206D696E7420746F20746865207A65726F206164647265737300"
										},
										{
											"begin": 8686,
											"end": 8704,
											"name": "PUSH",
											"source": 8,
											"value": "44"
										},
										{
											"begin": 8686,
											"end": 8704,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8686,
											"end": 8704,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8679,
											"end": 8740,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8757,
											"end": 8775,
											"name": "PUSH",
											"source": 8,
											"value": "64"
										},
										{
											"begin": 8757,
											"end": 8775,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "100"
										},
										{
											"begin": 8426,
											"end": 8781,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "tag",
											"source": 2,
											"value": "173"
										},
										{
											"begin": 9243,
											"end": 9308,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9399,
											"end": 9405,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9395,
											"name": "PUSH",
											"source": 2,
											"value": "35"
										},
										{
											"begin": 9383,
											"end": 9395,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "92"
										},
										{
											"begin": 9383,
											"end": 9405,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "tag",
											"source": 2,
											"value": "177"
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9383,
											"end": 9405,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "AND",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "PUSH",
											"source": 2,
											"value": "0"
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9563,
											"name": "PUSH",
											"source": 2,
											"value": "33"
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "PUSH",
											"source": 2,
											"value": "20"
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "DUP2",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "MSTORE",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9572,
											"name": "KECCAK256",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9582,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9582,
											"name": "SLOAD",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9582,
											"name": "DUP7",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9582,
											"name": "ADD",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9582,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9554,
											"end": 9582,
											"name": "SSTORE",
											"source": 2
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1391,
											"end": 1416,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "PUSH",
											"source": 2,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 1364,
											"end": 1382,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "PUSH",
											"source": 2,
											"value": "40"
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "MLOAD",
											"source": 2
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "DUP1",
											"source": 2
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "SWAP2",
											"source": 2
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "SUB",
											"source": 2
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "SWAP1",
											"source": 2
										},
										{
											"begin": 9609,
											"end": 9646,
											"name": "LOG3",
											"source": 2
										},
										{
											"begin": 2168,
											"end": 2317,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2168,
											"end": 2317,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 2168,
											"end": 2317,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 12885,
											"end": 13010,
											"name": "tag",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 12885,
											"end": 13010,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 12885,
											"end": 13010,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12885,
											"end": 13010,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12885,
											"end": 13010,
											"name": "POP",
											"source": 2
										},
										{
											"begin": 12885,
											"end": 13010,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2325,
											"end": 2487,
											"name": "tag",
											"source": 2,
											"value": "171"
										},
										{
											"begin": 2325,
											"end": 2487,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "PUSH",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 5030,
											"end": 5043,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "183"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "100"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "168"
										},
										{
											"begin": 5022,
											"end": 5091,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "tag",
											"source": 1,
											"value": "183"
										},
										{
											"begin": 5022,
											"end": 5091,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2438,
											"end": 2443,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "36"
										},
										{
											"begin": 2438,
											"end": 2451,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 2446,
											"end": 2451,
											"name": "DUP4",
											"source": 2
										},
										{
											"begin": 2438,
											"end": 2443,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2438,
											"end": 2451,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 2438,
											"end": 2451,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 2438,
											"end": 2451,
											"modifierDepth": 1,
											"name": "tag",
											"source": 2,
											"value": "186"
										},
										{
											"begin": 2438,
											"end": 2451,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 2
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2462,
											"end": 2469,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 2,
											"value": "37"
										},
										{
											"begin": 2462,
											"end": 2479,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "158"
										},
										{
											"begin": 2472,
											"end": 2479,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2462,
											"end": 2469,
											"name": "DUP3",
											"source": 2
										},
										{
											"begin": 2462,
											"end": 2479,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 2,
											"value": "187"
										},
										{
											"begin": 2462,
											"end": 2479,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 2
										},
										{
											"begin": 14,
											"end": 611,
											"name": "tag",
											"source": 8,
											"value": "19"
										},
										{
											"begin": 14,
											"end": 611,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 126,
											"end": 130,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 155,
											"end": 157,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 184,
											"end": 186,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 173,
											"end": 182,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 166,
											"end": 187,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 216,
											"end": 222,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 210,
											"end": 223,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 259,
											"end": 265,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 254,
											"end": 256,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 243,
											"end": 252,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 239,
											"end": 257,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 232,
											"end": 266,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 284,
											"end": 285,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 308,
											"end": 314,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 305,
											"end": 306,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 302,
											"end": 315,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 403,
											"end": 417,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 399,
											"end": 422,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 393,
											"end": 423,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 369,
											"end": 386,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 388,
											"end": 390,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 365,
											"end": 391,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 358,
											"end": 424,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 323,
											"end": 333,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "199"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 294,
											"end": 434,
											"name": "tag",
											"source": 8,
											"value": "201"
										},
										{
											"begin": 294,
											"end": 434,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 452,
											"end": 458,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 449,
											"end": 450,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 446,
											"end": 459,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 522,
											"end": 523,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 508,
											"end": 514,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 497,
											"end": 506,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 493,
											"end": 515,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 489,
											"end": 520,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 482,
											"end": 524,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 443,
											"end": 534,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 443,
											"end": 534,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 595,
											"end": 597,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 574,
											"end": 589,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 570,
											"end": 599,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 555,
											"end": 600,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 602,
											"end": 604,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 551,
											"end": 605,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 551,
											"end": 605,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 14,
											"end": 611,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 611,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "tag",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 616,
											"end": 789,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 684,
											"end": 704,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 733,
											"end": 764,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 733,
											"end": 764,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 723,
											"end": 765,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 779,
											"end": 780,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 776,
											"end": 777,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 769,
											"end": 781,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 713,
											"end": 783,
											"name": "tag",
											"source": 8,
											"value": "204"
										},
										{
											"begin": 713,
											"end": 783,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 616,
											"end": 789,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "tag",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 794,
											"end": 1048,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 862,
											"end": 868,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 870,
											"end": 876,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 923,
											"end": 925,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 911,
											"end": 920,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 902,
											"end": 909,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 898,
											"end": 921,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 894,
											"end": 926,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 939,
											"end": 940,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 937,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 929,
											"end": 941,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 891,
											"end": 943,
											"name": "tag",
											"source": 8,
											"value": "206"
										},
										{
											"begin": 891,
											"end": 943,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 981,
											"end": 990,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 962,
											"end": 991,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 962,
											"end": 991,
											"name": "tag",
											"source": 8,
											"value": "207"
										},
										{
											"begin": 962,
											"end": 991,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 952,
											"end": 991,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 1038,
											"end": 1040,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1023,
											"end": 1041,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1010,
											"end": 1042,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 794,
											"end": 1048,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "tag",
											"source": 8,
											"value": "32"
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1504,
											"end": 1510,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1512,
											"end": 1518,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1520,
											"end": 1526,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1575,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 1561,
											"end": 1570,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1552,
											"end": 1559,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1548,
											"end": 1571,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 1544,
											"end": 1576,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 1589,
											"end": 1590,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 1586,
											"end": 1587,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 1579,
											"end": 1591,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "tag",
											"source": 8,
											"value": "211"
										},
										{
											"begin": 1541,
											"end": 1593,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 1631,
											"end": 1640,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 1612,
											"end": 1641,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "tag",
											"source": 8,
											"value": "212"
										},
										{
											"begin": 1612,
											"end": 1641,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1602,
											"end": 1641,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 1694,
											"end": 1696,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 1683,
											"end": 1692,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1679,
											"end": 1697,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 1660,
											"end": 1698,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "tag",
											"source": 8,
											"value": "213"
										},
										{
											"begin": 1660,
											"end": 1698,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 1650,
											"end": 1698,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1745,
											"end": 1747,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 1734,
											"end": 1743,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1730,
											"end": 1748,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1717,
											"end": 1749,
											"name": "CALLDATALOAD",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 1707,
											"end": 1749,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 1427,
											"end": 1755,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "tag",
											"source": 8,
											"value": "45"
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2008,
											"end": 2014,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2063,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2049,
											"end": 2058,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2040,
											"end": 2047,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2036,
											"end": 2059,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2032,
											"end": 2064,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2077,
											"end": 2078,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2074,
											"end": 2075,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2067,
											"end": 2079,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "tag",
											"source": 8,
											"value": "216"
										},
										{
											"begin": 2029,
											"end": 2081,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 2119,
											"end": 2128,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 2100,
											"end": 2129,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "tag",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 2100,
											"end": 2129,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2090,
											"end": 2129,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 1949,
											"end": 2135,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1949,
											"end": 2135,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "tag",
											"source": 8,
											"value": "63"
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2208,
											"end": 2214,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2216,
											"end": 2222,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2269,
											"end": 2271,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 2257,
											"end": 2266,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2248,
											"end": 2255,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 2244,
											"end": 2267,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2240,
											"end": 2272,
											"name": "SLT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2285,
											"end": 2286,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2282,
											"end": 2283,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2275,
											"end": 2287,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "tag",
											"source": 8,
											"value": "219"
										},
										{
											"begin": 2237,
											"end": 2289,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 2327,
											"end": 2336,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 2308,
											"end": 2337,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "tag",
											"source": 8,
											"value": "220"
										},
										{
											"begin": 2308,
											"end": 2337,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2298,
											"end": 2337,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 2390,
											"end": 2392,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2379,
											"end": 2388,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 2375,
											"end": 2393,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "189"
										},
										{
											"begin": 2356,
											"end": 2394,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "tag",
											"source": 8,
											"value": "221"
										},
										{
											"begin": 2356,
											"end": 2394,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2346,
											"end": 2394,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2140,
											"end": 2400,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "tag",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2484,
											"end": 2485,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 2480,
											"end": 2492,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2527,
											"end": 2539,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2602,
											"end": 2606,
											"name": "PUSH",
											"source": 8,
											"value": "7F"
										},
										{
											"begin": 2594,
											"end": 2600,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2590,
											"end": 2607,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2580,
											"end": 2607,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "tag",
											"source": 8,
											"value": "223"
										},
										{
											"begin": 2548,
											"end": 2609,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2655,
											"end": 2657,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 2647,
											"end": 2653,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2644,
											"end": 2658,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 2624,
											"end": 2642,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 2621,
											"end": 2659,
											"name": "SUB",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2701,
											"end": 2711,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2696,
											"end": 2699,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2692,
											"end": 2712,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2689,
											"end": 2690,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2682,
											"end": 2713,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2736,
											"end": 2740,
											"name": "PUSH",
											"source": 8,
											"value": "22"
										},
										{
											"begin": 2733,
											"end": 2734,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2726,
											"end": 2741,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2764,
											"end": 2768,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2761,
											"end": 2762,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2754,
											"end": 2769,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "tag",
											"source": 8,
											"value": "224"
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2618,
											"end": 2779,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 2405,
											"end": 2785,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2790,
											"end": 2917,
											"name": "tag",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 2790,
											"end": 2917,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2851,
											"end": 2861,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 2846,
											"end": 2849,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 2842,
											"end": 2862,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 2839,
											"end": 2840,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2832,
											"end": 2863,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2882,
											"end": 2886,
											"name": "PUSH",
											"source": 8,
											"value": "11"
										},
										{
											"begin": 2879,
											"end": 2880,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 2872,
											"end": 2887,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 2906,
											"end": 2910,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 2903,
											"end": 2904,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2896,
											"end": 2911,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 2922,
											"end": 3050,
											"name": "tag",
											"source": 8,
											"value": "92"
										},
										{
											"begin": 2922,
											"end": 3050,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 2962,
											"end": 2965,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 2993,
											"end": 2994,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2989,
											"end": 2995,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 2986,
											"end": 2987,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 2983,
											"end": 2996,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 2980,
											"end": 3019,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 2980,
											"end": 3019,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 2980,
											"end": 3019,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 2999,
											"end": 3017,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 2999,
											"end": 3017,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 2999,
											"end": 3017,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 2999,
											"end": 3017,
											"name": "tag",
											"source": 8,
											"value": "228"
										},
										{
											"begin": 2999,
											"end": 3017,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3035,
											"end": 3044,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 3035,
											"end": 3044,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 2922,
											"end": 3050,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3892,
											"name": "tag",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 3470,
											"end": 3892,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3559,
											"end": 3560,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 3602,
											"end": 3607,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3559,
											"end": 3560,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "tag",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3637,
											"end": 3644,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3627,
											"end": 3635,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3624,
											"end": 3645,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3696,
											"end": 3700,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3692,
											"end": 3693,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3688,
											"end": 3694,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 3684,
											"end": 3701,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 3678,
											"end": 3682,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3675,
											"end": 3702,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3725,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3672,
											"end": 3725,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 3672,
											"end": 3725,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 3705,
											"end": 3723,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "tag",
											"source": 8,
											"value": "235"
										},
										{
											"begin": 3705,
											"end": 3723,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3755,
											"end": 3762,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3745,
											"end": 3753,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 3741,
											"end": 3763,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 3738,
											"end": 3793,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 3738,
											"end": 3793,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 3738,
											"end": 3793,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 3775,
											"end": 3791,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3775,
											"end": 3791,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 3775,
											"end": 3791,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3775,
											"end": 3791,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 3738,
											"end": 3793,
											"name": "tag",
											"source": 8,
											"value": "236"
										},
										{
											"begin": 3738,
											"end": 3793,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3854,
											"end": 3876,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3854,
											"end": 3876,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 3854,
											"end": 3876,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 3854,
											"end": 3876,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3814,
											"end": 3829,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3814,
											"end": 3829,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 3814,
											"end": 3829,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 3814,
											"end": 3829,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "231"
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "tag",
											"source": 8,
											"value": "233"
										},
										{
											"begin": 3616,
											"end": 3886,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3620,
											"end": 3623,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3892,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3892,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3892,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3892,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3892,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 3470,
											"end": 3892,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3897,
											"end": 4703,
											"name": "tag",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 3897,
											"end": 4703,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 3946,
											"end": 3951,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 3976,
											"end": 3984,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 3966,
											"end": 4046,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 3966,
											"end": 4046,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4017,
											"end": 4018,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4031,
											"end": 4036,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 4031,
											"end": 4036,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 3966,
											"end": 4046,
											"name": "tag",
											"source": 8,
											"value": "238"
										},
										{
											"begin": 3966,
											"end": 4046,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4065,
											"end": 4069,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4055,
											"end": 4131,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 4055,
											"end": 4131,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4102,
											"end": 4103,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4116,
											"end": 4121,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 4116,
											"end": 4121,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4055,
											"end": 4131,
											"name": "tag",
											"source": 8,
											"value": "239"
										},
										{
											"begin": 4055,
											"end": 4131,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4147,
											"end": 4151,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4165,
											"end": 4166,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4160,
											"end": 4219,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4160,
											"end": 4219,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4160,
											"end": 4219,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 4160,
											"end": 4219,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4233,
											"end": 4234,
											"name": "PUSH",
											"source": 8,
											"value": "2"
										},
										{
											"begin": 4228,
											"end": 4358,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4228,
											"end": 4358,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 4228,
											"end": 4358,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 4228,
											"end": 4358,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4140,
											"end": 4358,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 4140,
											"end": 4358,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4160,
											"end": 4219,
											"name": "tag",
											"source": 8,
											"value": "241"
										},
										{
											"begin": 4160,
											"end": 4219,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4190,
											"end": 4191,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4181,
											"end": 4191,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 4181,
											"end": 4191,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4204,
											"end": 4209,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4204,
											"end": 4209,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 4204,
											"end": 4209,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4228,
											"end": 4358,
											"name": "tag",
											"source": 8,
											"value": "242"
										},
										{
											"begin": 4228,
											"end": 4358,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4265,
											"end": 4268,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 4255,
											"end": 4263,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4252,
											"end": 4269,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4249,
											"end": 4292,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4249,
											"end": 4292,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 4249,
											"end": 4292,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 4272,
											"end": 4290,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "tag",
											"source": 8,
											"value": "244"
										},
										{
											"begin": 4272,
											"end": 4290,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4328,
											"end": 4329,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 4314,
											"end": 4330,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4314,
											"end": 4330,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 4343,
											"end": 4348,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 4343,
											"end": 4348,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4140,
											"end": 4358,
											"name": "tag",
											"source": 8,
											"value": "240"
										},
										{
											"begin": 4140,
											"end": 4358,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4140,
											"end": 4358,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 4442,
											"end": 4444,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 4432,
											"end": 4440,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4429,
											"end": 4445,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4423,
											"end": 4426,
											"name": "PUSH",
											"source": 8,
											"value": "133"
										},
										{
											"begin": 4417,
											"end": 4421,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4414,
											"end": 4427,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4410,
											"end": 4446,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4404,
											"end": 4406,
											"name": "PUSH",
											"source": 8,
											"value": "4E"
										},
										{
											"begin": 4394,
											"end": 4402,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4391,
											"end": 4407,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4386,
											"end": 4388,
											"name": "PUSH",
											"source": 8,
											"value": "B"
										},
										{
											"begin": 4380,
											"end": 4384,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4377,
											"end": 4389,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 4373,
											"end": 4408,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4370,
											"end": 4447,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 4367,
											"end": 4526,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4367,
											"end": 4526,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 4367,
											"end": 4526,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4479,
											"end": 4498,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4479,
											"end": 4498,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4479,
											"end": 4498,
											"name": "EXP",
											"source": 8
										},
										{
											"begin": 4511,
											"end": 4516,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "74"
										},
										{
											"begin": 4511,
											"end": 4516,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4367,
											"end": 4526,
											"name": "tag",
											"source": 8,
											"value": "245"
										},
										{
											"begin": 4367,
											"end": 4526,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4558,
											"end": 4592,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 4583,
											"end": 4591,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4577,
											"end": 4581,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4558,
											"end": 4592,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "191"
										},
										{
											"begin": 4558,
											"end": 4592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4558,
											"end": 4592,
											"name": "tag",
											"source": 8,
											"value": "246"
										},
										{
											"begin": 4558,
											"end": 4592,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4628,
											"end": 4634,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 4624,
											"end": 4625,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4620,
											"end": 4626,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 4616,
											"end": 4635,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 4607,
											"end": 4614,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4604,
											"end": 4636,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4601,
											"end": 4659,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4601,
											"end": 4659,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 4601,
											"end": 4659,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 4639,
											"end": 4657,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "tag",
											"source": 8,
											"value": "248"
										},
										{
											"begin": 4639,
											"end": 4657,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4677,
											"end": 4697,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 4677,
											"end": 4697,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 3897,
											"end": 4703,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3897,
											"end": 4703,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4708,
											"end": 4848,
											"name": "tag",
											"source": 8,
											"value": "109"
										},
										{
											"begin": 4708,
											"end": 4848,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4766,
											"end": 4771,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4795,
											"end": 4842,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "217"
										},
										{
											"begin": 4836,
											"end": 4840,
											"name": "PUSH",
											"source": 8,
											"value": "FF"
										},
										{
											"begin": 4826,
											"end": 4834,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 4822,
											"end": 4841,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4816,
											"end": 4820,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4795,
											"end": 4842,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "192"
										},
										{
											"begin": 4795,
											"end": 4842,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4853,
											"end": 5021,
											"name": "tag",
											"source": 8,
											"value": "111"
										},
										{
											"begin": 4853,
											"end": 5021,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 4893,
											"end": 4900,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4959,
											"end": 4960,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 4955,
											"end": 4956,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 4951,
											"end": 4957,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 4947,
											"end": 4961,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 4944,
											"end": 4945,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 4941,
											"end": 4962,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 4936,
											"end": 4937,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 4929,
											"end": 4938,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4922,
											"end": 4939,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4918,
											"end": 4963,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 4915,
											"end": 4986,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 4915,
											"end": 4986,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 4915,
											"end": 4986,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 4966,
											"end": 4984,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 4966,
											"end": 4984,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "190"
										},
										{
											"begin": 4966,
											"end": 4984,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 4966,
											"end": 4984,
											"name": "tag",
											"source": 8,
											"value": "253"
										},
										{
											"begin": 4966,
											"end": 4984,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5006,
											"end": 5015,
											"name": "MUL",
											"source": 8
										},
										{
											"begin": 5006,
											"end": 5015,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 4853,
											"end": 5021,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8014,
											"end": 8421,
											"name": "tag",
											"source": 8,
											"value": "168"
										},
										{
											"begin": 8014,
											"end": 8421,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8216,
											"end": 8218,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 8198,
											"end": 8219,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 8198,
											"end": 8219,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8198,
											"end": 8219,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8255,
											"end": 8257,
											"name": "PUSH",
											"source": 8,
											"value": "2B"
										},
										{
											"begin": 8235,
											"end": 8253,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8235,
											"end": 8253,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8235,
											"end": 8253,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8228,
											"end": 8258,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8294,
											"end": 8328,
											"name": "PUSH",
											"source": 8,
											"value": "496E697469616C697A61626C653A20636F6E7472616374206973206E6F742069"
										},
										{
											"begin": 8289,
											"end": 8291,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 8274,
											"end": 8292,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8274,
											"end": 8292,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8267,
											"end": 8329,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6E697469616C697A696E67"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A8"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8360,
											"end": 8362,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 8345,
											"end": 8363,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 8345,
											"end": 8363,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8338,
											"end": 8379,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8411,
											"end": 8414,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 8396,
											"end": 8415,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 8396,
											"end": 8415,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 8014,
											"end": 8421,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 8786,
											"end": 8913,
											"name": "tag",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 8786,
											"end": 8913,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8847,
											"end": 8857,
											"name": "PUSH",
											"source": 8,
											"value": "4E487B71"
										},
										{
											"begin": 8842,
											"end": 8845,
											"name": "PUSH",
											"source": 8,
											"value": "E0"
										},
										{
											"begin": 8838,
											"end": 8858,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 8835,
											"end": 8836,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8828,
											"end": 8859,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8878,
											"end": 8882,
											"name": "PUSH",
											"source": 8,
											"value": "41"
										},
										{
											"begin": 8875,
											"end": 8876,
											"name": "PUSH",
											"source": 8,
											"value": "4"
										},
										{
											"begin": 8868,
											"end": 8883,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 8902,
											"end": 8906,
											"name": "PUSH",
											"source": 8,
											"value": "24"
										},
										{
											"begin": 8899,
											"end": 8900,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8892,
											"end": 8907,
											"name": "REVERT",
											"source": 8
										},
										{
											"begin": 9044,
											"end": 9589,
											"name": "tag",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 9044,
											"end": 9589,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9146,
											"end": 9148,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 9141,
											"end": 9144,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9138,
											"end": 9149,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9135,
											"end": 9583,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9135,
											"end": 9583,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "158"
										},
										{
											"begin": 9135,
											"end": 9583,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9182,
											"end": 9183,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 9207,
											"end": 9212,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9203,
											"end": 9205,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9196,
											"end": 9213,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9252,
											"end": 9256,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9248,
											"end": 9250,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9238,
											"end": 9257,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": 9322,
											"end": 9324,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 9310,
											"end": 9320,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9306,
											"end": 9325,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9303,
											"end": 9304,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 9299,
											"end": 9326,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 9293,
											"end": 9297,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9289,
											"end": 9327,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9358,
											"end": 9362,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9346,
											"end": 9356,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 9343,
											"end": 9363,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9340,
											"end": 9387,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9340,
											"end": 9387,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 9340,
											"end": 9387,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9381,
											"end": 9385,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 9340,
											"end": 9387,
											"name": "tag",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 9340,
											"end": 9387,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9436,
											"end": 9438,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 9431,
											"end": 9434,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9427,
											"end": 9439,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9424,
											"end": 9425,
											"name": "PUSH",
											"source": 8,
											"value": "5"
										},
										{
											"begin": 9420,
											"end": 9440,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 9414,
											"end": 9418,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9410,
											"end": 9441,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9400,
											"end": 9441,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 9400,
											"end": 9441,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "tag",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9509,
											"end": 9511,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9502,
											"end": 9507,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9499,
											"end": 9512,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9554,
											"end": 9571,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 9554,
											"end": 9571,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9554,
											"end": 9571,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 9535,
											"end": 9536,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 9524,
											"end": 9537,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "tag",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 9491,
											"end": 9573,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9495,
											"end": 9498,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9495,
											"end": 9498,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9495,
											"end": 9498,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9044,
											"end": 9589,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9044,
											"end": 9589,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9044,
											"end": 9589,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 9044,
											"end": 9589,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9765,
											"end": 11117,
											"name": "tag",
											"source": 8,
											"value": "187"
										},
										{
											"begin": 9765,
											"end": 11117,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9891,
											"end": 9894,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9885,
											"end": 9895,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 9918,
											"end": 9936,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 9910,
											"end": 9916,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9907,
											"end": 9937,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 9904,
											"end": 9960,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 9904,
											"end": 9960,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 9904,
											"end": 9960,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "193"
										},
										{
											"begin": 9940,
											"end": 9958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "tag",
											"source": 8,
											"value": "275"
										},
										{
											"begin": 9940,
											"end": 9958,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 9969,
											"end": 10066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 10059,
											"end": 10065,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10019,
											"end": 10057,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 10051,
											"end": 10055,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10045,
											"end": 10056,
											"name": "SLOAD",
											"source": 8
										},
										{
											"begin": 10019,
											"end": 10057,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "69"
										},
										{
											"begin": 10019,
											"end": 10057,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10019,
											"end": 10057,
											"name": "tag",
											"source": 8,
											"value": "277"
										},
										{
											"begin": 10019,
											"end": 10057,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10013,
											"end": 10017,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 9969,
											"end": 10066,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "195"
										},
										{
											"begin": 9969,
											"end": 10066,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 9969,
											"end": 10066,
											"name": "tag",
											"source": 8,
											"value": "276"
										},
										{
											"begin": 9969,
											"end": 10066,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10121,
											"end": 10125,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 10121,
											"end": 10125,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 10185,
											"end": 10187,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 10174,
											"end": 10188,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10174,
											"end": 10188,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 10202,
											"end": 10203,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 10197,
											"end": 10860,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10197,
											"end": 10860,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 10197,
											"end": 10860,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 10197,
											"end": 10860,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10904,
											"end": 10905,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 10921,
											"end": 10927,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10918,
											"end": 11007,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10918,
											"end": 11007,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 10918,
											"end": 11007,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10973,
											"end": 10992,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10973,
											"end": 10992,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 10973,
											"end": 10992,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10967,
											"end": 10993,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10918,
											"end": 11007,
											"name": "tag",
											"source": 8,
											"value": "280"
										},
										{
											"begin": 10918,
											"end": 11007,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9722,
											"end": 9723,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 9718,
											"end": 9729,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 9718,
											"end": 9729,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9718,
											"end": 9729,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 9714,
											"end": 9738,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 9710,
											"end": 9739,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 9700,
											"end": 9740,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 9746,
											"end": 9747,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 9742,
											"end": 9753,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 9742,
											"end": 9753,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 9742,
											"end": 9753,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 9697,
											"end": 9754,
											"name": "OR",
											"source": 8
										},
										{
											"begin": 11020,
											"end": 11101,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 11020,
											"end": 11101,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 10167,
											"end": 11111,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "271"
										},
										{
											"begin": 10167,
											"end": 11111,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10197,
											"end": 10860,
											"name": "tag",
											"source": 8,
											"value": "279"
										},
										{
											"begin": 10197,
											"end": 10860,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 8991,
											"end": 8992,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 8984,
											"end": 8998,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 8984,
											"end": 8998,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 8984,
											"end": 8998,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 9028,
											"end": 9032,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 9015,
											"end": 9033,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 9015,
											"end": 9033,
											"name": "KECCAK256",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10233,
											"end": 10253,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 10233,
											"end": 10253,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10233,
											"end": 10253,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "tag",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10365,
											"end": 10372,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10362,
											"end": 10363,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10359,
											"end": 10373,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10454,
											"end": 10473,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 10454,
											"end": 10473,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 10454,
											"end": 10473,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10448,
											"end": 10474,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 10433,
											"end": 10475,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10433,
											"end": 10475,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10573,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10573,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10573,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10546,
											"end": 10573,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": 10514,
											"end": 10515,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 10502,
											"end": 10516,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10502,
											"end": 10516,
											"name": "SWAP2",
											"source": 8
										},
										{
											"begin": 10502,
											"end": 10516,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10502,
											"end": 10516,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10381,
											"end": 10400,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 10381,
											"end": 10400,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "283"
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "tag",
											"source": 8,
											"value": "285"
										},
										{
											"begin": 10351,
											"end": 10587,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 10355,
											"end": 10358,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 10615,
											"end": 10621,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10606,
											"end": 10613,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 10603,
											"end": 10622,
											"name": "LT",
											"source": 8
										},
										{
											"begin": 10600,
											"end": 10801,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 10600,
											"end": 10801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 10600,
											"end": 10801,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 10676,
											"end": 10695,
											"name": "DUP8",
											"source": 8
										},
										{
											"begin": 10676,
											"end": 10695,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 10676,
											"end": 10695,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10670,
											"end": 10696,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 10759,
											"end": 10760,
											"name": "PUSH",
											"source": 8,
											"value": "3"
										},
										{
											"begin": 10755,
											"end": 10769,
											"name": "DUP9",
											"source": 8
										},
										{
											"begin": 10755,
											"end": 10769,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10755,
											"end": 10769,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 10771,
											"end": 10774,
											"name": "PUSH",
											"source": 8,
											"value": "F8"
										},
										{
											"begin": 10751,
											"end": 10775,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10747,
											"end": 10784,
											"name": "SHR",
											"source": 8
										},
										{
											"begin": 10743,
											"end": 10785,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 10728,
											"end": 10786,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 10713,
											"end": 10787,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10713,
											"end": 10787,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": 10600,
											"end": 10801,
											"name": "tag",
											"source": 8,
											"value": "286"
										},
										{
											"begin": 10600,
											"end": 10801,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 10847,
											"end": 10848,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 10831,
											"end": 10845,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10831,
											"end": 10845,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 10831,
											"end": 10845,
											"name": "SHL",
											"source": 8
										},
										{
											"begin": 10827,
											"end": 10849,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 10814,
											"end": 10850,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 10814,
											"end": 10850,
											"name": "SSTORE",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9765,
											"end": 11117,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol",
								"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol",
								"upgradeable/ERC20Updateable.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"decimals()": "313ce567",
							"decreaseAllowance(address,uint256)": "a457c2d7",
							"increaseAllowance(address,uint256)": "39509351",
							"initialize()": "8129fc1c",
							"name()": "06fdde03",
							"symbol()": "95d89b41",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"upgradeable/ERC20Updateable.sol\":\"MyTokenV1\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xcf4a2c2c1a8b1570ee9a7059c218de1efbc9050239b1111dcfc24081391d11b7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://567bb374cec704c71a8279236b98161c99d68c4e4d490c6ce5d7f5f2acd3d665\",\"dweb:/ipfs/QmXHXmhmHc9c9ryUSvAoKjNYqn916H1wBFGpRUixWYw9Gp\"]},\"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x89d3edacd07d0f2df80f91f2b8bc0a53a638561ead828670441333d6915671bd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://653fb27aa67cf93b556d0664125719c16cb2a2852f5307b90f6f7ea9ac6d9196\",\"dweb:/ipfs/QmWS7gFdrmrGsUA4pHqtQFn5uAvWiiUxoao1W2HrFAmAj8\"]},\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"keccak256\":\"0x1d80b4eeb5e280428128cb596c2fe266a305be12afe34e04f8f1841e3a45f677\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9f23c96b26adbc4a00e928fcb667a9169e6a5a642912ce8b216e758bfedb6723\",\"dweb:/ipfs/Qmb9Ky4Lz4bpqsEMDeduZF16zdueDDJGDXtpyUHc3gy6mV\"]},\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\":{\"keccak256\":\"0xffeed6b3cac845b2af4afb30d87cecbd45dec3c408360c157a3db08e28b45043\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5f3d128cf6b67b0496353c536b227fb2c698c21ec86f3454a41ba50a63908bed\",\"dweb:/ipfs/QmdAdMnJuqiXc4ccwBdq2wh7gg2rF8X4TrdZcZvc9GADGm\"]},\"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol\":{\"keccak256\":\"0x56492cd2e84fdbc5f39c722ebdbf4ec02a262ac026fdc40f2ad2eb0cda0c76b9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b52b56a3db157dd2135a0520396282640b14d442327041355de80cb218ce8552\",\"dweb:/ipfs/QmQ7pDQ66ZDhvZTnGBfJLVMBRhzu7CWz4cPDZkUe8WLYea\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x53849a4d64d7b6a25a4f8cea2a16ccded9d5cf57e21d8d2ce24d40b0c2a71863\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://00f801f58c90aa307a563c301e895f371c1e1e8ef0e8645d9601a449a1e2752c\",\"dweb:/ipfs/QmUtMkLnPxyoSx8bRiJdUwVGfxDacaHphp4UEcSKMWgY5b\"]},\"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0x7ca50b2db181b128c3c202f67bbc2fc189628f41a8643027c445facc907a10b6\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1baa3e4dd802cf1e2ed3634f79f3b1f86397f1bcb819f55811da1a9bf6a6189c\",\"dweb:/ipfs/QmPmiK9Tj3P7fhnroK2REuendr4sjx4vjev7PRQJyxMob5\"]},\"upgradeable/ERC20Updateable.sol\":{\"keccak256\":\"0xf7d8fe59f30c28e271495ed890b95242d4bf1a319cef10131e48e84f350883f3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5813fea1f4a29095819f06c4c7f8bc16bdccfd5166a73071765ae00de8de9b6f\",\"dweb:/ipfs/QmSHfPXmkXrEVoVLP6aemronQ4CiNyLW9HU9FXx1ySt8iS\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 138,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "_initialized",
								"offset": 0,
								"slot": "0",
								"type": "t_uint8"
							},
							{
								"astId": 141,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "_initializing",
								"offset": 1,
								"slot": "0",
								"type": "t_bool"
							},
							{
								"astId": 1322,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)50_storage"
							},
							{
								"astId": 301,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "_balances",
								"offset": 0,
								"slot": "51",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 307,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "_allowances",
								"offset": 0,
								"slot": "52",
								"type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
							},
							{
								"astId": 309,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "_totalSupply",
								"offset": 0,
								"slot": "53",
								"type": "t_uint256"
							},
							{
								"astId": 311,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "_name",
								"offset": 0,
								"slot": "54",
								"type": "t_string_storage"
							},
							{
								"astId": 313,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "_symbol",
								"offset": 0,
								"slot": "55",
								"type": "t_string_storage"
							},
							{
								"astId": 893,
								"contract": "upgradeable/ERC20Updateable.sol:MyTokenV1",
								"label": "__gap",
								"offset": 0,
								"slot": "56",
								"type": "t_array(t_uint256)45_storage"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_array(t_uint256)45_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[45]",
								"numberOfBytes": "1440"
							},
							"t_array(t_uint256)50_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[50]",
								"numberOfBytes": "1600"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_mapping(t_address,t_uint256))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => uint256))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_uint256)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							},
							"t_uint8": {
								"encoding": "inplace",
								"label": "uint8",
								"numberOfBytes": "1"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1281
						],
						"ContextUpgradeable": [
							1323
						],
						"Initializable": [
							282
						],
						"OwnableUpgradeable": [
							131
						]
					},
					"id": 132,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "105:23:0"
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 1324,
							"src": "132:41:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 132,
							"sourceUnit": 283,
							"src": "175:42:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 282,
										"src": "768:13:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "768:13:0"
								},
								{
									"baseName": {
										"id": 7,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1323,
										"src": "783:18:0"
									},
									"id": 8,
									"nodeType": "InheritanceSpecifier",
									"src": "783:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "221:505:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n By default, the owner account will be the one that deploys the contract. This\n can later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 131,
							"linearizedBaseContracts": [
								131,
								1323,
								282
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "746:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 10,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "825:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "809:22:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 9,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "809:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 16,
									"name": "OwnershipTransferred",
									"nameLocation": "846:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 15,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 12,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "883:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "867:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 11,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "867:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "914:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 16,
												"src": "898:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "898:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "866:57:0"
									},
									"src": "840:84:0"
								},
								{
									"body": {
										"id": 25,
										"nodeType": "Block",
										"src": "1083:45:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 22,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 37,
														"src": "1094:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
															"typeString": "function ()"
														}
													},
													"id": 23,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1094:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 24,
												"nodeType": "ExpressionStatement",
												"src": "1094:26:0"
											}
										]
									},
									"documentation": {
										"id": 17,
										"nodeType": "StructuredDocumentation",
										"src": "932:93:0",
										"text": " @dev Initializes the contract setting the deployer as the initial owner."
									},
									"id": 26,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 20,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 19,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1066:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1066:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1040:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1054:2:0"
									},
									"returnParameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1083:0:0"
									},
									"scope": 131,
									"src": "1031:97:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 36,
										"nodeType": "Block",
										"src": "1198:51:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 32,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1308,
																"src": "1228:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 33,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1228:12:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 31,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "1209:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 34,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1209:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 35,
												"nodeType": "ExpressionStatement",
												"src": "1209:32:0"
											}
										]
									},
									"id": 37,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 29,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 28,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "1181:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1181:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1145:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1169:2:0"
									},
									"returnParameters": {
										"id": 30,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1198:0:0"
									},
									"scope": 131,
									"src": "1136:113:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 44,
										"nodeType": "Block",
										"src": "1363:44:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 40,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 68,
														"src": "1374:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 41,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1374:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 42,
												"nodeType": "ExpressionStatement",
												"src": "1374:13:0"
											},
											{
												"id": 43,
												"nodeType": "PlaceholderStatement",
												"src": "1398:1:0"
											}
										]
									},
									"documentation": {
										"id": 38,
										"nodeType": "StructuredDocumentation",
										"src": "1257:79:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 45,
									"name": "onlyOwner",
									"nameLocation": "1351:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 39,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1360:2:0"
									},
									"src": "1342:65:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 53,
										"nodeType": "Block",
										"src": "1543:32:0",
										"statements": [
											{
												"expression": {
													"id": 51,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "1561:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 50,
												"id": 52,
												"nodeType": "Return",
												"src": "1554:13:0"
											}
										]
									},
									"documentation": {
										"id": 46,
										"nodeType": "StructuredDocumentation",
										"src": "1415:67:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 54,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1497:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 47,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1502:2:0"
									},
									"returnParameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 49,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 54,
												"src": "1534:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 48,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1534:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1533:9:0"
									},
									"scope": 131,
									"src": "1488:87:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 67,
										"nodeType": "Block",
										"src": "1698:87:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 63,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 59,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 54,
																	"src": "1717:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 60,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1717:7:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 61,
																	"name": "_msgSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1308,
																	"src": "1728:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																		"typeString": "function () view returns (address)"
																	}
																},
																"id": 62,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1728:12:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "1717:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572",
															"id": 64,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1742:34:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															},
															"value": "Ownable: caller is not the owner"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe",
																"typeString": "literal_string \"Ownable: caller is not the owner\""
															}
														],
														"id": 58,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "1709:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 65,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1709:68:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 66,
												"nodeType": "ExpressionStatement",
												"src": "1709:68:0"
											}
										]
									},
									"documentation": {
										"id": 55,
										"nodeType": "StructuredDocumentation",
										"src": "1583:64:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 68,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1662:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 56,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1673:2:0"
									},
									"returnParameters": {
										"id": 57,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1698:0:0"
									},
									"scope": 131,
									"src": "1653:132:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 81,
										"nodeType": "Block",
										"src": "2190:49:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 77,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2228:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 76,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2220:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 75,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2220:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 78,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2220:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 74,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2201:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 79,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2201:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 80,
												"nodeType": "ExpressionStatement",
												"src": "2201:30:0"
											}
										]
									},
									"documentation": {
										"id": 69,
										"nodeType": "StructuredDocumentation",
										"src": "1793:337:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions anymore. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby removing any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 82,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 72,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 71,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2180:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2180:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2145:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 70,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2162:2:0"
									},
									"returnParameters": {
										"id": 73,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2190:0:0"
									},
									"scope": 131,
									"src": "2136:103:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "2464:131:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 96,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 91,
																"name": "newOwner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 85,
																"src": "2483:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 94,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2503:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 93,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2495:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 92,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "2495:7:0",
																		"typeDescriptions": {}
																	}
																},
																"id": 95,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2495:10:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "2483:22:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373",
															"id": 97,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2507:40:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															},
															"value": "Ownable: new owner is the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe",
																"typeString": "literal_string \"Ownable: new owner is the zero address\""
															}
														],
														"id": 90,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2475:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 98,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2475:73:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 99,
												"nodeType": "ExpressionStatement",
												"src": "2475:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 101,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 85,
															"src": "2578:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 100,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 125,
														"src": "2559:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2559:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 103,
												"nodeType": "ExpressionStatement",
												"src": "2559:28:0"
											}
										]
									},
									"documentation": {
										"id": 83,
										"nodeType": "StructuredDocumentation",
										"src": "2247:141:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 45,
												"src": "2454:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2454:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2403:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 85,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2429:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 105,
												"src": "2421:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 84,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2421:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2420:18:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2464:0:0"
									},
									"scope": 131,
									"src": "2394:201:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 124,
										"nodeType": "Block",
										"src": "2818:128:0",
										"statements": [
											{
												"assignments": [
													112
												],
												"declarations": [
													{
														"constant": false,
														"id": 112,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "2837:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 124,
														"src": "2829:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 111,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "2829:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 114,
												"initialValue": {
													"id": 113,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 10,
													"src": "2848:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2829:25:0"
											},
											{
												"expression": {
													"id": 117,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 115,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 10,
														"src": "2865:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 116,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 108,
														"src": "2874:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2865:17:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 118,
												"nodeType": "ExpressionStatement",
												"src": "2865:17:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 120,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 112,
															"src": "2919:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 121,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 108,
															"src": "2929:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 119,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 16,
														"src": "2898:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 122,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2898:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 123,
												"nodeType": "EmitStatement",
												"src": "2893:45:0"
											}
										]
									},
									"documentation": {
										"id": 106,
										"nodeType": "StructuredDocumentation",
										"src": "2603:146:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 125,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "2764:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 109,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 108,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2791:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 125,
												"src": "2783:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 107,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2783:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2782:18:0"
									},
									"returnParameters": {
										"id": 110,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2818:0:0"
									},
									"scope": 131,
									"src": "2755:191:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 126,
										"nodeType": "StructuredDocumentation",
										"src": "2954:258:0",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 130,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "3238:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 131,
									"src": "3218:25:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 127,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3218:7:0",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 129,
										"length": {
											"hexValue": "3439",
											"id": 128,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "3226:2:0",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "3218:11:0",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 132,
							"src": "728:2519:0",
							"usedErrors": []
						}
					],
					"src": "105:3144:0"
				},
				"id": 0
			},
			"node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1281
						],
						"Initializable": [
							282
						]
					},
					"id": 283,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 133,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".2"
							],
							"nodeType": "PragmaDirective",
							"src": "116:23:1"
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol",
							"file": "../../utils/AddressUpgradeable.sol",
							"id": 134,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 283,
							"sourceUnit": 1282,
							"src": "143:44:1",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 135,
								"nodeType": "StructuredDocumentation",
								"src": "191:2246:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 282,
							"linearizedBaseContracts": [
								282
							],
							"name": "Initializable",
							"nameLocation": "2457:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 136,
										"nodeType": "StructuredDocumentation",
										"src": "2478:112:1",
										"text": " @dev Indicates that the contract has been initialized.\n @custom:oz-retyped-from bool"
									},
									"id": 138,
									"mutability": "mutable",
									"name": "_initialized",
									"nameLocation": "2610:12:1",
									"nodeType": "VariableDeclaration",
									"scope": 282,
									"src": "2596:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 137,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "2596:5:1",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"documentation": {
										"id": 139,
										"nodeType": "StructuredDocumentation",
										"src": "2631:93:1",
										"text": " @dev Indicates that the contract is in the process of being initialized."
									},
									"id": 141,
									"mutability": "mutable",
									"name": "_initializing",
									"nameLocation": "2743:13:1",
									"nodeType": "VariableDeclaration",
									"scope": 282,
									"src": "2730:26:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 140,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "2730:4:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "private"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 142,
										"nodeType": "StructuredDocumentation",
										"src": "2765:92:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
									"id": 146,
									"name": "Initialized",
									"nameLocation": "2869:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 144,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "2887:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 146,
												"src": "2881:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 143,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "2881:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2880:15:1"
									},
									"src": "2863:33:1"
								},
								{
									"body": {
										"id": 201,
										"nodeType": "Block",
										"src": "3178:498:1",
										"statements": [
											{
												"assignments": [
													150
												],
												"declarations": [
													{
														"constant": false,
														"id": 150,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "3194:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 201,
														"src": "3189:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 149,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3189:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 153,
												"initialValue": {
													"id": 152,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "3211:14:1",
													"subExpression": {
														"id": 151,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "3212:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3189:36:1"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 159,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 155,
																			"name": "isTopLevelCall",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 150,
																			"src": "3259:14:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 158,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 156,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3277:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "<",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 157,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3292:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3277:16:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3259:34:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 160,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3258:36:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "||",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"id": 172,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 168,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "UnaryOperation",
																			"operator": "!",
																			"prefix": true,
																			"src": "3299:45:1",
																			"subExpression": {
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"id": 165,
																								"name": "this",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 4294967268,
																								"src": "3338:4:1",
																								"typeDescriptions": {
																									"typeIdentifier": "t_contract$_Initializable_$282",
																									"typeString": "contract Initializable"
																								}
																							}
																						],
																						"expression": {
																							"argumentTypes": [
																								{
																									"typeIdentifier": "t_contract$_Initializable_$282",
																									"typeString": "contract Initializable"
																								}
																							],
																							"id": 164,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"nodeType": "ElementaryTypeNameExpression",
																							"src": "3330:7:1",
																							"typeDescriptions": {
																								"typeIdentifier": "t_type$_t_address_$",
																								"typeString": "type(address)"
																							},
																							"typeName": {
																								"id": 163,
																								"name": "address",
																								"nodeType": "ElementaryTypeName",
																								"src": "3330:7:1",
																								"typeDescriptions": {}
																							}
																						},
																						"id": 166,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"kind": "typeConversion",
																						"lValueRequested": false,
																						"names": [],
																						"nodeType": "FunctionCall",
																						"src": "3330:13:1",
																						"tryCall": false,
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					],
																					"expression": {
																						"id": 161,
																						"name": "AddressUpgradeable",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1281,
																						"src": "3300:18:1",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_contract$_AddressUpgradeable_$1281_$",
																							"typeString": "type(library AddressUpgradeable)"
																						}
																					},
																					"id": 162,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"memberName": "isContract",
																					"nodeType": "MemberAccess",
																					"referencedDeclaration": 1015,
																					"src": "3300:29:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																						"typeString": "function (address) view returns (bool)"
																					}
																				},
																				"id": 167,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "3300:44:1",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&&",
																		"rightExpression": {
																			"commonType": {
																				"typeIdentifier": "t_uint8",
																				"typeString": "uint8"
																			},
																			"id": 171,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 169,
																				"name": "_initialized",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 138,
																				"src": "3348:12:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint8",
																					"typeString": "uint8"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "==",
																			"rightExpression": {
																				"hexValue": "31",
																				"id": 170,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3364:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_1_by_1",
																					"typeString": "int_const 1"
																				},
																				"value": "1"
																			},
																			"src": "3348:17:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"src": "3299:66:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	}
																],
																"id": 173,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3298:68:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "3258:108:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 175,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3381:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 154,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "3236:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 176,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3236:204:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 177,
												"nodeType": "ExpressionStatement",
												"src": "3236:204:1"
											},
											{
												"expression": {
													"id": 180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 178,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "3451:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 179,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3466:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "3451:16:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 181,
												"nodeType": "ExpressionStatement",
												"src": "3451:16:1"
											},
											{
												"condition": {
													"id": 182,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3482:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 188,
												"nodeType": "IfStatement",
												"src": "3478:67:1",
												"trueBody": {
													"id": 187,
													"nodeType": "Block",
													"src": "3498:47:1",
													"statements": [
														{
															"expression": {
																"id": 185,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 183,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3513:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 184,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3529:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "3513:20:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 186,
															"nodeType": "ExpressionStatement",
															"src": "3513:20:1"
														}
													]
												}
											},
											{
												"id": 189,
												"nodeType": "PlaceholderStatement",
												"src": "3555:1:1"
											},
											{
												"condition": {
													"id": 190,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3571:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 200,
												"nodeType": "IfStatement",
												"src": "3567:102:1",
												"trueBody": {
													"id": 199,
													"nodeType": "Block",
													"src": "3587:82:1",
													"statements": [
														{
															"expression": {
																"id": 193,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 191,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "3602:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 192,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3618:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "3602:21:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 194,
															"nodeType": "ExpressionStatement",
															"src": "3602:21:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "3655:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 195,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "3643:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 197,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3643:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 198,
															"nodeType": "EmitStatement",
															"src": "3638:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 147,
										"nodeType": "StructuredDocumentation",
										"src": "2904:245:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`."
									},
									"id": 202,
									"name": "initializer",
									"nameLocation": "3164:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 148,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3175:2:1"
									},
									"src": "3155:521:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 234,
										"nodeType": "Block",
										"src": "4505:262:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"id": 213,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 209,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "UnaryOperation",
																"operator": "!",
																"prefix": true,
																"src": "4524:14:1",
																"subExpression": {
																	"id": 208,
																	"name": "_initializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 141,
																	"src": "4525:13:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&&",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																},
																"id": 212,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 210,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "4542:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"id": 211,
																	"name": "version",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "4557:7:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "4542:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"src": "4524:40:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564",
															"id": 214,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4566:48:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															},
															"value": "Initializable: contract is already initialized"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_7a2a4e26842155ea933fe6eb6e3137eb5a296dcdf55721c552be7b4c3cc23759",
																"typeString": "literal_string \"Initializable: contract is already initialized\""
															}
														],
														"id": 207,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4516:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 215,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4516:99:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 216,
												"nodeType": "ExpressionStatement",
												"src": "4516:99:1"
											},
											{
												"expression": {
													"id": 219,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 217,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "4626:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 218,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 205,
														"src": "4641:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "4626:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"id": 220,
												"nodeType": "ExpressionStatement",
												"src": "4626:22:1"
											},
											{
												"expression": {
													"id": 223,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 221,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "4659:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 222,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4675:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "4659:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 224,
												"nodeType": "ExpressionStatement",
												"src": "4659:20:1"
											},
											{
												"id": 225,
												"nodeType": "PlaceholderStatement",
												"src": "4690:1:1"
											},
											{
												"expression": {
													"id": 228,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 226,
														"name": "_initializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "4702:13:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 227,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4718:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "4702:21:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 229,
												"nodeType": "ExpressionStatement",
												"src": "4702:21:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 231,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 205,
															"src": "4751:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 230,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 146,
														"src": "4739:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
															"typeString": "function (uint8)"
														}
													},
													"id": 232,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4739:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 233,
												"nodeType": "EmitStatement",
												"src": "4734:25:1"
											}
										]
									},
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "3684:777:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n initialization step. This is essential to configure modules that are added through upgrades and that require\n initialization.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator."
									},
									"id": 235,
									"name": "reinitializer",
									"nameLocation": "4476:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 206,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 205,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "4496:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 235,
												"src": "4490:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 204,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "4490:5:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4489:15:1"
									},
									"src": "4467:300:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 244,
										"nodeType": "Block",
										"src": "5011:100:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 239,
															"name": "_initializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 141,
															"src": "5030:13:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e7472616374206973206e6f7420696e697469616c697a696e67",
															"id": 240,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5045:45:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															},
															"value": "Initializable: contract is not initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_d688db918bb9dd50354922faa108595679886fe9ff08046ad1ffe30aaea55f8b",
																"typeString": "literal_string \"Initializable: contract is not initializing\""
															}
														],
														"id": 238,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5022:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 241,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5022:69:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 242,
												"nodeType": "ExpressionStatement",
												"src": "5022:69:1"
											},
											{
												"id": 243,
												"nodeType": "PlaceholderStatement",
												"src": "5102:1:1"
											}
										]
									},
									"documentation": {
										"id": 236,
										"nodeType": "StructuredDocumentation",
										"src": "4775:202:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 245,
									"name": "onlyInitializing",
									"nameLocation": "4992:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5008:2:1"
									},
									"src": "4983:128:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 280,
										"nodeType": "Block",
										"src": "5567:236:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "UnaryOperation",
															"operator": "!",
															"prefix": true,
															"src": "5586:14:1",
															"subExpression": {
																"id": 250,
																"name": "_initializing",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 141,
																"src": "5587:13:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "496e697469616c697a61626c653a20636f6e747261637420697320696e697469616c697a696e67",
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5602:41:1",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															},
															"value": "Initializable: contract is initializing"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_a53f5879e7518078ff19b2e3d6b41e757a87364ec6872787feb45bfc41131d1a",
																"typeString": "literal_string \"Initializable: contract is initializing\""
															}
														],
														"id": 249,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5578:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5578:66:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 254,
												"nodeType": "ExpressionStatement",
												"src": "5578:66:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 261,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 255,
														"name": "_initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 138,
														"src": "5659:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "5679:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	},
																	"typeName": {
																		"id": 257,
																		"name": "uint8",
																		"nodeType": "ElementaryTypeName",
																		"src": "5679:5:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint8_$",
																		"typeString": "type(uint8)"
																	}
																],
																"id": 256,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "5674:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 259,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "5674:11:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint8",
																"typeString": "type(uint8)"
															}
														},
														"id": 260,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "5674:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"src": "5659:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 279,
												"nodeType": "IfStatement",
												"src": "5655:141:1",
												"trueBody": {
													"id": 278,
													"nodeType": "Block",
													"src": "5691:105:1",
													"statements": [
														{
															"expression": {
																"id": 268,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 262,
																	"name": "_initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 138,
																	"src": "5706:12:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 265,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "5726:5:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				},
																				"typeName": {
																					"id": 264,
																					"name": "uint8",
																					"nodeType": "ElementaryTypeName",
																					"src": "5726:5:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint8_$",
																					"typeString": "type(uint8)"
																				}
																			],
																			"id": 263,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "5721:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 266,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5721:11:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint8",
																			"typeString": "type(uint8)"
																		}
																	},
																	"id": 267,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "5721:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "5706:30:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"id": 269,
															"nodeType": "ExpressionStatement",
															"src": "5706:30:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 273,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "5773:5:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					},
																					"typeName": {
																						"id": 272,
																						"name": "uint8",
																						"nodeType": "ElementaryTypeName",
																						"src": "5773:5:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint8_$",
																						"typeString": "type(uint8)"
																					}
																				],
																				"id": 271,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "5768:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 274,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5768:11:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint8",
																				"typeString": "type(uint8)"
																			}
																		},
																		"id": 275,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "5768:15:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	],
																	"id": 270,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 146,
																	"src": "5756:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint8_$returns$__$",
																		"typeString": "function (uint8)"
																	}
																},
																"id": 276,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5756:28:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 277,
															"nodeType": "EmitStatement",
															"src": "5751:33:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 246,
										"nodeType": "StructuredDocumentation",
										"src": "5119:393:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies."
									},
									"id": 281,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "5527:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5547:2:1"
									},
									"returnParameters": {
										"id": 248,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5567:0:1"
									},
									"scope": 282,
									"src": "5518:285:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 283,
							"src": "2439:3367:1",
							"usedErrors": []
						}
					],
					"src": "116:5692:1"
				},
				"id": 1
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1281
						],
						"ContextUpgradeable": [
							1323
						],
						"ERC20Upgradeable": [
							894
						],
						"IERC20MetadataUpgradeable": [
							997
						],
						"IERC20Upgradeable": [
							972
						],
						"Initializable": [
							282
						]
					},
					"id": 895,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 284,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "108:23:2"
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "./IERC20Upgradeable.sol",
							"id": 285,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 895,
							"sourceUnit": 973,
							"src": "135:33:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
							"file": "./extensions/IERC20MetadataUpgradeable.sol",
							"id": 286,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 895,
							"sourceUnit": 998,
							"src": "170:52:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../../utils/ContextUpgradeable.sol",
							"id": 287,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 895,
							"sourceUnit": 1324,
							"src": "224:44:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../../proxy/utils/Initializable.sol",
							"id": 288,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 895,
							"sourceUnit": 283,
							"src": "270:45:2",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 290,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 282,
										"src": "1544:13:2"
									},
									"id": 291,
									"nodeType": "InheritanceSpecifier",
									"src": "1544:13:2"
								},
								{
									"baseName": {
										"id": 292,
										"name": "ContextUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1323,
										"src": "1559:18:2"
									},
									"id": 293,
									"nodeType": "InheritanceSpecifier",
									"src": "1559:18:2"
								},
								{
									"baseName": {
										"id": 294,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 972,
										"src": "1579:17:2"
									},
									"id": 295,
									"nodeType": "InheritanceSpecifier",
									"src": "1579:17:2"
								},
								{
									"baseName": {
										"id": 296,
										"name": "IERC20MetadataUpgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 997,
										"src": "1598:25:2"
									},
									"id": 297,
									"nodeType": "InheritanceSpecifier",
									"src": "1598:25:2"
								}
							],
							"canonicalName": "ERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 289,
								"nodeType": "StructuredDocumentation",
								"src": "319:1194:2",
								"text": " @dev Implementation of the {IERC20} interface.\n This implementation is agnostic to the way tokens are created. This means\n that a supply mechanism has to be added in a derived contract using {_mint}.\n For a generic mechanism see {ERC20PresetMinterPauser}.\n TIP: For a detailed writeup see our guide\n https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n to implement supply mechanisms].\n We have followed general OpenZeppelin Contracts guidelines: functions revert\n instead returning `false` on failure. This behavior is nonetheless\n conventional and does not conflict with the expectations of ERC20\n applications.\n Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n This allows applications to reconstruct the allowance for all accounts just\n by listening to said events. Other implementations of the EIP may not emit\n these events, as it isn't required by the specification.\n Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n functions have been added to mitigate the well-known issues around setting\n allowances. See {IERC20-approve}."
							},
							"fullyImplemented": true,
							"id": 894,
							"linearizedBaseContracts": [
								894,
								997,
								972,
								1323,
								282
							],
							"name": "ERC20Upgradeable",
							"nameLocation": "1524:16:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 301,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1667:9:2",
									"nodeType": "VariableDeclaration",
									"scope": 894,
									"src": "1631:45:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 300,
										"keyType": {
											"id": 298,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1639:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1631:27:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueType": {
											"id": 299,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1650:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 307,
									"mutability": "mutable",
									"name": "_allowances",
									"nameLocation": "1741:11:2",
									"nodeType": "VariableDeclaration",
									"scope": 894,
									"src": "1685:67:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
										"typeString": "mapping(address => mapping(address => uint256))"
									},
									"typeName": {
										"id": 306,
										"keyType": {
											"id": 302,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1693:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1685:47:2",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
											"typeString": "mapping(address => mapping(address => uint256))"
										},
										"valueType": {
											"id": 305,
											"keyType": {
												"id": 303,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1712:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1704:27:2",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
												"typeString": "mapping(address => uint256)"
											},
											"valueType": {
												"id": 304,
												"name": "uint256",
												"nodeType": "ElementaryTypeName",
												"src": "1723:7:2",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 309,
									"mutability": "mutable",
									"name": "_totalSupply",
									"nameLocation": "1777:12:2",
									"nodeType": "VariableDeclaration",
									"scope": 894,
									"src": "1761:28:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 308,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1761:7:2",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 311,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "1813:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 894,
									"src": "1798:20:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 310,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1798:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 313,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1840:7:2",
									"nodeType": "VariableDeclaration",
									"scope": 894,
									"src": "1825:22:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 312,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1825:6:2",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 328,
										"nodeType": "Block",
										"src": "2260:57:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 324,
															"name": "name_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 316,
															"src": "2294:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"id": 325,
															"name": "symbol_",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 318,
															"src": "2301:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 323,
														"name": "__ERC20_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 347,
														"src": "2271:22:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 326,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2271:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 327,
												"nodeType": "ExpressionStatement",
												"src": "2271:38:2"
											}
										]
									},
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "1856:306:2",
										"text": " @dev Sets the values for {name} and {symbol}.\n The default value of {decimals} is 18. To select a different value for\n {decimals} you should overload it.\n All two of these values are immutable: they can only be set once during\n construction."
									},
									"id": 329,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 321,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 320,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "2243:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2243:16:2"
										}
									],
									"name": "__ERC20_init",
									"nameLocation": "2177:12:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2204:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2190:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 315,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2190:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2225:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 329,
												"src": "2211:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 317,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2211:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2189:44:2"
									},
									"returnParameters": {
										"id": 322,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2260:0:2"
									},
									"scope": 894,
									"src": "2168:149:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 346,
										"nodeType": "Block",
										"src": "2427:60:2",
										"statements": [
											{
												"expression": {
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 338,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 311,
														"src": "2438:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 339,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 331,
														"src": "2446:5:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2438:13:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 341,
												"nodeType": "ExpressionStatement",
												"src": "2438:13:2"
											},
											{
												"expression": {
													"id": 344,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 342,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 313,
														"src": "2462:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 343,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 333,
														"src": "2472:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "2462:17:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 345,
												"nodeType": "ExpressionStatement",
												"src": "2462:17:2"
											}
										]
									},
									"id": 347,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 336,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 335,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "2410:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "2410:16:2"
										}
									],
									"name": "__ERC20_init_unchained",
									"nameLocation": "2334:22:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 334,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 331,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "2371:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "2357:19:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 330,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2357:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 333,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "2392:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 347,
												"src": "2378:21:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 332,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2378:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2356:44:2"
									},
									"returnParameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2427:0:2"
									},
									"scope": 894,
									"src": "2325:162:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										984
									],
									"body": {
										"id": 356,
										"nodeType": "Block",
										"src": "2626:31:2",
										"statements": [
											{
												"expression": {
													"id": 354,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 311,
													"src": "2644:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 353,
												"id": 355,
												"nodeType": "Return",
												"src": "2637:12:2"
											}
										]
									},
									"documentation": {
										"id": 348,
										"nodeType": "StructuredDocumentation",
										"src": "2495:56:2",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 357,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2566:4:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 350,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2593:8:2"
									},
									"parameters": {
										"id": 349,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2570:2:2"
									},
									"returnParameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 352,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 357,
												"src": "2611:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 351,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2611:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2610:15:2"
									},
									"scope": 894,
									"src": "2557:100:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										990
									],
									"body": {
										"id": 366,
										"nodeType": "Block",
										"src": "2847:33:2",
										"statements": [
											{
												"expression": {
													"id": 364,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 313,
													"src": "2865:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 363,
												"id": 365,
												"nodeType": "Return",
												"src": "2858:14:2"
											}
										]
									},
									"documentation": {
										"id": 358,
										"nodeType": "StructuredDocumentation",
										"src": "2665:105:2",
										"text": " @dev Returns the symbol of the token, usually a shorter version of the\n name."
									},
									"functionSelector": "95d89b41",
									"id": 367,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2785:6:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 360,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "2814:8:2"
									},
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2791:2:2"
									},
									"returnParameters": {
										"id": 363,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 362,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 367,
												"src": "2832:13:2",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 361,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2832:6:2",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2831:15:2"
									},
									"scope": 894,
									"src": "2776:104:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										996
									],
									"body": {
										"id": 376,
										"nodeType": "Block",
										"src": "3584:28:2",
										"statements": [
											{
												"expression": {
													"hexValue": "3138",
													"id": 374,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3602:2:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_18_by_1",
														"typeString": "int_const 18"
													},
													"value": "18"
												},
												"functionReturnParameters": 373,
												"id": 375,
												"nodeType": "Return",
												"src": "3595:9:2"
											}
										]
									},
									"documentation": {
										"id": 368,
										"nodeType": "StructuredDocumentation",
										"src": "2888:625:2",
										"text": " @dev Returns the number of decimals used to get its user representation.\n For example, if `decimals` equals `2`, a balance of `505` tokens should\n be displayed to a user as `5.05` (`505 / 10 ** 2`).\n Tokens usually opt for a value of 18, imitating the relationship between\n Ether and Wei. This is the value {ERC20} uses, unless this function is\n overridden;\n NOTE: This information is only used for _display_ purposes: it in\n no way affects any of the arithmetic of the contract, including\n {IERC20-balanceOf} and {IERC20-transfer}."
									},
									"functionSelector": "313ce567",
									"id": 377,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "3528:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 370,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3559:8:2"
									},
									"parameters": {
										"id": 369,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3536:2:2"
									},
									"returnParameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 377,
												"src": "3577:5:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 371,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "3577:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3576:7:2"
									},
									"scope": 894,
									"src": "3519:93:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										921
									],
									"body": {
										"id": 386,
										"nodeType": "Block",
										"src": "3747:38:2",
										"statements": [
											{
												"expression": {
													"id": 384,
													"name": "_totalSupply",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 309,
													"src": "3765:12:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 383,
												"id": 385,
												"nodeType": "Return",
												"src": "3758:19:2"
											}
										]
									},
									"documentation": {
										"id": 378,
										"nodeType": "StructuredDocumentation",
										"src": "3620:51:2",
										"text": " @dev See {IERC20-totalSupply}."
									},
									"functionSelector": "18160ddd",
									"id": 387,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "3686:11:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 380,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3720:8:2"
									},
									"parameters": {
										"id": 379,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3697:2:2"
									},
									"returnParameters": {
										"id": 383,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 382,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 387,
												"src": "3738:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 381,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3738:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3737:9:2"
									},
									"scope": 894,
									"src": "3677:108:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										929
									],
									"body": {
										"id": 400,
										"nodeType": "Block",
										"src": "3931:44:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 396,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "3949:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 398,
													"indexExpression": {
														"id": 397,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 390,
														"src": "3959:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "3949:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 395,
												"id": 399,
												"nodeType": "Return",
												"src": "3942:25:2"
											}
										]
									},
									"documentation": {
										"id": 388,
										"nodeType": "StructuredDocumentation",
										"src": "3793:49:2",
										"text": " @dev See {IERC20-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 401,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "3857:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 392,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "3904:8:2"
									},
									"parameters": {
										"id": 391,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 390,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "3875:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3867:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 389,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3867:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3866:17:2"
									},
									"returnParameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "3922:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 393,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3922:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3921:9:2"
									},
									"scope": 894,
									"src": "3848:127:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										939
									],
									"body": {
										"id": 425,
										"nodeType": "Block",
										"src": "4266:108:2",
										"statements": [
											{
												"assignments": [
													413
												],
												"declarations": [
													{
														"constant": false,
														"id": 413,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "4285:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 425,
														"src": "4277:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 412,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4277:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 416,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 414,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "4293:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 415,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4293:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4277:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 418,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 413,
															"src": "4326:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 419,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 404,
															"src": "4333:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 420,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 406,
															"src": "4337:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 417,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 649,
														"src": "4316:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 421,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4316:28:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 422,
												"nodeType": "ExpressionStatement",
												"src": "4316:28:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 423,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "4362:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 411,
												"id": 424,
												"nodeType": "Return",
												"src": "4355:11:2"
											}
										]
									},
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "3983:192:2",
										"text": " @dev See {IERC20-transfer}.\n Requirements:\n - `to` cannot be the zero address.\n - the caller must have a balance of at least `amount`."
									},
									"functionSelector": "a9059cbb",
									"id": 426,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "4190:8:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 408,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4242:8:2"
									},
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4207:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4199:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4199:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4219:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4211:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 405,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4211:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4198:28:2"
									},
									"returnParameters": {
										"id": 411,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 410,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 426,
												"src": "4260:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 409,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4260:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4259:6:2"
									},
									"scope": 894,
									"src": "4181:193:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										949
									],
									"body": {
										"id": 443,
										"nodeType": "Block",
										"src": "4535:53:2",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 437,
															"name": "_allowances",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 307,
															"src": "4553:11:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																"typeString": "mapping(address => mapping(address => uint256))"
															}
														},
														"id": 439,
														"indexExpression": {
															"id": 438,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 429,
															"src": "4565:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4553:18:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 441,
													"indexExpression": {
														"id": 440,
														"name": "spender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 431,
														"src": "4572:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4553:27:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 436,
												"id": 442,
												"nodeType": "Return",
												"src": "4546:34:2"
											}
										]
									},
									"documentation": {
										"id": 427,
										"nodeType": "StructuredDocumentation",
										"src": "4382:49:2",
										"text": " @dev See {IERC20-allowance}."
									},
									"functionSelector": "dd62ed3e",
									"id": 444,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "4446:9:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 433,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4508:8:2"
									},
									"parameters": {
										"id": 432,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 429,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4464:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4456:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 428,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4456:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 431,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4479:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4471:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 430,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4471:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4455:32:2"
									},
									"returnParameters": {
										"id": 436,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 435,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 444,
												"src": "4526:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 434,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4526:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4525:9:2"
									},
									"scope": 894,
									"src": "4437:151:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										959
									],
									"body": {
										"id": 468,
										"nodeType": "Block",
										"src": "4997:112:2",
										"statements": [
											{
												"assignments": [
													456
												],
												"declarations": [
													{
														"constant": false,
														"id": 456,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "5016:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 468,
														"src": "5008:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 455,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5008:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 459,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 457,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "5024:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 458,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5024:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5008:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 461,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 456,
															"src": "5056:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 462,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 447,
															"src": "5063:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 463,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 449,
															"src": "5072:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 460,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "5047:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 464,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5047:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 465,
												"nodeType": "ExpressionStatement",
												"src": "5047:32:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 466,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5097:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 454,
												"id": 467,
												"nodeType": "Return",
												"src": "5090:11:2"
											}
										]
									},
									"documentation": {
										"id": 445,
										"nodeType": "StructuredDocumentation",
										"src": "4596:306:2",
										"text": " @dev See {IERC20-approve}.\n NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n `transferFrom`. This is semantically equivalent to an infinite approval.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "095ea7b3",
									"id": 469,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4917:7:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 451,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4973:8:2"
									},
									"parameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 447,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "4933:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "4925:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4925:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 449,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "4950:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "4942:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4942:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4924:33:2"
									},
									"returnParameters": {
										"id": 454,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 453,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 469,
												"src": "4991:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 452,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4991:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:6:2"
									},
									"scope": 894,
									"src": "4908:201:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										971
									],
									"body": {
										"id": 501,
										"nodeType": "Block",
										"src": "5826:158:2",
										"statements": [
											{
												"assignments": [
													483
												],
												"declarations": [
													{
														"constant": false,
														"id": 483,
														"mutability": "mutable",
														"name": "spender",
														"nameLocation": "5845:7:2",
														"nodeType": "VariableDeclaration",
														"scope": 501,
														"src": "5837:15:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 482,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "5837:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 486,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 484,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "5855:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 485,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5855:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5837:30:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 488,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "5894:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 489,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 483,
															"src": "5900:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 490,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "5909:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 487,
														"name": "_spendAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 866,
														"src": "5878:15:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 491,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5878:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 492,
												"nodeType": "ExpressionStatement",
												"src": "5878:38:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 494,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 472,
															"src": "5937:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 495,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 474,
															"src": "5943:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 496,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 476,
															"src": "5947:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 493,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 649,
														"src": "5927:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 497,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5927:27:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 498,
												"nodeType": "ExpressionStatement",
												"src": "5927:27:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 499,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "5972:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 481,
												"id": 500,
												"nodeType": "Return",
												"src": "5965:11:2"
											}
										]
									},
									"documentation": {
										"id": 470,
										"nodeType": "StructuredDocumentation",
										"src": "5117:566:2",
										"text": " @dev See {IERC20-transferFrom}.\n Emits an {Approval} event indicating the updated allowance. This is not\n required by the EIP. See the note at the beginning of {ERC20}.\n NOTE: Does not update the allowance if the current allowance\n is the maximum `uint256`.\n Requirements:\n - `from` and `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`.\n - the caller must have allowance for ``from``'s tokens of at least\n `amount`."
									},
									"functionSelector": "23b872dd",
									"id": 502,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "5698:12:2",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 478,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5802:8:2"
									},
									"parameters": {
										"id": 477,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 472,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5729:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5721:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5721:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 474,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5752:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5744:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 473,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5744:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 476,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "5773:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5765:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 475,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5765:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5710:76:2"
									},
									"returnParameters": {
										"id": 481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 480,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 502,
												"src": "5820:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 479,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5820:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5819:6:2"
									},
									"scope": 894,
									"src": "5689:295:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 530,
										"nodeType": "Block",
										"src": "6487:144:2",
										"statements": [
											{
												"assignments": [
													513
												],
												"declarations": [
													{
														"constant": false,
														"id": 513,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "6506:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 530,
														"src": "6498:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 512,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "6498:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 516,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 514,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "6514:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 515,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6514:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6498:28:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 518,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "6546:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 519,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 505,
															"src": "6553:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 525,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 521,
																		"name": "owner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 513,
																		"src": "6572:5:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 522,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 505,
																		"src": "6579:7:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 520,
																	"name": "allowance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 444,
																	"src": "6562:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
																		"typeString": "function (address,address) view returns (uint256)"
																	}
																},
																"id": 523,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6562:25:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 524,
																"name": "addedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 507,
																"src": "6590:10:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6562:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 517,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 823,
														"src": "6537:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 526,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6537:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 527,
												"nodeType": "ExpressionStatement",
												"src": "6537:64:2"
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 528,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "6619:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 511,
												"id": 529,
												"nodeType": "Return",
												"src": "6612:11:2"
											}
										]
									},
									"documentation": {
										"id": 503,
										"nodeType": "StructuredDocumentation",
										"src": "5992:395:2",
										"text": " @dev Atomically increases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address."
									},
									"functionSelector": "39509351",
									"id": 531,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "increaseAllowance",
									"nameLocation": "6402:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 508,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6428:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "6420:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 504,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6420:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 507,
												"mutability": "mutable",
												"name": "addedValue",
												"nameLocation": "6445:10:2",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "6437:18:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 506,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6437:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6419:37:2"
									},
									"returnParameters": {
										"id": 511,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 510,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 531,
												"src": "6481:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 509,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6481:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6480:6:2"
									},
									"scope": 894,
									"src": "6393:238:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 571,
										"nodeType": "Block",
										"src": "7233:337:2",
										"statements": [
											{
												"assignments": [
													542
												],
												"declarations": [
													{
														"constant": false,
														"id": 542,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "7252:5:2",
														"nodeType": "VariableDeclaration",
														"scope": 571,
														"src": "7244:13:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 541,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "7244:7:2",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 545,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 543,
														"name": "_msgSender",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1308,
														"src": "7260:10:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
															"typeString": "function () view returns (address)"
														}
													},
													"id": 544,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7260:12:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7244:28:2"
											},
											{
												"assignments": [
													547
												],
												"declarations": [
													{
														"constant": false,
														"id": 547,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "7291:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 571,
														"src": "7283:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 546,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "7283:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 552,
												"initialValue": {
													"arguments": [
														{
															"id": 549,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 542,
															"src": "7320:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 550,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 534,
															"src": "7327:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 548,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 444,
														"src": "7310:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 551,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7310:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7283:52:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 556,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 554,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 547,
																"src": "7354:16:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 555,
																"name": "subtractedValue",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 536,
																"src": "7374:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7354:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f",
															"id": 557,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "7391:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															},
															"value": "ERC20: decreased allowance below zero"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_f8b476f7d28209d77d4a4ac1fe36b9f8259aa1bb6bddfa6e89de7e51615cf8a8",
																"typeString": "literal_string \"ERC20: decreased allowance below zero\""
															}
														],
														"id": 553,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "7346:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 558,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7346:85:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 559,
												"nodeType": "ExpressionStatement",
												"src": "7346:85:2"
											},
											{
												"id": 568,
												"nodeType": "UncheckedBlock",
												"src": "7442:97:2",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 561,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 542,
																	"src": "7476:5:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 562,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 534,
																	"src": "7483:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 565,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 563,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 547,
																		"src": "7492:16:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 564,
																		"name": "subtractedValue",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 536,
																		"src": "7511:15:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7492:34:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 560,
																"name": "_approve",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 823,
																"src": "7467:8:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (address,address,uint256)"
																}
															},
															"id": 566,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "7467:60:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 567,
														"nodeType": "ExpressionStatement",
														"src": "7467:60:2"
													}
												]
											},
											{
												"expression": {
													"hexValue": "74727565",
													"id": 569,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "7558:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"functionReturnParameters": 540,
												"id": 570,
												"nodeType": "Return",
												"src": "7551:11:2"
											}
										]
									},
									"documentation": {
										"id": 532,
										"nodeType": "StructuredDocumentation",
										"src": "6639:489:2",
										"text": " @dev Atomically decreases the allowance granted to `spender` by the caller.\n This is an alternative to {approve} that can be used as a mitigation for\n problems described in {IERC20-approve}.\n Emits an {Approval} event indicating the updated allowance.\n Requirements:\n - `spender` cannot be the zero address.\n - `spender` must have allowance for the caller of at least\n `subtractedValue`."
									},
									"functionSelector": "a457c2d7",
									"id": 572,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "decreaseAllowance",
									"nameLocation": "7143:17:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 534,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7169:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "7161:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 533,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7161:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 536,
												"mutability": "mutable",
												"name": "subtractedValue",
												"nameLocation": "7186:15:2",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "7178:23:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7178:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7160:42:2"
									},
									"returnParameters": {
										"id": 540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 539,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 572,
												"src": "7227:4:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 538,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7227:4:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7226:6:2"
									},
									"scope": 894,
									"src": "7134:436:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 648,
										"nodeType": "Block",
										"src": "8152:728:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 588,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 583,
																"name": "from",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 575,
																"src": "8171:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 586,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8187:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 585,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8179:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 584,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8179:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 587,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8179:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8171:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e736665722066726f6d20746865207a65726f2061646472657373",
															"id": 589,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8191:39:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															},
															"value": "ERC20: transfer from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_baecc556b46f4ed0f2b4cb599d60785ac8563dd2dc0a5bf12edea1c39e5e1fea",
																"typeString": "literal_string \"ERC20: transfer from the zero address\""
															}
														],
														"id": 582,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8163:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 590,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8163:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 591,
												"nodeType": "ExpressionStatement",
												"src": "8163:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 598,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 593,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 577,
																"src": "8250:2:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 596,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "8264:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 595,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8256:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 594,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "8256:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 597,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8256:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "8250:16:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220746f20746865207a65726f2061646472657373",
															"id": 599,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8268:37:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															},
															"value": "ERC20: transfer to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_0557e210f7a69a685100a7e4e3d0a7024c546085cee28910fd17d0b081d9516f",
																"typeString": "literal_string \"ERC20: transfer to the zero address\""
															}
														],
														"id": 592,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8242:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 600,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8242:64:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 601,
												"nodeType": "ExpressionStatement",
												"src": "8242:64:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 603,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "8340:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 604,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "8346:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 605,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "8350:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 602,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 877,
														"src": "8319:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 606,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8319:38:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 607,
												"nodeType": "ExpressionStatement",
												"src": "8319:38:2"
											},
											{
												"assignments": [
													609
												],
												"declarations": [
													{
														"constant": false,
														"id": 609,
														"mutability": "mutable",
														"name": "fromBalance",
														"nameLocation": "8378:11:2",
														"nodeType": "VariableDeclaration",
														"scope": 648,
														"src": "8370:19:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 608,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8370:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 613,
												"initialValue": {
													"baseExpression": {
														"id": 610,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "8392:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 612,
													"indexExpression": {
														"id": 611,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 575,
														"src": "8402:4:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "8392:15:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8370:37:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 617,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 615,
																"name": "fromBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 609,
																"src": "8426:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 616,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 579,
																"src": "8441:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8426:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a207472616e7366657220616d6f756e7420657863656564732062616c616e6365",
															"id": 618,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8449:40:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															},
															"value": "ERC20: transfer amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_4107e8a8b9e94bf8ff83080ddec1c0bffe897ebc2241b89d44f66b3d274088b6",
																"typeString": "literal_string \"ERC20: transfer amount exceeds balance\""
															}
														],
														"id": 614,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "8418:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8418:72:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 620,
												"nodeType": "ExpressionStatement",
												"src": "8418:72:2"
											},
											{
												"id": 635,
												"nodeType": "UncheckedBlock",
												"src": "8501:278:2",
												"statements": [
													{
														"expression": {
															"id": 627,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 621,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "8526:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 623,
																"indexExpression": {
																	"id": 622,
																	"name": "from",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 575,
																	"src": "8536:4:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8526:15:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 626,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 624,
																	"name": "fromBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 609,
																	"src": "8544:11:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 625,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 579,
																	"src": "8558:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8544:20:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8526:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 628,
														"nodeType": "ExpressionStatement",
														"src": "8526:38:2"
													},
													{
														"expression": {
															"id": 633,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 629,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "8744:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 631,
																"indexExpression": {
																	"id": 630,
																	"name": "to",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 577,
																	"src": "8754:2:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8744:13:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 632,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 579,
																"src": "8761:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8744:23:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 634,
														"nodeType": "ExpressionStatement",
														"src": "8744:23:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 637,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "8805:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 638,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "8811:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 639,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "8815:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 636,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 906,
														"src": "8796:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 640,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8796:26:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 641,
												"nodeType": "EmitStatement",
												"src": "8791:31:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 643,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 575,
															"src": "8855:4:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 644,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 577,
															"src": "8861:2:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 645,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 579,
															"src": "8865:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 642,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "8835:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 646,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8835:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 647,
												"nodeType": "ExpressionStatement",
												"src": "8835:37:2"
											}
										]
									},
									"documentation": {
										"id": 573,
										"nodeType": "StructuredDocumentation",
										"src": "7578:456:2",
										"text": " @dev Moves `amount` of tokens from `from` to `to`.\n This internal function is equivalent to {transfer}, and can be used to\n e.g. implement automatic token fees, slashing mechanisms, etc.\n Emits a {Transfer} event.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `from` must have a balance of at least `amount`."
									},
									"id": 649,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "8049:9:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 580,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 575,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "8077:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "8069:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 574,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8069:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 577,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "8100:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "8092:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 576,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8092:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 579,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "8121:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 649,
												"src": "8113:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 578,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8113:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8058:76:2"
									},
									"returnParameters": {
										"id": 581,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8152:0:2"
									},
									"scope": 894,
									"src": "8040:840:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 705,
										"nodeType": "Block",
										"src": "9232:483:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 663,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 658,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 652,
																"src": "9251:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 661,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9270:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 660,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "9262:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 659,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "9262:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 662,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9262:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "9251:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206d696e7420746f20746865207a65726f2061646472657373",
															"id": 664,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "9274:33:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															},
															"value": "ERC20: mint to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_fc0b381caf0a47702017f3c4b358ebe3d3aff6c60ce819a8bf3ef5a95d4f202e",
																"typeString": "literal_string \"ERC20: mint to the zero address\""
															}
														],
														"id": 657,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "9243:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 665,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9243:65:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 666,
												"nodeType": "ExpressionStatement",
												"src": "9243:65:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9350:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 669,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9342:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 668,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9342:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 671,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9342:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 672,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "9354:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 673,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "9363:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 667,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 877,
														"src": "9321:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 674,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9321:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 675,
												"nodeType": "ExpressionStatement",
												"src": "9321:49:2"
											},
											{
												"expression": {
													"id": 678,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 676,
														"name": "_totalSupply",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 309,
														"src": "9383:12:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "+=",
													"rightHandSide": {
														"id": 677,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 654,
														"src": "9399:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9383:22:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 679,
												"nodeType": "ExpressionStatement",
												"src": "9383:22:2"
											},
											{
												"id": 686,
												"nodeType": "UncheckedBlock",
												"src": "9416:178:2",
												"statements": [
													{
														"expression": {
															"id": 684,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 680,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "9554:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 682,
																"indexExpression": {
																	"id": 681,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 652,
																	"src": "9564:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "9554:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 683,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 654,
																"src": "9576:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "9554:28:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 685,
														"nodeType": "ExpressionStatement",
														"src": "9554:28:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 690,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9626:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 689,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9618:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 688,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9618:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 691,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9618:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 692,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "9630:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 693,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "9639:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 687,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 906,
														"src": "9609:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 694,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9609:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 695,
												"nodeType": "EmitStatement",
												"src": "9604:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 699,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9687:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 698,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "9679:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 697,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "9679:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 700,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "9679:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 701,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 652,
															"src": "9691:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 702,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 654,
															"src": "9700:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 696,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "9659:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 703,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9659:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 704,
												"nodeType": "ExpressionStatement",
												"src": "9659:48:2"
											}
										]
									},
									"documentation": {
										"id": 650,
										"nodeType": "StructuredDocumentation",
										"src": "8888:273:2",
										"text": "@dev Creates `amount` tokens and assigns them to `account`, increasing\n the total supply.\n Emits a {Transfer} event with `from` set to the zero address.\n Requirements:\n - `account` cannot be the zero address."
									},
									"id": 706,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "9176:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 652,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "9190:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "9182:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 651,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9182:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 654,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "9207:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 706,
												"src": "9199:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 653,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9199:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9181:33:2"
									},
									"returnParameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9232:0:2"
									},
									"scope": 894,
									"src": "9167:548:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 777,
										"nodeType": "Block",
										"src": "10113:610:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 720,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 715,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 709,
																"src": "10132:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 718,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "10151:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 717,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "10143:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 716,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "10143:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 719,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10143:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "10132:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e2066726f6d20746865207a65726f2061646472657373",
															"id": 721,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10155:35:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															},
															"value": "ERC20: burn from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_b16788493b576042bb52c50ed56189e0b250db113c7bfb1c3897d25cf9632d7f",
																"typeString": "literal_string \"ERC20: burn from the zero address\""
															}
														],
														"id": 714,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10124:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 722,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10124:67:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 723,
												"nodeType": "ExpressionStatement",
												"src": "10124:67:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 725,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "10225:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 728,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10242:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 727,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10234:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 726,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10234:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 729,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10234:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 730,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "10246:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 724,
														"name": "_beforeTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 877,
														"src": "10204:20:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 731,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10204:49:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 732,
												"nodeType": "ExpressionStatement",
												"src": "10204:49:2"
											},
											{
												"assignments": [
													734
												],
												"declarations": [
													{
														"constant": false,
														"id": 734,
														"mutability": "mutable",
														"name": "accountBalance",
														"nameLocation": "10274:14:2",
														"nodeType": "VariableDeclaration",
														"scope": 777,
														"src": "10266:22:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 733,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "10266:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 738,
												"initialValue": {
													"baseExpression": {
														"id": 735,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 301,
														"src": "10291:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 737,
													"indexExpression": {
														"id": 736,
														"name": "account",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 709,
														"src": "10301:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "10291:18:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10266:43:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 742,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 740,
																"name": "accountBalance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 734,
																"src": "10328:14:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 741,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 711,
																"src": "10346:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10328:24:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a206275726e20616d6f756e7420657863656564732062616c616e6365",
															"id": 743,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "10354:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															},
															"value": "ERC20: burn amount exceeds balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_149b126e7125232b4200af45303d04fba8b74653b1a295a6a561a528c33fefdd",
																"typeString": "literal_string \"ERC20: burn amount exceeds balance\""
															}
														],
														"id": 739,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "10320:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 744,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10320:71:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 745,
												"nodeType": "ExpressionStatement",
												"src": "10320:71:2"
											},
											{
												"id": 758,
												"nodeType": "UncheckedBlock",
												"src": "10402:198:2",
												"statements": [
													{
														"expression": {
															"id": 752,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 746,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 301,
																	"src": "10427:9:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 748,
																"indexExpression": {
																	"id": 747,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 709,
																	"src": "10437:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "10427:18:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 751,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 749,
																	"name": "accountBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 734,
																	"src": "10448:14:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"id": 750,
																	"name": "amount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 711,
																	"src": "10465:6:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "10448:23:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10427:44:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 753,
														"nodeType": "ExpressionStatement",
														"src": "10427:44:2"
													},
													{
														"expression": {
															"id": 756,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 754,
																"name": "_totalSupply",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 309,
																"src": "10566:12:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "-=",
															"rightHandSide": {
																"id": 755,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 711,
																"src": "10582:6:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10566:22:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 757,
														"nodeType": "ExpressionStatement",
														"src": "10566:22:2"
													}
												]
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 760,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "10626:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 763,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10643:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 762,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10635:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 761,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10635:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 764,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10635:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 765,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "10647:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 759,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 906,
														"src": "10617:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 766,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10617:37:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 767,
												"nodeType": "EmitStatement",
												"src": "10612:42:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 769,
															"name": "account",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 709,
															"src": "10687:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 772,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10704:1:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 771,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10696:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 770,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10696:7:2",
																	"typeDescriptions": {}
																}
															},
															"id": 773,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10696:10:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 774,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 711,
															"src": "10708:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 768,
														"name": "_afterTokenTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 888,
														"src": "10667:19:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 775,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10667:48:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 776,
												"nodeType": "ExpressionStatement",
												"src": "10667:48:2"
											}
										]
									},
									"documentation": {
										"id": 707,
										"nodeType": "StructuredDocumentation",
										"src": "9723:319:2",
										"text": " @dev Destroys `amount` tokens from `account`, reducing the\n total supply.\n Emits a {Transfer} event with `to` set to the zero address.\n Requirements:\n - `account` cannot be the zero address.\n - `account` must have at least `amount` tokens."
									},
									"id": 778,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "10057:5:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 712,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 709,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "10071:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "10063:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 708,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10063:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 711,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "10088:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 778,
												"src": "10080:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 710,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10080:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10062:33:2"
									},
									"returnParameters": {
										"id": 713,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10113:0:2"
									},
									"scope": 894,
									"src": "10048:675:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 822,
										"nodeType": "Block",
										"src": "11278:263:2",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 794,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 789,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "11297:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 792,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11314:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 791,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11306:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 790,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11306:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 793,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11306:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11297:19:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f76652066726f6d20746865207a65726f2061646472657373",
															"id": 795,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11318:38:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															},
															"value": "ERC20: approve from the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c953f4879035ed60e766b34720f656aab5c697b141d924c283124ecedb91c208",
																"typeString": "literal_string \"ERC20: approve from the zero address\""
															}
														],
														"id": 788,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11289:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 796,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11289:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 797,
												"nodeType": "ExpressionStatement",
												"src": "11289:68:2"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 804,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 799,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 783,
																"src": "11376:7:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"arguments": [
																	{
																		"hexValue": "30",
																		"id": 802,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "11395:1:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		}
																	],
																	"id": 801,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "11387:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_address_$",
																		"typeString": "type(address)"
																	},
																	"typeName": {
																		"id": 800,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "11387:7:2",
																		"typeDescriptions": {}
																	}
																},
																"id": 803,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "typeConversion",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11387:10:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "11376:21:2",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "45524332303a20617070726f766520746f20746865207a65726f2061646472657373",
															"id": 805,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11399:36:2",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															},
															"value": "ERC20: approve to the zero address"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_24883cc5fe64ace9d0df1893501ecb93c77180f0ff69cca79affb3c316dc8029",
																"typeString": "literal_string \"ERC20: approve to the zero address\""
															}
														],
														"id": 798,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "11368:7:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 806,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11368:68:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 807,
												"nodeType": "ExpressionStatement",
												"src": "11368:68:2"
											},
											{
												"expression": {
													"id": 814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 808,
																"name": "_allowances",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 307,
																"src": "11449:11:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
																	"typeString": "mapping(address => mapping(address => uint256))"
																}
															},
															"id": 811,
															"indexExpression": {
																"id": 809,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 781,
																"src": "11461:5:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "11449:18:2",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																"typeString": "mapping(address => uint256)"
															}
														},
														"id": 812,
														"indexExpression": {
															"id": 810,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "11468:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "11449:27:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 813,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 785,
														"src": "11479:6:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "11449:36:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 815,
												"nodeType": "ExpressionStatement",
												"src": "11449:36:2"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 817,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 781,
															"src": "11510:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 818,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 783,
															"src": "11517:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 819,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 785,
															"src": "11526:6:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 816,
														"name": "Approval",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "11501:8:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 820,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11501:32:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 821,
												"nodeType": "EmitStatement",
												"src": "11496:37:2"
											}
										]
									},
									"documentation": {
										"id": 779,
										"nodeType": "StructuredDocumentation",
										"src": "10731:424:2",
										"text": " @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n This internal function is equivalent to `approve`, and can be used to\n e.g. set automatic allowances for certain subsystems, etc.\n Emits an {Approval} event.\n Requirements:\n - `owner` cannot be the zero address.\n - `spender` cannot be the zero address."
									},
									"id": 823,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "11170:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 786,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 781,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11197:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "11189:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 780,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11189:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 783,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11221:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "11213:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 782,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11213:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 785,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11247:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 823,
												"src": "11239:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 784,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11239:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11178:82:2"
									},
									"returnParameters": {
										"id": 787,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11278:0:2"
									},
									"scope": 894,
									"src": "11161:380:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 865,
										"nodeType": "Block",
										"src": "11956:329:2",
										"statements": [
											{
												"assignments": [
													834
												],
												"declarations": [
													{
														"constant": false,
														"id": 834,
														"mutability": "mutable",
														"name": "currentAllowance",
														"nameLocation": "11975:16:2",
														"nodeType": "VariableDeclaration",
														"scope": 865,
														"src": "11967:24:2",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 833,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11967:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 839,
												"initialValue": {
													"arguments": [
														{
															"id": 836,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 826,
															"src": "12004:5:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 837,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 828,
															"src": "12011:7:2",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 835,
														"name": "allowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 444,
														"src": "11994:9:2",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view returns (uint256)"
														}
													},
													"id": 838,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11994:25:2",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11967:52:2"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 840,
														"name": "currentAllowance",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 834,
														"src": "12034:16:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 843,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "12059:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	},
																	"typeName": {
																		"id": 842,
																		"name": "uint256",
																		"nodeType": "ElementaryTypeName",
																		"src": "12059:7:2",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint256_$",
																		"typeString": "type(uint256)"
																	}
																],
																"id": 841,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "12054:4:2",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 844,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12054:13:2",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint256",
																"typeString": "type(uint256)"
															}
														},
														"id": 845,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "12054:17:2",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "12034:37:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 864,
												"nodeType": "IfStatement",
												"src": "12030:248:2",
												"trueBody": {
													"id": 863,
													"nodeType": "Block",
													"src": "12073:205:2",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 850,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 848,
																			"name": "currentAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 834,
																			"src": "12096:16:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"id": 849,
																			"name": "amount",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 830,
																			"src": "12116:6:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "12096:26:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "45524332303a20696e73756666696369656e7420616c6c6f77616e6365",
																		"id": 851,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "12124:31:2",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		},
																		"value": "ERC20: insufficient allowance"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_3b6607e091cba9325f958656d2b5e0622ab7dc0eac71a26ac788cb25bc19f4fe",
																			"typeString": "literal_string \"ERC20: insufficient allowance\""
																		}
																	],
																	"id": 847,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "12088:7:2",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 852,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12088:68:2",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 853,
															"nodeType": "ExpressionStatement",
															"src": "12088:68:2"
														},
														{
															"id": 862,
															"nodeType": "UncheckedBlock",
															"src": "12171:96:2",
															"statements": [
																{
																	"expression": {
																		"arguments": [
																			{
																				"id": 855,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 826,
																				"src": "12209:5:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 856,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 828,
																				"src": "12216:7:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 859,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 857,
																					"name": "currentAllowance",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 834,
																					"src": "12225:16:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "-",
																				"rightExpression": {
																					"id": 858,
																					"name": "amount",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 830,
																					"src": "12244:6:2",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12225:25:2",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 854,
																			"name": "_approve",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 823,
																			"src": "12200:8:2",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																				"typeString": "function (address,address,uint256)"
																			}
																		},
																		"id": 860,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12200:51:2",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 861,
																	"nodeType": "ExpressionStatement",
																	"src": "12200:51:2"
																}
															]
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 824,
										"nodeType": "StructuredDocumentation",
										"src": "11549:277:2",
										"text": " @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n Does not update the allowance amount in case of infinite allowance.\n Revert if not enough allowance is available.\n Might emit an {Approval} event."
									},
									"id": 866,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_spendAllowance",
									"nameLocation": "11841:15:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 831,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 826,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11875:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "11867:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 825,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11867:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 828,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11899:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "11891:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 827,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11891:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 830,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "11925:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 866,
												"src": "11917:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 829,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11917:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11856:82:2"
									},
									"returnParameters": {
										"id": 832,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11956:0:2"
									},
									"scope": 894,
									"src": "11832:453:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 876,
										"nodeType": "Block",
										"src": "13008:2:2",
										"statements": []
									},
									"documentation": {
										"id": 867,
										"nodeType": "StructuredDocumentation",
										"src": "12293:586:2",
										"text": " @dev Hook that is called before any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n will be transferred to `to`.\n - when `from` is zero, `amount` tokens will be minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 877,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_beforeTokenTransfer",
									"nameLocation": "12894:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 874,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 869,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12933:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "12925:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 868,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12925:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 871,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12956:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "12948:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 870,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12948:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 873,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "12977:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 877,
												"src": "12969:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 872,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12969:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12914:76:2"
									},
									"returnParameters": {
										"id": 875,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13008:0:2"
									},
									"scope": 894,
									"src": "12885:125:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 887,
										"nodeType": "Block",
										"src": "13736:2:2",
										"statements": []
									},
									"documentation": {
										"id": 878,
										"nodeType": "StructuredDocumentation",
										"src": "13018:590:2",
										"text": " @dev Hook that is called after any transfer of tokens. This includes\n minting and burning.\n Calling conditions:\n - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n has been transferred to `to`.\n - when `from` is zero, `amount` tokens have been minted for `to`.\n - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n - `from` and `to` are never both zero.\n To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]."
									},
									"id": 888,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_afterTokenTransfer",
									"nameLocation": "13623:19:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 885,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 880,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13661:4:2",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "13653:12:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 879,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13653:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 882,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13684:2:2",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "13676:10:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 881,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13676:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 884,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "13705:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 888,
												"src": "13697:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 883,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13697:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13642:76:2"
									},
									"returnParameters": {
										"id": 886,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13736:0:2"
									},
									"scope": 894,
									"src": "13614:124:2",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 889,
										"nodeType": "StructuredDocumentation",
										"src": "13746:258:2",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 893,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "14030:5:2",
									"nodeType": "VariableDeclaration",
									"scope": 894,
									"src": "14010:25:2",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$45_storage",
										"typeString": "uint256[45]"
									},
									"typeName": {
										"baseType": {
											"id": 890,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "14010:7:2",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 892,
										"length": {
											"hexValue": "3435",
											"id": 891,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "14018:2:2",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_45_by_1",
												"typeString": "int_const 45"
											},
											"value": "45"
										},
										"nodeType": "ArrayTypeName",
										"src": "14010:11:2",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
											"typeString": "uint256[45]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 895,
							"src": "1515:12524:2",
							"usedErrors": []
						}
					],
					"src": "108:13933:2"
				},
				"id": 2
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
				"ast": {
					"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
					"exportedSymbols": {
						"IERC20Upgradeable": [
							972
						]
					},
					"id": 973,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 896,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "109:23:3"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Upgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 897,
								"nodeType": "StructuredDocumentation",
								"src": "136:72:3",
								"text": " @dev Interface of the ERC20 standard as defined in the EIP."
							},
							"fullyImplemented": false,
							"id": 972,
							"linearizedBaseContracts": [
								972
							],
							"name": "IERC20Upgradeable",
							"nameLocation": "220:17:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 898,
										"nodeType": "StructuredDocumentation",
										"src": "245:163:3",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 906,
									"name": "Transfer",
									"nameLocation": "420:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 905,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 900,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "445:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "429:20:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 899,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "429:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 902,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "467:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "451:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 901,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "451:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 904,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "479:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 906,
												"src": "471:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 903,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "471:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "428:57:3"
									},
									"src": "414:72:3"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 907,
										"nodeType": "StructuredDocumentation",
										"src": "494:151:3",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 915,
									"name": "Approval",
									"nameLocation": "657:8:3",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 909,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "682:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "666:21:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "666:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 911,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "705:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "689:23:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 910,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "689:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 913,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "722:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 915,
												"src": "714:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 912,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "714:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "665:63:3"
									},
									"src": "651:78:3"
								},
								{
									"documentation": {
										"id": 916,
										"nodeType": "StructuredDocumentation",
										"src": "737:68:3",
										"text": " @dev Returns the amount of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 921,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "820:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 917,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "831:2:3"
									},
									"returnParameters": {
										"id": 920,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 919,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 921,
												"src": "857:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 918,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "857:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "856:9:3"
									},
									"scope": 972,
									"src": "811:55:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 922,
										"nodeType": "StructuredDocumentation",
										"src": "874:74:3",
										"text": " @dev Returns the amount of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 929,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "963:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 925,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 924,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "981:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "973:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 923,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "973:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "972:17:3"
									},
									"returnParameters": {
										"id": 928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 927,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 929,
												"src": "1013:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1013:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1012:9:3"
									},
									"scope": 972,
									"src": "954:68:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 930,
										"nodeType": "StructuredDocumentation",
										"src": "1030:208:3",
										"text": " @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 939,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "1253:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 935,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 932,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1270:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "1262:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 931,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1262:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 934,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1282:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "1274:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 933,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1261:28:3"
									},
									"returnParameters": {
										"id": 938,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 937,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 939,
												"src": "1308:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 936,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1308:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1307:6:3"
									},
									"scope": 972,
									"src": "1244:70:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 940,
										"nodeType": "StructuredDocumentation",
										"src": "1322:270:3",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 949,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "1607:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 945,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 942,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1625:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "1617:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 941,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1617:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 944,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1640:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "1632:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 943,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1632:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1616:32:3"
									},
									"returnParameters": {
										"id": 948,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 947,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 949,
												"src": "1672:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 946,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1672:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1671:9:3"
									},
									"scope": 972,
									"src": "1598:83:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 950,
										"nodeType": "StructuredDocumentation",
										"src": "1689:655:3",
										"text": " @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 959,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "2359:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 955,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 952,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2375:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "2367:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 951,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2367:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 954,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2392:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "2384:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 953,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2384:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2366:33:3"
									},
									"returnParameters": {
										"id": 958,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 957,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 959,
												"src": "2418:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 956,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2418:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2417:6:3"
									},
									"scope": 972,
									"src": "2350:74:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 960,
										"nodeType": "StructuredDocumentation",
										"src": "2432:295:3",
										"text": " @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 971,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "2742:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 967,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 962,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2773:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "2765:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 961,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2765:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 964,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2796:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "2788:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 963,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2788:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 966,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2817:6:3",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "2809:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 965,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2809:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2754:76:3"
									},
									"returnParameters": {
										"id": 970,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 969,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 971,
												"src": "2849:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 968,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2849:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2848:6:3"
									},
									"scope": 972,
									"src": "2733:122:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 973,
							"src": "210:2648:3",
							"usedErrors": []
						}
					],
					"src": "109:2751:3"
				},
				"id": 3
			},
			"node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
				"ast": {
					"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol",
					"exportedSymbols": {
						"IERC20MetadataUpgradeable": [
							997
						],
						"IERC20Upgradeable": [
							972
						]
					},
					"id": 998,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 974,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "113:23:4"
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol",
							"file": "../IERC20Upgradeable.sol",
							"id": 975,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 998,
							"sourceUnit": 973,
							"src": "140:34:4",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 977,
										"name": "IERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 972,
										"src": "339:17:4"
									},
									"id": 978,
									"nodeType": "InheritanceSpecifier",
									"src": "339:17:4"
								}
							],
							"canonicalName": "IERC20MetadataUpgradeable",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 976,
								"nodeType": "StructuredDocumentation",
								"src": "178:120:4",
								"text": " @dev Interface for the optional metadata functions from the ERC20 standard.\n _Available since v4.1._"
							},
							"fullyImplemented": false,
							"id": 997,
							"linearizedBaseContracts": [
								997,
								972
							],
							"name": "IERC20MetadataUpgradeable",
							"nameLocation": "310:25:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 979,
										"nodeType": "StructuredDocumentation",
										"src": "364:56:4",
										"text": " @dev Returns the name of the token."
									},
									"functionSelector": "06fdde03",
									"id": 984,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "435:4:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 980,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "439:2:4"
									},
									"returnParameters": {
										"id": 983,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 982,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 984,
												"src": "465:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 981,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "465:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "464:15:4"
									},
									"scope": 997,
									"src": "426:54:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 985,
										"nodeType": "StructuredDocumentation",
										"src": "488:58:4",
										"text": " @dev Returns the symbol of the token."
									},
									"functionSelector": "95d89b41",
									"id": 990,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "561:6:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 986,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "567:2:4"
									},
									"returnParameters": {
										"id": 989,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 988,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 990,
												"src": "593:13:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 987,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "593:6:4",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "592:15:4"
									},
									"scope": 997,
									"src": "552:56:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 991,
										"nodeType": "StructuredDocumentation",
										"src": "616:67:4",
										"text": " @dev Returns the decimals places of the token."
									},
									"functionSelector": "313ce567",
									"id": 996,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "decimals",
									"nameLocation": "698:8:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 992,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "706:2:4"
									},
									"returnParameters": {
										"id": 995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 994,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 996,
												"src": "732:5:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 993,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "732:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "731:7:4"
									},
									"scope": 997,
									"src": "689:50:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 998,
							"src": "300:442:4",
							"usedErrors": []
						}
					],
					"src": "113:631:4"
				},
				"id": 4
			},
			"node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol": {
				"ast": {
					"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/utils/AddressUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1281
						]
					},
					"id": 1282,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 999,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".1"
							],
							"nodeType": "PragmaDirective",
							"src": "104:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "AddressUpgradeable",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1000,
								"nodeType": "StructuredDocumentation",
								"src": "131:69:5",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 1281,
							"linearizedBaseContracts": [
								1281
							],
							"name": "AddressUpgradeable",
							"nameLocation": "210:18:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1014,
										"nodeType": "Block",
										"src": "1287:260:5",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1012,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1008,
																"name": "account",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1003,
																"src": "1516:7:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1009,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "1516:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1010,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "1516:19:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1011,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1538:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1516:23:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1007,
												"id": 1013,
												"nodeType": "Return",
												"src": "1509:30:5"
											}
										]
									},
									"documentation": {
										"id": 1001,
										"nodeType": "StructuredDocumentation",
										"src": "236:979:5",
										"text": " @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
									},
									"id": 1015,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isContract",
									"nameLocation": "1230:10:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1004,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1003,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1249:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "1241:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1002,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1241:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:17:5"
									},
									"returnParameters": {
										"id": 1007,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1006,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1015,
												"src": "1281:4:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1005,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1281:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1280:6:5"
									},
									"scope": 1281,
									"src": "1221:326:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1048,
										"nodeType": "Block",
										"src": "2553:246:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1030,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1026,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "2580:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1281",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1281",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1025,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2572:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1024,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "2572:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1027,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2572:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1028,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "2572:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1029,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1020,
																"src": "2597:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2572:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e6365",
															"id": 1031,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2605:31:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															},
															"value": "Address: insufficient balance"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9",
																"typeString": "literal_string \"Address: insufficient balance\""
															}
														],
														"id": 1023,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2564:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1032,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2564:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1033,
												"nodeType": "ExpressionStatement",
												"src": "2564:73:5"
											},
											{
												"assignments": [
													1035,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 1035,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "2656:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1048,
														"src": "2651:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1034,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "2651:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 1042,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 1040,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2699:2:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 1036,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1018,
																"src": "2669:9:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 1037,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "2669:14:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1039,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1038,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1020,
																"src": "2691:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "2669:29:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1041,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2669:33:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2650:52:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1044,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1035,
															"src": "2721:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564",
															"id": 1045,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2730:60:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															},
															"value": "Address: unable to send value, recipient may have reverted"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae",
																"typeString": "literal_string \"Address: unable to send value, recipient may have reverted\""
															}
														],
														"id": 1043,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "2713:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1046,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2713:78:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1047,
												"nodeType": "ExpressionStatement",
												"src": "2713:78:5"
											}
										]
									},
									"documentation": {
										"id": 1016,
										"nodeType": "StructuredDocumentation",
										"src": "1555:921:5",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 1049,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "2491:9:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1021,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1018,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "2517:9:5",
												"nodeType": "VariableDeclaration",
												"scope": 1049,
												"src": "2501:25:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 1017,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2501:15:5",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1020,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "2536:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1049,
												"src": "2528:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1019,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2528:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2500:43:5"
									},
									"returnParameters": {
										"id": 1022,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2553:0:5"
									},
									"scope": 1281,
									"src": "2482:317:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1066,
										"nodeType": "Block",
										"src": "3650:98:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1060,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1052,
															"src": "3690:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1061,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1054,
															"src": "3698:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1062,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3704:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564",
															"id": 1063,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3707:32:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															},
															"value": "Address: low-level call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df",
																"typeString": "literal_string \"Address: low-level call failed\""
															}
														],
														"id": 1059,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1107,
															1151
														],
														"referencedDeclaration": 1151,
														"src": "3668:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1064,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3668:72:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1058,
												"id": 1065,
												"nodeType": "Return",
												"src": "3661:79:5"
											}
										]
									},
									"documentation": {
										"id": 1050,
										"nodeType": "StructuredDocumentation",
										"src": "2807:748:5",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
									},
									"id": 1067,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3570:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1052,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3591:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "3583:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1051,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3583:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1054,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3612:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "3599:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1053,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3599:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3582:35:5"
									},
									"returnParameters": {
										"id": 1058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1057,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1067,
												"src": "3636:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1056,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3636:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3635:14:5"
									},
									"scope": 1281,
									"src": "3561:187:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1086,
										"nodeType": "Block",
										"src": "4129:78:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1080,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1070,
															"src": "4169:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1081,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1072,
															"src": "4177:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 1082,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4183:1:5",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														{
															"id": 1083,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1074,
															"src": "4186:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1079,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1107,
															1151
														],
														"referencedDeclaration": 1151,
														"src": "4147:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1084,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4147:52:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1078,
												"id": 1085,
												"nodeType": "Return",
												"src": "4140:59:5"
											}
										]
									},
									"documentation": {
										"id": 1068,
										"nodeType": "StructuredDocumentation",
										"src": "3756:216:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1087,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "3987:12:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1075,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1070,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4018:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "4010:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1069,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4010:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1072,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4048:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "4035:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1071,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4035:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1074,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "4077:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "4063:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1073,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "4063:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3999:97:5"
									},
									"returnParameters": {
										"id": 1078,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1077,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1087,
												"src": "4115:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1076,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4115:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4114:14:5"
									},
									"scope": 1281,
									"src": "3978:229:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1106,
										"nodeType": "Block",
										"src": "4729:113:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1100,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1090,
															"src": "4769:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1101,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1092,
															"src": "4777:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1102,
															"name": "value",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1094,
															"src": "4783:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564",
															"id": 1103,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4790:43:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															},
															"value": "Address: low-level call with value failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc",
																"typeString": "literal_string \"Address: low-level call with value failed\""
															}
														],
														"id": 1099,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1107,
															1151
														],
														"referencedDeclaration": 1151,
														"src": "4747:21:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256,string memory) returns (bytes memory)"
														}
													},
													"id": 1104,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4747:87:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1098,
												"id": 1105,
												"nodeType": "Return",
												"src": "4740:94:5"
											}
										]
									},
									"documentation": {
										"id": 1088,
										"nodeType": "StructuredDocumentation",
										"src": "4215:361:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
									},
									"id": 1107,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "4591:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1095,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1090,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4631:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "4623:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1089,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4623:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1092,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4661:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "4648:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1091,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4648:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1094,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "4684:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "4676:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1093,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4676:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4612:84:5"
									},
									"returnParameters": {
										"id": 1098,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1097,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1107,
												"src": "4715:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1096,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4715:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4714:14:5"
									},
									"scope": 1281,
									"src": "4582:260:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1150,
										"nodeType": "Block",
										"src": "5282:271:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1128,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 1124,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "5309:4:5",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1281",
																				"typeString": "library AddressUpgradeable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_AddressUpgradeable_$1281",
																				"typeString": "library AddressUpgradeable"
																			}
																		],
																		"id": 1123,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "5301:7:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 1122,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "5301:7:5",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1125,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "5301:13:5",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 1126,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberName": "balance",
																"nodeType": "MemberAccess",
																"src": "5301:21:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"id": 1127,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1114,
																"src": "5326:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5301:30:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c",
															"id": 1129,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5333:40:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															},
															"value": "Address: insufficient balance for call"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c",
																"typeString": "literal_string \"Address: insufficient balance for call\""
															}
														],
														"id": 1121,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "5293:7:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 1130,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5293:81:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1131,
												"nodeType": "ExpressionStatement",
												"src": "5293:81:5"
											},
											{
												"assignments": [
													1133,
													1135
												],
												"declarations": [
													{
														"constant": false,
														"id": 1133,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "5391:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "5386:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1132,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "5386:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1135,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "5413:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1150,
														"src": "5400:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1134,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "5400:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1142,
												"initialValue": {
													"arguments": [
														{
															"id": 1140,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1112,
															"src": "5453:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 1136,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1110,
																"src": "5427:6:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1137,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "5427:11:5",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 1139,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 1138,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1114,
																"src": "5446:5:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "5427:25:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 1141,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5427:31:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "5385:73:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1144,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1110,
															"src": "5503:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1145,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1133,
															"src": "5511:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1146,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1135,
															"src": "5520:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1147,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1116,
															"src": "5532:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1143,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "5476:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1148,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5476:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1120,
												"id": 1149,
												"nodeType": "Return",
												"src": "5469:76:5"
											}
										]
									},
									"documentation": {
										"id": 1108,
										"nodeType": "StructuredDocumentation",
										"src": "4850:242:5",
										"text": " @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
									},
									"id": 1151,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "5107:21:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1117,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1110,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5147:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "5139:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1109,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5139:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1112,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5177:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "5164:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1111,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5164:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1114,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "5200:5:5",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "5192:13:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1113,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5192:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1116,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "5230:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "5216:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1115,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "5216:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5128:121:5"
									},
									"returnParameters": {
										"id": 1120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1151,
												"src": "5268:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1118,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5268:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5267:14:5"
									},
									"scope": 1281,
									"src": "5098:455:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1167,
										"nodeType": "Block",
										"src": "5838:99:5",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1162,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1154,
															"src": "5875:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1163,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1156,
															"src": "5883:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564",
															"id": 1164,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5889:39:5",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															},
															"value": "Address: low-level static call failed"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0",
																"typeString": "literal_string \"Address: low-level static call failed\""
															}
														],
														"id": 1161,
														"name": "functionStaticCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1168,
															1197
														],
														"referencedDeclaration": 1197,
														"src": "5856:18:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1165,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5856:73:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1160,
												"id": 1166,
												"nodeType": "Return",
												"src": "5849:80:5"
											}
										]
									},
									"documentation": {
										"id": 1152,
										"nodeType": "StructuredDocumentation",
										"src": "5561:171:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1168,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "5747:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1157,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1154,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "5774:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "5766:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1153,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5766:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1156,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5795:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "5782:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1155,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5782:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5765:35:5"
									},
									"returnParameters": {
										"id": 1160,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1159,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1168,
												"src": "5824:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1158,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5824:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5823:14:5"
									},
									"scope": 1281,
									"src": "5738:199:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1196,
										"nodeType": "Block",
										"src": "6291:171:5",
										"statements": [
											{
												"assignments": [
													1181,
													1183
												],
												"declarations": [
													{
														"constant": false,
														"id": 1181,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "6308:7:5",
														"nodeType": "VariableDeclaration",
														"scope": 1196,
														"src": "6303:12:5",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 1180,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "6303:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 1183,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "6330:10:5",
														"nodeType": "VariableDeclaration",
														"scope": 1196,
														"src": "6317:23:5",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1182,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "6317:5:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1188,
												"initialValue": {
													"arguments": [
														{
															"id": 1186,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1173,
															"src": "6362:4:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 1184,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "6344:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 1185,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "6344:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 1187,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6344:23:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6302:65:5"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1190,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1171,
															"src": "6412:6:5",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1191,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1181,
															"src": "6420:7:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 1192,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "6429:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"id": 1193,
															"name": "errorMessage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1175,
															"src": "6441:12:5",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"id": 1189,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1236,
														"src": "6385:26:5",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory,string memory) view returns (bytes memory)"
														}
													},
													"id": 1194,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6385:69:5",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 1179,
												"id": 1195,
												"nodeType": "Return",
												"src": "6378:76:5"
											}
										]
									},
									"documentation": {
										"id": 1169,
										"nodeType": "StructuredDocumentation",
										"src": "5945:178:5",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
									},
									"id": 1197,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "6138:18:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1176,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1171,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6175:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "6167:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1170,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6167:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1173,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "6205:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "6192:17:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1172,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6192:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1175,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6234:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "6220:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1174,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6220:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6156:97:5"
									},
									"returnParameters": {
										"id": 1179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1178,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1197,
												"src": "6277:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1177,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6277:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6276:14:5"
									},
									"scope": 1281,
									"src": "6129:333:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1235,
										"nodeType": "Block",
										"src": "6957:445:5",
										"statements": [
											{
												"condition": {
													"id": 1211,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1202,
													"src": "6972:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1233,
													"nodeType": "Block",
													"src": "7335:60:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1229,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1204,
																		"src": "7358:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1230,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1206,
																		"src": "7370:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1228,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1280,
																	"src": "7350:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1231,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7350:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1232,
															"nodeType": "ExpressionStatement",
															"src": "7350:33:5"
														}
													]
												},
												"id": 1234,
												"nodeType": "IfStatement",
												"src": "6968:427:5",
												"trueBody": {
													"id": 1227,
													"nodeType": "Block",
													"src": "6981:348:5",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1215,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"expression": {
																		"id": 1212,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1204,
																		"src": "7000:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1213,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberName": "length",
																	"nodeType": "MemberAccess",
																	"src": "7000:17:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1214,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7021:1:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "7000:22:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1224,
															"nodeType": "IfStatement",
															"src": "6996:290:5",
															"trueBody": {
																"id": 1223,
																"nodeType": "Block",
																"src": "7024:262:5",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"id": 1218,
																							"name": "target",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1200,
																							"src": "7229:6:5",
																							"typeDescriptions": {
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						}
																					],
																					"expression": {
																						"argumentTypes": [
																							{
																								"typeIdentifier": "t_address",
																								"typeString": "address"
																							}
																						],
																						"id": 1217,
																						"name": "isContract",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1015,
																						"src": "7218:10:5",
																						"typeDescriptions": {
																							"typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
																							"typeString": "function (address) view returns (bool)"
																						}
																					},
																					"id": 1219,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"kind": "functionCall",
																					"lValueRequested": false,
																					"names": [],
																					"nodeType": "FunctionCall",
																					"src": "7218:18:5",
																					"tryCall": false,
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				{
																					"hexValue": "416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374",
																					"id": 1220,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "string",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "7238:31:5",
																					"typeDescriptions": {
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					},
																					"value": "Address: call to non-contract"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					},
																					{
																						"typeIdentifier": "t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad",
																						"typeString": "literal_string \"Address: call to non-contract\""
																					}
																				],
																				"id": 1216,
																				"name": "require",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [
																					4294967278,
																					4294967278
																				],
																				"referencedDeclaration": 4294967278,
																				"src": "7210:7:5",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																					"typeString": "function (bool,string memory) pure"
																				}
																			},
																			"id": 1221,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7210:60:5",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1222,
																		"nodeType": "ExpressionStatement",
																		"src": "7210:60:5"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 1225,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1204,
																"src": "7307:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1210,
															"id": 1226,
															"nodeType": "Return",
															"src": "7300:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1198,
										"nodeType": "StructuredDocumentation",
										"src": "6470:282:5",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
									},
									"id": 1236,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "6767:26:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1207,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1200,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "6812:6:5",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "6804:14:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1199,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6804:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1202,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "6834:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "6829:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1201,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6829:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1204,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "6865:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "6852:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1203,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6852:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1206,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "6900:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "6886:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1205,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6886:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6793:126:5"
									},
									"returnParameters": {
										"id": 1210,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1209,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1236,
												"src": "6943:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1208,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "6943:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6942:14:5"
									},
									"scope": 1281,
									"src": "6758:644:5",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1259,
										"nodeType": "Block",
										"src": "7795:141:5",
										"statements": [
											{
												"condition": {
													"id": 1248,
													"name": "success",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1239,
													"src": "7810:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1257,
													"nodeType": "Block",
													"src": "7869:60:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1253,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1241,
																		"src": "7892:10:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	{
																		"id": 1254,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1243,
																		"src": "7904:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		},
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1252,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1280,
																	"src": "7884:7:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory,string memory) pure"
																	}
																},
																"id": 1255,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7884:33:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1256,
															"nodeType": "ExpressionStatement",
															"src": "7884:33:5"
														}
													]
												},
												"id": 1258,
												"nodeType": "IfStatement",
												"src": "7806:123:5",
												"trueBody": {
													"id": 1251,
													"nodeType": "Block",
													"src": "7819:44:5",
													"statements": [
														{
															"expression": {
																"id": 1249,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1241,
																"src": "7841:10:5",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 1247,
															"id": 1250,
															"nodeType": "Return",
															"src": "7834:17:5"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1237,
										"nodeType": "StructuredDocumentation",
										"src": "7410:215:5",
										"text": " @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
									},
									"id": 1260,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "7640:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1239,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "7672:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "7667:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1238,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "7667:4:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7703:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "7690:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1240,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7690:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "7738:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "7724:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1242,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7724:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7656:101:5"
									},
									"returnParameters": {
										"id": 1247,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1246,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1260,
												"src": "7781:12:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1245,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7781:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7780:14:5"
									},
									"scope": 1281,
									"src": "7631:305:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1279,
										"nodeType": "Block",
										"src": "8027:469:5",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 1267,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1262,
															"src": "8105:10:5",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1268,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "8105:17:5",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1269,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8125:1:5",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8105:21:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 1277,
													"nodeType": "Block",
													"src": "8442:47:5",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 1274,
																		"name": "errorMessage",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1264,
																		"src": "8464:12:5",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1273,
																	"name": "revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967277,
																		4294967277
																	],
																	"referencedDeclaration": 4294967277,
																	"src": "8457:6:5",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_revert_pure$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (string memory) pure"
																	}
																},
																"id": 1275,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8457:20:5",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1276,
															"nodeType": "ExpressionStatement",
															"src": "8457:20:5"
														}
													]
												},
												"id": 1278,
												"nodeType": "IfStatement",
												"src": "8101:388:5",
												"trueBody": {
													"id": 1272,
													"nodeType": "Block",
													"src": "8128:308:5",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "8289:136:5",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "8308:40:5",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "8337:10:5"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "8331:5:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8331:17:5"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "8312:15:5",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "8377:2:5",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "8381:10:5"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "8373:3:5"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "8373:19:5"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "8394:15:5"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "8366:6:5"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "8366:44:5"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "8366:44:5"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "london",
															"externalReferences": [
																{
																	"declaration": 1262,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8337:10:5",
																	"valueSize": 1
																},
																{
																	"declaration": 1262,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "8381:10:5",
																	"valueSize": 1
																}
															],
															"id": 1271,
															"nodeType": "InlineAssembly",
															"src": "8280:145:5"
														}
													]
												}
											}
										]
									},
									"id": 1280,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "7953:7:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1265,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1262,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "7974:10:5",
												"nodeType": "VariableDeclaration",
												"scope": 1280,
												"src": "7961:23:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1261,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "7961:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1264,
												"mutability": "mutable",
												"name": "errorMessage",
												"nameLocation": "8000:12:5",
												"nodeType": "VariableDeclaration",
												"scope": 1280,
												"src": "7986:26:5",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1263,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "7986:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7960:53:5"
									},
									"returnParameters": {
										"id": 1266,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8027:0:5"
									},
									"scope": 1281,
									"src": "7944:552:5",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1282,
							"src": "202:8297:5",
							"usedErrors": []
						}
					],
					"src": "104:8397:5"
				},
				"id": 5
			},
			"node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1281
						],
						"ContextUpgradeable": [
							1323
						],
						"Initializable": [
							282
						]
					},
					"id": 1324,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1283,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "89:23:6"
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 1284,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1324,
							"sourceUnit": 283,
							"src": "114:42:6",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1286,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 282,
										"src": "707:13:6"
									},
									"id": 1287,
									"nodeType": "InheritanceSpecifier",
									"src": "707:13:6"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1285,
								"nodeType": "StructuredDocumentation",
								"src": "160:505:6",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1323,
							"linearizedBaseContracts": [
								1323,
								282
							],
							"name": "ContextUpgradeable",
							"nameLocation": "685:18:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1292,
										"nodeType": "Block",
										"src": "780:8:6",
										"statements": []
									},
									"id": 1293,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1290,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1289,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "763:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "763:16:6"
										}
									],
									"name": "__Context_init",
									"nameLocation": "737:14:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1288,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "751:2:6"
									},
									"returnParameters": {
										"id": 1291,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "780:0:6"
									},
									"scope": 1323,
									"src": "728:60:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1298,
										"nodeType": "Block",
										"src": "858:8:6",
										"statements": []
									},
									"id": 1299,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1296,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1295,
												"name": "onlyInitializing",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 245,
												"src": "841:16:6"
											},
											"nodeType": "ModifierInvocation",
											"src": "841:16:6"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "805:24:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1294,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "829:2:6"
									},
									"returnParameters": {
										"id": 1297,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "858:0:6"
									},
									"scope": 1323,
									"src": "796:70:6",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1307,
										"nodeType": "Block",
										"src": "934:36:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1304,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "952:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "952:10:6",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1303,
												"id": 1306,
												"nodeType": "Return",
												"src": "945:17:6"
											}
										]
									},
									"id": 1308,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "881:10:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1300,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "891:2:6"
									},
									"returnParameters": {
										"id": 1303,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1302,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1308,
												"src": "925:7:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1301,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "925:7:6",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "924:9:6"
									},
									"scope": 1323,
									"src": "872:98:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1316,
										"nodeType": "Block",
										"src": "1045:34:6",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1313,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1063:3:6",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1314,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1063:8:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1312,
												"id": 1315,
												"nodeType": "Return",
												"src": "1056:15:6"
											}
										]
									},
									"id": 1317,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "987:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "995:2:6"
									},
									"returnParameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1317,
												"src": "1029:14:6",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1310,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1029:5:6",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1028:16:6"
									},
									"scope": 1323,
									"src": "978:101:6",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 1318,
										"nodeType": "StructuredDocumentation",
										"src": "1087:258:6",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain.\n See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"
									},
									"id": 1322,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "1371:5:6",
									"nodeType": "VariableDeclaration",
									"scope": 1323,
									"src": "1351:25:6",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$50_storage",
										"typeString": "uint256[50]"
									},
									"typeName": {
										"baseType": {
											"id": 1319,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1351:7:6",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 1321,
										"length": {
											"hexValue": "3530",
											"id": 1320,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "1359:2:6",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_50_by_1",
												"typeString": "int_const 50"
											},
											"value": "50"
										},
										"nodeType": "ArrayTypeName",
										"src": "1351:11:6",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$50_storage_ptr",
											"typeString": "uint256[50]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 1324,
							"src": "667:713:6",
							"usedErrors": []
						}
					],
					"src": "89:1293:6"
				},
				"id": 6
			},
			"upgradeable/ERC20Updateable.sol": {
				"ast": {
					"absolutePath": "upgradeable/ERC20Updateable.sol",
					"exportedSymbols": {
						"AddressUpgradeable": [
							1281
						],
						"ContextUpgradeable": [
							1323
						],
						"ERC20Upgradeable": [
							894
						],
						"IERC20MetadataUpgradeable": [
							997
						],
						"IERC20Upgradeable": [
							972
						],
						"Initializable": [
							282
						],
						"MyTokenV1": [
							1362
						],
						"OwnableUpgradeable": [
							131
						]
					},
					"id": 1363,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1325,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "63:23:7"
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../node_modules/@openzeppelin-contracts-upgradeable/proxy/utils/Initializable.sol",
							"id": 1326,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1363,
							"sourceUnit": 283,
							"src": "90:91:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"file": "../node_modules/@openzeppelin-contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol",
							"id": 1327,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1363,
							"sourceUnit": 895,
							"src": "183:94:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "../node_modules/@openzeppelin-contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 1328,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1363,
							"sourceUnit": 132,
							"src": "279:91:7",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1329,
										"name": "Initializable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 282,
										"src": "396:13:7"
									},
									"id": 1330,
									"nodeType": "InheritanceSpecifier",
									"src": "396:13:7"
								},
								{
									"baseName": {
										"id": 1331,
										"name": "ERC20Upgradeable",
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 894,
										"src": "411:16:7"
									},
									"id": 1332,
									"nodeType": "InheritanceSpecifier",
									"src": "411:16:7"
								}
							],
							"canonicalName": "MyTokenV1",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 1362,
							"linearizedBaseContracts": [
								1362,
								894,
								997,
								972,
								1323,
								282
							],
							"name": "MyTokenV1",
							"nameLocation": "383:9:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1353,
										"nodeType": "Block",
										"src": "476:100:7",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"hexValue": "4d79546f6b656e",
															"id": 1338,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "498:9:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5",
																"typeString": "literal_string \"MyToken\""
															},
															"value": "MyToken"
														},
														{
															"hexValue": "4d544b",
															"id": 1339,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "509:5:7",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_793539e36336d70961c91bdb898dff4b065dbb5ef5ac709025f5b68be91dd01e",
																"typeString": "literal_string \"MTK\""
															},
															"value": "MTK"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_245c734e6d4ec044daf7beffa09d54d4bafba490113c199734d790b04a7390e5",
																"typeString": "literal_string \"MyToken\""
															},
															{
																"typeIdentifier": "t_stringliteral_793539e36336d70961c91bdb898dff4b065dbb5ef5ac709025f5b68be91dd01e",
																"typeString": "literal_string \"MTK\""
															}
														],
														"id": 1337,
														"name": "__ERC20_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 329,
														"src": "485:12:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_string_memory_ptr_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (string memory,string memory)"
														}
													},
													"id": 1340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "485:30:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1341,
												"nodeType": "ExpressionStatement",
												"src": "485:30:7"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 1343,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "532:3:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 1344,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "532:10:7",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1350,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31303030",
																"id": 1345,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "544:4:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000_by_1",
																	"typeString": "int_const 1000"
																},
																"value": "1000"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1349,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 1346,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "551:2:7",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"arguments": [],
																	"expression": {
																		"argumentTypes": [],
																		"id": 1347,
																		"name": "decimals",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 377,
																		"src": "557:8:7",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_view$__$returns$_t_uint8_$",
																			"typeString": "function () view returns (uint8)"
																		}
																	},
																	"id": 1348,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "557:10:7",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint8",
																		"typeString": "uint8"
																	}
																},
																"src": "551:16:7",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "544:23:7",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1342,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 706,
														"src": "526:5:7",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1351,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "526:42:7",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1352,
												"nodeType": "ExpressionStatement",
												"src": "526:42:7"
											}
										]
									},
									"functionSelector": "8129fc1c",
									"id": 1354,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 1335,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1334,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 202,
												"src": "457:11:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "457:11:7"
										}
									],
									"name": "initialize",
									"nameLocation": "444:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1333,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "454:2:7"
									},
									"returnParameters": {
										"id": 1336,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "476:0:7"
									},
									"scope": 1362,
									"src": "435:141:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 1360,
										"nodeType": "Block",
										"src": "664:2:7",
										"statements": []
									},
									"documentation": {
										"id": 1355,
										"nodeType": "StructuredDocumentation",
										"src": "584:48:7",
										"text": "@custom:oz-upgrades-unsafe-allow constructor"
									},
									"id": 1361,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"id": 1358,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 1357,
												"name": "initializer",
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 202,
												"src": "652:11:7"
											},
											"nodeType": "ModifierInvocation",
											"src": "652:11:7"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1356,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "649:2:7"
									},
									"returnParameters": {
										"id": 1359,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "664:0:7"
									},
									"scope": 1362,
									"src": "638:28:7",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 1363,
							"src": "374:295:7",
							"usedErrors": []
						}
					],
					"src": "63:606:7"
				},
				"id": 7
			}
		}
	}
}