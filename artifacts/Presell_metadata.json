{
	"compiler": {
		"version": "0.5.5+commit.47a71e8f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"constant": true,
				"inputs": [],
				"name": "hasClosed",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "rate",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "weiRaised",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "isOpen",
				"outputs": [
					{
						"name": "",
						"type": "bool"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "withdrawTokens",
				"outputs": [],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "closingTime",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "wallet",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [
					{
						"name": "account",
						"type": "address"
					}
				],
				"name": "balanceOf",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "openingTime",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "remainingTokens",
				"outputs": [
					{
						"name": "",
						"type": "uint256"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "tokenWallet",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"constant": false,
				"inputs": [
					{
						"name": "beneficiary",
						"type": "address"
					}
				],
				"name": "buyTokens",
				"outputs": [],
				"payable": true,
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"constant": true,
				"inputs": [],
				"name": "token",
				"outputs": [
					{
						"name": "",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"name": "rate",
						"type": "uint256"
					},
					{
						"name": "wallet",
						"type": "address"
					},
					{
						"name": "token",
						"type": "address"
					},
					{
						"name": "openingTime",
						"type": "uint256"
					},
					{
						"name": "closingTime",
						"type": "uint256"
					},
					{
						"name": "tokenWallet",
						"type": "address"
					}
				],
				"payable": false,
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"payable": true,
				"stateMutability": "payable",
				"type": "fallback"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"name": "prevClosingTime",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "newClosingTime",
						"type": "uint256"
					}
				],
				"name": "TimedCrowdsaleExtended",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"name": "purchaser",
						"type": "address"
					},
					{
						"indexed": true,
						"name": "beneficiary",
						"type": "address"
					},
					{
						"indexed": false,
						"name": "value",
						"type": "uint256"
					},
					{
						"indexed": false,
						"name": "amount",
						"type": "uint256"
					}
				],
				"name": "TokensPurchased",
				"type": "event"
			}
		],
		"devdoc": {
			"methods": {
				"balanceOf(address)": {
					"return": "the balance of an account."
				},
				"buyTokens(address)": {
					"details": "low level token purchase ***DO NOT OVERRIDE*** This function has a non-reentrancy guard, so it shouldn't be called by another `nonReentrant` function.",
					"params": {
						"beneficiary": "Recipient of the token purchase"
					}
				},
				"closingTime()": {
					"return": "the crowdsale closing time."
				},
				"hasClosed()": {
					"details": "Checks whether the period in which the crowdsale is open has already elapsed.",
					"return": "Whether crowdsale period has elapsed"
				},
				"isOpen()": {
					"return": "true if the crowdsale is open, false otherwise."
				},
				"openingTime()": {
					"return": "the crowdsale opening time."
				},
				"rate()": {
					"return": "the number of token units a buyer gets per wei."
				},
				"remainingTokens()": {
					"details": "Checks the amount of tokens left in the allowance.",
					"return": "Amount of tokens left in the allowance"
				},
				"token()": {
					"return": "the token being sold."
				},
				"tokenWallet()": {
					"return": "the address of the wallet that will hold the tokens."
				},
				"wallet()": {
					"return": "the address where funds are collected."
				},
				"weiRaised()": {
					"return": "the amount of wei raised."
				},
				"withdrawTokens(address)": {
					"details": "Withdraw tokens only after crowdsale ends.",
					"params": {
						"beneficiary": "Whose tokens will be withdrawn."
					}
				}
			}
		},
		"userdoc": {
			"methods": {}
		}
	},
	"settings": {
		"compilationTarget": {
			"msc_token/MscPresell.sol": "Presell"
		},
		"evmVersion": "petersburg",
		"libraries": {},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"msc_token/MscPresell.sol": {
			"keccak256": "0x2e86d718643227ddae993ad6082796828aabbd2597a91976c0937ea1a4d82287",
			"urls": [
				"bzzr://02573811ce1434f5da3e32d275cbf0f649b4d3e362711a645d841ab002edf4c7"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/GSN/Context.sol": {
			"keccak256": "0x90a3995645af7562d84b9d69363ffa5ae7217714ab61e951bf7bc450f40e4061",
			"urls": [
				"bzzr://51482c01bddf23793bddee43b60ab9578a62948a4f2082def24ea792a553b055"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/crowdsale/Crowdsale.sol": {
			"keccak256": "0xe612eb8a3023c1a4f4d7e2d0aaf7f19c25e9d772c46a6e95790ddb42ba7baa99",
			"urls": [
				"bzzr://3f11e0277a173ba437a448df0f1ab16a64b1b1dcd3f34019e052a7c5d14c1ea7"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/crowdsale/distribution/PostDeliveryCrowdsale.sol": {
			"keccak256": "0xe36a7e7cc13c7c63642e8f1a34beb43dd61cd6359f98093e7fab088206c18d0c",
			"urls": [
				"bzzr://33378546ce6c03904bc75b564d85dfdcd81be5ab2a91d58643f4f002430616c5"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/crowdsale/emission/AllowanceCrowdsale.sol": {
			"keccak256": "0x29502dd6dabc9950df59707968e8ff6a3b45c809b0ee32e9f4d6914fba0aee96",
			"urls": [
				"bzzr://bd2fcba21c24cc4897319ad5cf57a91b7a86855394b9165d9339ebabb11c8bc2"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/crowdsale/validation/TimedCrowdsale.sol": {
			"keccak256": "0x9407dd37cfed74aa107fd1614c478ba0a2bc3e084e9aa8fbd5a6f316c53aed3b",
			"urls": [
				"bzzr://196407d49d26f709494b573b06676eaa21b0019ebebd4e610a8b1276965a8067"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/math/Math.sol": {
			"keccak256": "0x4b5aa451e4e8801478708f94b118a7821c0500d676255eaf89fc78c14856ce4e",
			"urls": [
				"bzzr://200d5728b32858918810d8d7a8db1406ee9b157ad5026f050e6d864a696b9080"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/math/SafeMath.sol": {
			"keccak256": "0x640b6dee7a4b830bdfd52b5031a07fc2b12209f5b2e29e5d364a7d37f69d8076",
			"urls": [
				"bzzr://292843005e754e752644f767477ec5ad7a1ffc91ddb18c38b8079c62f3993cad"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/ownership/Ownable.sol": {
			"keccak256": "0x6fb9d7889769d7cc161225f9ef7a90e468ba9788b253816f8d8b6894d3472c24",
			"urls": [
				"bzzr://ab46c9368bc3abdded5eb85858304518c8a0291060ab42087075d759dbf3925f"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/ownership/Secondary.sol": {
			"keccak256": "0xb55d511ea1d79aa4ff7063ac50d134a47c6d3b43b0ee7163e9310c403a945888",
			"urls": [
				"bzzr://e12539a89d0db5576523780d97904d4e5031a8d1c6b74122968dd560cf4b4cf0"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe5bb0f57cff3e299f360052ba50f1ea0fff046df2be070b6943e0e3c3fdad8a9",
			"urls": [
				"bzzr://cf2d583b8dce38d0617fdcd65f2fd9f126fe17b7f683b5a515ea9d2762d8b062"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/token/ERC20/SafeERC20.sol": {
			"keccak256": "0x6f2c9955d65c522b80f4b8792f076512d2df947d2112cbc4d98a4781ed42ede2",
			"urls": [
				"bzzr://d2ff5aadcb697bc27ca3b0f6c40b4998e8cf0a1bd0f761d1df6d5981777841ae"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/utils/Address.sol": {
			"keccak256": "0x1a8e5072509c5ea7365eb1d48030b9be865140c8fb779968da0a459a0e174a11",
			"urls": [
				"bzzr://4e1d23731da27602b8c552e54fb9976dadf8cf46a8f90a3c8c1b85fe044618b9"
			]
		},
		"msc_token/node_modules/@openzeppelin@2.5.0/contracts/utils/ReentrancyGuard.sol": {
			"keccak256": "0xb63221b23818d622bfd83d18e0968307e4fcb7a35536bdceded76e1cf8349acd",
			"urls": [
				"bzzr://35ed82f3c1174e1eb7d9ef351964024e535a992a5dbf4ff125a101aef441fd16"
			]
		}
	},
	"version": 1
}